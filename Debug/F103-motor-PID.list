
F103-motor-PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080067b8  080067b8  000167b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b6c  08006b6c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006b6c  08006b6c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b6c  08006b6c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001d4  08006d48  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08006d48  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c41f  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002003  00000000  00000000  0002c65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  0002e668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1b  00000000  00000000  0002f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c18  00000000  00000000  0002fd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f300  00000000  00000000  000489a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c185  00000000  00000000  00057ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004694  00000000  00000000  000e3e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e84bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080067a0 	.word	0x080067a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080067a0 	.word	0x080067a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <pid_init>:
			   float kp,
			   float ki,
			   float kd,
			   float delta_time,
			   float out_min,
			   float out_max ) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
	if(pid == NULL) return;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d021      	beq.n	800107c <pid_init+0x58>

	pid->KP = kp;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
	pid->KI = ki;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	605a      	str	r2, [r3, #4]
	pid->KD = kd;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	609a      	str	r2, [r3, #8]
	pid->dt = delta_time;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	61da      	str	r2, [r3, #28]

	pid->outMin = out_min;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a3a      	ldr	r2, [r7, #32]
 8001054:	621a      	str	r2, [r3, #32]
	pid->outMax = out_max;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

	// Save setpoint
	pid->setPoint = set_point;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	60da      	str	r2, [r3, #12]

	// Initial error
	pid->error = pid->errorPrev = 0.0;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	611a      	str	r2, [r3, #16]

	// Error integral initial value
	pid->eIntegral = 0.0;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
 800107a:	e000      	b.n	800107e <pid_init+0x5a>
	if(pid == NULL) return;
 800107c:	bf00      	nop
}
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <pid_compute_all>:
 * @brief	Compute controller using all P, I & D constant
 * @param 	pid		 	a pointer to pid_config_t structure.
 * 			input		measurement input
 * @return 	PID's controller output
 * */
float pid_compute_all(pid_config_t *pid, float input) {
 8001086:	b590      	push	{r4, r7, lr}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
	// Determine the error
	pid->error = (pid->setPoint - input);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fd4a 	bl	8000b30 <__aeabi_fsub>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	611a      	str	r2, [r3, #16]

	// Calculate error integral
	pid->eIntegral = pid->eIntegral + pid->error * pid->dt;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699c      	ldr	r4, [r3, #24]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f7ff fe46 	bl	8000d44 <__aeabi_fmul>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff fd39 	bl	8000b34 <__addsf3>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]

	// Calculate error derivative
	float dedt = (pid->error - pid->errorPrev) / pid->dt;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff fd2b 	bl	8000b30 <__aeabi_fsub>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4610      	mov	r0, r2
 80010e6:	f7ff fee1 	bl	8000eac <__aeabi_fdiv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	60fb      	str	r3, [r7, #12]

	// Compute all formulas
	float output = (pid->KP * pid->error) + (pid->KI * pid->eIntegral) + (pid->KD * dedt);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4610      	mov	r0, r2
 80010fa:	f7ff fe23 	bl	8000d44 <__aeabi_fmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	461c      	mov	r4, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff fe19 	bl	8000d44 <__aeabi_fmul>
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fd0c 	bl	8000b34 <__addsf3>
 800111c:	4603      	mov	r3, r0
 800111e:	461c      	mov	r4, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe0c 	bl	8000d44 <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	4619      	mov	r1, r3
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff fcff 	bl	8000b34 <__addsf3>
 8001136:	4603      	mov	r3, r0
 8001138:	60bb      	str	r3, [r7, #8]

	// Save last error
	pid->errorPrev = pid->error;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	615a      	str	r2, [r3, #20]

	return output;
 8001142:	68bb      	ldr	r3, [r7, #8]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <MX_GPIO_Init+0xa8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <MX_GPIO_Init+0xa8>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_GPIO_Init+0xa8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_GPIO_Init+0xa8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <MX_GPIO_Init+0xa8>)
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_GPIO_Init+0xa8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <MX_GPIO_Init+0xa8>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ae:	4812      	ldr	r0, [pc, #72]	; (80011f8 <MX_GPIO_Init+0xac>)
 80011b0:	f001 f8b8 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ONBOARD_Pin;
 80011b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_ONBOARD_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <MX_GPIO_Init+0xac>)
 80011ce:	f000 ff25 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_IN_Pin;
 80011d2:	2320      	movs	r3, #32
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_IN_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_GPIO_Init+0xb0>)
 80011e6:	f000 ff19 	bl	800201c <HAL_GPIO_Init>

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40010800 	.word	0x40010800

08001200 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001208:	1d39      	adds	r1, r7, #4
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	2201      	movs	r2, #1
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <__io_putchar+0x20>)
 8001212:	f002 fc9d 	bl	8003b50 <HAL_UART_Transmit>
  return ch;
 8001216:	687b      	ldr	r3, [r7, #4]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000328 	.word	0x20000328

08001224 <lpf_init>:

void lpf_init(lpf_config_t *lpf, float filter_factor) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	lpf->value = lpf->valueNew = lpf->valueOld = 0.0;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
	lpf->factor = filter_factor;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	60da      	str	r2, [r3, #12]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
	...

08001258 <lpf_get_filter>:

float lpf_get_filter(lpf_config_t *lpf, float input) {
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	lpf->value = input;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	601a      	str	r2, [r3, #0]
	lpf->valueNew = ((1.0 - lpf->factor) * lpf->valueOld) + (lpf->factor * lpf->value);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f8db 	bl	8000428 <__aeabi_f2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	f04f 0000 	mov.w	r0, #0
 800127a:	491d      	ldr	r1, [pc, #116]	; (80012f0 <lpf_get_filter+0x98>)
 800127c:	f7fe ff74 	bl	8000168 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4614      	mov	r4, r2
 8001286:	461d      	mov	r5, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8cb 	bl	8000428 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff f91d 	bl	80004d8 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4614      	mov	r4, r2
 80012a4:	461d      	mov	r5, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4610      	mov	r0, r2
 80012b2:	f7ff fd47 	bl	8000d44 <__aeabi_fmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8b5 	bl	8000428 <__aeabi_f2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe ff51 	bl	800016c <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fbd9 	bl	8000a88 <__aeabi_d2f>
 80012d6:	4602      	mov	r2, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
	lpf->valueOld = lpf->valueNew;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]

	return (lpf->valueNew);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdb0      	pop	{r4, r5, r7, pc}
 80012f0:	3ff00000 	.word	0x3ff00000

080012f4 <motor_rpm_init>:

void motor_rpm_init(rpm_config_t *rpm, TIM_HandleTypeDef *timEnc, uint16_t sample_time) {
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]
	rpm->timEncoder = timEnc;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	601a      	str	r2, [r3, #0]
	rpm->lastMillis = 0;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	rpm->nowMillis = 0;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
	rpm->rpm = 0;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
	rpm->encoderVal = 0;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	829a      	strh	r2, [r3, #20]
	rpm->sampleTime = sample_time;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	819a      	strh	r2, [r3, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
	...

08001334 <motor_get_rpm>:
	rpm->rpm = 0;
	rpm->encoderVal = 0;
	rpm->sampleTime = 0;
}

uint16_t motor_get_rpm(rpm_config_t *rpm) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

	// Stop timer encoder in order to get a correct encoder value
	HAL_TIM_Encoder_Stop(rpm->timEncoder, TIM_CHANNEL_ALL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	213c      	movs	r1, #60	; 0x3c
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fe90 	bl	8003068 <HAL_TIM_Encoder_Stop>
	// Extract encoder value from timer counter
	rpm->encoderVal = __HAL_TIM_GET_COUNTER(rpm->timEncoder);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	b29a      	uxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	829a      	strh	r2, [r3, #20]
	// Calculate rpm
	rpm->rpm = ((rpm->encoderVal * (1000 / rpm->sampleTime)) * 60) / MOTOR_PPR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	8a9b      	ldrh	r3, [r3, #20]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	899b      	ldrh	r3, [r3, #12]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fb93 f3f1 	sdiv	r3, r3, r1
 800136a:	fb03 f202 	mul.w	r2, r3, r2
 800136e:	4613      	mov	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4a11      	ldr	r2, [pc, #68]	; (80013bc <motor_get_rpm+0x88>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	441a      	add	r2, r3
 800137e:	11d2      	asrs	r2, r2, #7
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fc89 	bl	8000c9c <__aeabi_i2f>
 800138a:	4602      	mov	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	611a      	str	r2, [r3, #16]
	// Reset encoder value
	__HAL_TIM_SET_COUNTER(rpm->timEncoder, 0);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
	// Restart timer encoder
	HAL_TIM_Encoder_Start(rpm->timEncoder, TIM_CHANNEL_ALL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	213c      	movs	r1, #60	; 0x3c
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fdd3 	bl	8002f4c <HAL_TIM_Encoder_Start>

	return rpm->rpm;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe1a 	bl	8000fe4 <__aeabi_f2uiz>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29b      	uxth	r3, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	8d3dcb09 	.word	0x8d3dcb09

080013c0 <fmap>:

float fmap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fbad 	bl	8000b30 <__aeabi_fsub>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461c      	mov	r4, r3
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	6a38      	ldr	r0, [r7, #32]
 80013de:	f7ff fba7 	bl	8000b30 <__aeabi_fsub>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fcac 	bl	8000d44 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461c      	mov	r4, r3
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fb9c 	bl	8000b30 <__aeabi_fsub>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fd55 	bl	8000eac <__aeabi_fdiv>
 8001402:	4603      	mov	r3, r0
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb94 	bl	8000b34 <__addsf3>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
	...

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f000 fcb6 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f8cc 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f7ff fe90 	bl	800114c <MX_GPIO_Init>
  MX_TIM1_Init();
 800142c:	f000 fa32 	bl	8001894 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001430:	f000 fa88 	bl	8001944 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001434:	f000 fb06 	bl	8001a44 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001438:	f000 fc10 	bl	8001c5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  /* Start PWM Timer */
  HAL_TIM_PWM_Start(&TIMER_PWM_ENC, TIM_CHANNEL_1);
 800143c:	2100      	movs	r1, #0
 800143e:	484f      	ldr	r0, [pc, #316]	; (800157c <main+0x164>)
 8001440:	f001 fc40 	bl	8002cc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&TIMER_PWM_ENC, TIM_CHANNEL_2);
 8001444:	2104      	movs	r1, #4
 8001446:	484d      	ldr	r0, [pc, #308]	; (800157c <main+0x164>)
 8001448:	f001 fc3c 	bl	8002cc4 <HAL_TIM_PWM_Start>

  /* Start Motor Encoder Timer */
  HAL_TIM_Encoder_Start(&TIMER_MOTOR_ENC, TIM_CHANNEL_ALL);
 800144c:	213c      	movs	r1, #60	; 0x3c
 800144e:	484c      	ldr	r0, [pc, #304]	; (8001580 <main+0x168>)
 8001450:	f001 fd7c 	bl	8002f4c <HAL_TIM_Encoder_Start>
  // Motor encoder rpm init
  motor_rpm_init(&motorEncoder, &TIMER_MOTOR_ENC, PROGRAM_SAMPLE_TIME);
 8001454:	2214      	movs	r2, #20
 8001456:	494a      	ldr	r1, [pc, #296]	; (8001580 <main+0x168>)
 8001458:	484a      	ldr	r0, [pc, #296]	; (8001584 <main+0x16c>)
 800145a:	f7ff ff4b 	bl	80012f4 <motor_rpm_init>
  // RPM low-pass-filter init
  lpf_init(&rpmFilter, .02);
 800145e:	494a      	ldr	r1, [pc, #296]	; (8001588 <main+0x170>)
 8001460:	484a      	ldr	r0, [pc, #296]	; (800158c <main+0x174>)
 8001462:	f7ff fedf 	bl	8001224 <lpf_init>
  // PID init
  pid_init(&motorPID, 255, 5.0, 2.5, 0.2, (PROGRAM_SAMPLE_TIME / 1000.0), 0, 100);
 8001466:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <main+0x178>)
 8001468:	9303      	str	r3, [sp, #12]
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <main+0x170>)
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <main+0x17c>)
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4b47      	ldr	r3, [pc, #284]	; (8001598 <main+0x180>)
 800147a:	4a48      	ldr	r2, [pc, #288]	; (800159c <main+0x184>)
 800147c:	4948      	ldr	r1, [pc, #288]	; (80015a0 <main+0x188>)
 800147e:	4849      	ldr	r0, [pc, #292]	; (80015a4 <main+0x18c>)
 8001480:	f7ff fdd0 	bl	8001024 <pid_init>

  /* Start Rotary Encoder Timer */
  //  HAL_TIM_Encoder_Start(&TIMER_ROTARY_ENC, TIM_CHANNEL_ALL);

  float pwmMapped = 0.0;
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  uint16_t rpmNew = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	817b      	strh	r3, [r7, #10]

  TIM2->CCR1 = 0;
 800148e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001492:	2200      	movs	r2, #0
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 20;
 8001496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800149a:	2214      	movs	r2, #20
 800149c:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a4:	4840      	ldr	r0, [pc, #256]	; (80015a8 <main+0x190>)
 80014a6:	f000 ff3d 	bl	8002324 <HAL_GPIO_WritePin>

  nowMillis = HAL_GetTick();
 80014aa:	f000 fcc9 	bl	8001e40 <HAL_GetTick>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a3e      	ldr	r2, [pc, #248]	; (80015ac <main+0x194>)
 80014b2:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  nowMillis = HAL_GetTick();
 80014b4:	f000 fcc4 	bl	8001e40 <HAL_GetTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <main+0x194>)
 80014bc:	6013      	str	r3, [r2, #0]
	  elapsedTime = nowMillis - previousMillis;
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <main+0x194>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <main+0x198>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <main+0x19c>)
 80014ca:	6013      	str	r3, [r2, #0]
	  if(elapsedTime >= PROGRAM_SAMPLE_TIME) {
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <main+0x19c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b13      	cmp	r3, #19
 80014d2:	d9ef      	bls.n	80014b4 <main+0x9c>

		  uint16_t rpmVal = motor_get_rpm(&motorEncoder);
 80014d4:	482b      	ldr	r0, [pc, #172]	; (8001584 <main+0x16c>)
 80014d6:	f7ff ff2d 	bl	8001334 <motor_get_rpm>
 80014da:	4603      	mov	r3, r0
 80014dc:	813b      	strh	r3, [r7, #8]
		  rpmNew = lpf_get_filter(&rpmFilter, rpmVal);
 80014de:	893b      	ldrh	r3, [r7, #8]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbd7 	bl	8000c94 <__aeabi_ui2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4828      	ldr	r0, [pc, #160]	; (800158c <main+0x174>)
 80014ec:	f7ff feb4 	bl	8001258 <lpf_get_filter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fd76 	bl	8000fe4 <__aeabi_f2uiz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	817b      	strh	r3, [r7, #10]

		  float outpwm = pid_compute_all(&motorPID, rpmNew);
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fbc8 	bl	8000c94 <__aeabi_ui2f>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4826      	ldr	r0, [pc, #152]	; (80015a4 <main+0x18c>)
 800150a:	f7ff fdbc 	bl	8001086 <pid_compute_all>
 800150e:	6078      	str	r0, [r7, #4]
		  pwmMapped = fmap(outpwm, 0, 500, 0, 100);
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <main+0x178>)
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <main+0x1a0>)
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff4e 	bl	80013c0 <fmap>
 8001524:	60f8      	str	r0, [r7, #12]

//		  __HAL_TIM_SET_COMPARE(motorEncoder.timEncoder, TIM_CHANNEL_2, ((uint32_t)pwmMapped));

		  TIM2->CCR2 = (uint32_t)pwmMapped;
 8001526:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fd5a 	bl	8000fe4 <__aeabi_f2uiz>
 8001530:	4603      	mov	r3, r0
 8001532:	63a3      	str	r3, [r4, #56]	; 0x38
//		  printf("%.2f,%.2f,%.2f\r\n", setPoint, (float)rpmNew, pwmMapped);
		  printf("SP:%.2f,RPM:%.2f,PWM:%.2f\r\n", motorPID.setPoint, (float)rpmNew, pwmMapped);
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <main+0x18c>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff75 	bl	8000428 <__aeabi_f2d>
 800153e:	4680      	mov	r8, r0
 8001540:	4689      	mov	r9, r1
 8001542:	897b      	ldrh	r3, [r7, #10]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fba5 	bl	8000c94 <__aeabi_ui2f>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff6b 	bl	8000428 <__aeabi_f2d>
 8001552:	4604      	mov	r4, r0
 8001554:	460d      	mov	r5, r1
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f7fe ff66 	bl	8000428 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001564:	e9cd 4500 	strd	r4, r5, [sp]
 8001568:	4642      	mov	r2, r8
 800156a:	464b      	mov	r3, r9
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <main+0x1a4>)
 800156e:	f003 f97d 	bl	800486c <iprintf>

		  previousMillis = nowMillis;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <main+0x194>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <main+0x198>)
 8001578:	6013      	str	r3, [r2, #0]
	  nowMillis = HAL_GetTick();
 800157a:	e79b      	b.n	80014b4 <main+0x9c>
 800157c:	20000298 	.word	0x20000298
 8001580:	20000250 	.word	0x20000250
 8001584:	20000234 	.word	0x20000234
 8001588:	3ca3d70a 	.word	0x3ca3d70a
 800158c:	200001fc 	.word	0x200001fc
 8001590:	42c80000 	.word	0x42c80000
 8001594:	3e4ccccd 	.word	0x3e4ccccd
 8001598:	40200000 	.word	0x40200000
 800159c:	40a00000 	.word	0x40a00000
 80015a0:	437f0000 	.word	0x437f0000
 80015a4:	2000020c 	.word	0x2000020c
 80015a8:	40011000 	.word	0x40011000
 80015ac:	200001f4 	.word	0x200001f4
 80015b0:	200001f0 	.word	0x200001f0
 80015b4:	200001f8 	.word	0x200001f8
 80015b8:	43fa0000 	.word	0x43fa0000
 80015bc:	080067b8 	.word	0x080067b8

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b090      	sub	sp, #64	; 0x40
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0318 	add.w	r3, r7, #24
 80015ca:	2228      	movs	r2, #40	; 0x28
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f9a1 	bl	8004916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f4:	2302      	movs	r3, #2
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fea3 	bl	8002354 <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001614:	f000 f819 	bl	800164a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	230f      	movs	r3, #15
 800161a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2302      	movs	r3, #2
 800161e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2102      	movs	r1, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f910 	bl	8002858 <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800163e:	f000 f804 	bl	800164a <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3740      	adds	r7, #64	; 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164e:	b672      	cpsid	i
}
 8001650:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001652:	e7fe      	b.n	8001652 <Error_Handler+0x8>

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_MspInit+0x5c>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <HAL_MspInit+0x5c>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_MspInit+0x5c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_MspInit+0x5c>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_MspInit+0x5c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_MspInit+0x5c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_MspInit+0x60>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_MspInit+0x60>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 fb8d 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}

08001706 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <_kill>:

int _kill(int pid, int sig)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800171e:	f003 f94d 	bl	80049bc <__errno>
 8001722:	4603      	mov	r3, r0
 8001724:	2216      	movs	r2, #22
 8001726:	601a      	str	r2, [r3, #0]
  return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_exit>:

void _exit (int status)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffe7 	bl	8001714 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001746:	e7fe      	b.n	8001746 <_exit+0x12>

08001748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175a:	f3af 8000 	nop.w
 800175e:	4601      	mov	r1, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <_read+0x12>
  }

  return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e009      	b.n	80017a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fd2f 	bl	8001200 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf1      	blt.n	8001794 <_write+0x12>
  }
  return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_close>:

int _close(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e0:	605a      	str	r2, [r3, #4]
  return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <_isatty>:

int _isatty(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f003 f8b6 	bl	80049bc <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20005000 	.word	0x20005000
 800187c:	00000400 	.word	0x00000400
 8001880:	2000024c 	.word	0x2000024c
 8001884:	200004c0 	.word	0x200004c0

08001888 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 f837 	bl	8004916 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_TIM1_Init+0xa8>)
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <MX_TIM1_Init+0xac>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_TIM1_Init+0xa8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_TIM1_Init+0xa8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_TIM1_Init+0xa8>)
 80018c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_TIM1_Init+0xa8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_TIM1_Init+0xa8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_TIM1_Init+0xa8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018dc:	2301      	movs	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e4:	2301      	movs	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018ec:	230a      	movs	r3, #10
 80018ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f4:	2301      	movs	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM1_Init+0xa8>)
 8001908:	f001 fa7e 	bl	8002e08 <HAL_TIM_Encoder_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001912:	f7ff fe9a 	bl	800164a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_TIM1_Init+0xa8>)
 8001924:	f002 f866 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800192e:	f7ff fe8c 	bl	800164a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3730      	adds	r7, #48	; 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000250 	.word	0x20000250
 8001940:	40012c00 	.word	0x40012c00

08001944 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001974:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <MX_TIM2_Init+0xfc>)
 8001976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <MX_TIM2_Init+0xfc>)
 800197e:	2247      	movs	r2, #71	; 0x47
 8001980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <MX_TIM2_Init+0xfc>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <MX_TIM2_Init+0xfc>)
 800198a:	2263      	movs	r2, #99	; 0x63
 800198c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <MX_TIM2_Init+0xfc>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <MX_TIM2_Init+0xfc>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199a:	4829      	ldr	r0, [pc, #164]	; (8001a40 <MX_TIM2_Init+0xfc>)
 800199c:	f001 f8ea 	bl	8002b74 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80019a6:	f7ff fe50 	bl	800164a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b4:	4619      	mov	r1, r3
 80019b6:	4822      	ldr	r0, [pc, #136]	; (8001a40 <MX_TIM2_Init+0xfc>)
 80019b8:	f001 fcb0 	bl	800331c <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80019c2:	f7ff fe42 	bl	800164a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019c6:	481e      	ldr	r0, [pc, #120]	; (8001a40 <MX_TIM2_Init+0xfc>)
 80019c8:	f001 f923 	bl	8002c12 <HAL_TIM_PWM_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80019d2:	f7ff fe3a 	bl	800164a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	4816      	ldr	r0, [pc, #88]	; (8001a40 <MX_TIM2_Init+0xfc>)
 80019e6:	f002 f805 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80019f0:	f7ff fe2b 	bl	800164a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f4:	2360      	movs	r3, #96	; 0x60
 80019f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM2_Init+0xfc>)
 8001a0c:	f001 fbc4 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001a16:	f7ff fe18 	bl	800164a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM2_Init+0xfc>)
 8001a22:	f001 fbb9 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001a2c:	f7ff fe0d 	bl	800164a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM2_Init+0xfc>)
 8001a32:	f000 f8e3 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 8001a36:	bf00      	nop
 8001a38:	3738      	adds	r7, #56	; 0x38
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000298 	.word	0x20000298

08001a44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2224      	movs	r2, #36	; 0x24
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 ff5f 	bl	8004916 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <MX_TIM3_Init+0xa4>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001ab2:	f001 f9a9 	bl	8002e08 <HAL_TIM_Encoder_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001abc:	f7ff fdc5 	bl	800164a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001ace:	f001 ff91 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ad8:	f7ff fdb7 	bl	800164a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200002e0 	.word	0x200002e0
 8001ae8:	40000400 	.word	0x40000400

08001aec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2b      	ldr	r2, [pc, #172]	; (8001bb4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d125      	bne.n	8001b58 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	481a      	ldr	r0, [pc, #104]	; (8001bbc <HAL_TIM_Encoder_MspInit+0xd0>)
 8001b52:	f000 fa63 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b56:	e028      	b.n	8001baa <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d123      	bne.n	8001baa <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0318 	add.w	r3, r7, #24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_TIM_Encoder_MspInit+0xd0>)
 8001ba6:	f000 fa39 	bl	800201c <HAL_GPIO_Init>
}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40000400 	.word	0x40000400

08001bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d10b      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_TIM_Base_MspInit+0x34>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_TIM_Base_MspInit+0x34>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_TIM_Base_MspInit+0x34>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1a:	d117      	bne.n	8001c4c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_TIM_MspPostInit+0x58>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <HAL_TIM_MspPostInit+0x58>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_TIM_MspPostInit+0x58>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c34:	2303      	movs	r3, #3
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4804      	ldr	r0, [pc, #16]	; (8001c58 <HAL_TIM_MspPostInit+0x5c>)
 8001c48:	f000 f9e8 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010800 	.word	0x40010800

08001c5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <MX_USART2_UART_Init+0x50>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c94:	f001 ff0c 	bl	8003ab0 <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c9e:	f7ff fcd4 	bl	800164a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000328 	.word	0x20000328
 8001cac:	40004400 	.word	0x40004400

08001cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_UART_MspInit+0x88>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d12f      	bne.n	8001d30 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_UART_MspInit+0x8c>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_UART_MspInit+0x8c>)
 8001cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cda:	61d3      	str	r3, [r2, #28]
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_UART_MspInit+0x8c>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_UART_MspInit+0x8c>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <HAL_UART_MspInit+0x8c>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_UART_MspInit+0x8c>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d00:	2304      	movs	r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <HAL_UART_MspInit+0x90>)
 8001d14:	f000 f982 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_UART_MspInit+0x90>)
 8001d2c:	f000 f976 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40004400 	.word	0x40004400
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010800 	.word	0x40010800

08001d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d44:	f7ff fda0 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d4a:	490c      	ldr	r1, [pc, #48]	; (8001d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d60:	4c09      	ldr	r4, [pc, #36]	; (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f002 fe2b 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d72:	f7ff fb51 	bl	8001418 <main>
  bx lr
 8001d76:	4770      	bx	lr
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d80:	08006b74 	.word	0x08006b74
  ldr r2, =_sbss
 8001d84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d88:	200004c0 	.word	0x200004c0

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f907 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff fc52 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f911 	bl	8002002 <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 f8e7 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000370 	.word	0x20000370

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000370 	.word	0x20000370

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff90 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff49 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff5e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff90 	bl	8001f0c <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5f 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffb0 	bl	8001f70 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	; 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e169      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8158 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a9a      	ldr	r2, [pc, #616]	; (80022bc <HAL_GPIO_Init+0x2a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002058:	4a98      	ldr	r2, [pc, #608]	; (80022bc <HAL_GPIO_Init+0x2a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d875      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800205e:	4a98      	ldr	r2, [pc, #608]	; (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d058      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002064:	4a96      	ldr	r2, [pc, #600]	; (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d86f      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800206a:	4a96      	ldr	r2, [pc, #600]	; (80022c4 <HAL_GPIO_Init+0x2a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d052      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002070:	4a94      	ldr	r2, [pc, #592]	; (80022c4 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d869      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002076:	4a94      	ldr	r2, [pc, #592]	; (80022c8 <HAL_GPIO_Init+0x2ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04c      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 800207c:	4a92      	ldr	r2, [pc, #584]	; (80022c8 <HAL_GPIO_Init+0x2ac>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d863      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002082:	4a92      	ldr	r2, [pc, #584]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d046      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002088:	4a90      	ldr	r2, [pc, #576]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d85d      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d82a      	bhi.n	80020e8 <HAL_GPIO_Init+0xcc>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d859      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002096:	a201      	add	r2, pc, #4	; (adr r2, 800209c <HAL_GPIO_Init+0x80>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	08002117 	.word	0x08002117
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	08002103 	.word	0x08002103
 80020a8:	08002145 	.word	0x08002145
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	0800214b 	.word	0x0800214b
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	0800214b 	.word	0x0800214b
 80020bc:	0800214b 	.word	0x0800214b
 80020c0:	0800214b 	.word	0x0800214b
 80020c4:	0800214b 	.word	0x0800214b
 80020c8:	0800214b 	.word	0x0800214b
 80020cc:	0800214b 	.word	0x0800214b
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	0800214b 	.word	0x0800214b
 80020d8:	0800214b 	.word	0x0800214b
 80020dc:	0800214b 	.word	0x0800214b
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	0800210d 	.word	0x0800210d
 80020e8:	4a79      	ldr	r2, [pc, #484]	; (80022d0 <HAL_GPIO_Init+0x2b4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ee:	e02c      	b.n	800214a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e029      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e024      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	3308      	adds	r3, #8
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e01f      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	330c      	adds	r3, #12
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e01a      	b.n	800214c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211e:	2304      	movs	r3, #4
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e013      	b.n	800214c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	611a      	str	r2, [r3, #16]
          break;
 8002136:	e009      	b.n	800214c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002138:	2308      	movs	r3, #8
 800213a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	615a      	str	r2, [r3, #20]
          break;
 8002142:	e003      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x130>
          break;
 800214a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d801      	bhi.n	8002156 <HAL_GPIO_Init+0x13a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e001      	b.n	800215a <HAL_GPIO_Init+0x13e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d802      	bhi.n	8002168 <HAL_GPIO_Init+0x14c>
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x152>
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	3b08      	subs	r3, #8
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	210f      	movs	r1, #15
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80b1 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800219c:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b4:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_GPIO_Init+0x2c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <HAL_GPIO_Init+0x2cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1e0>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002208:	2300      	movs	r3, #0
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221a:	492f      	ldr	r1, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x2bc>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	492c      	ldr	r1, [pc, #176]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4928      	ldr	r1, [pc, #160]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800225c:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	491e      	ldr	r1, [pc, #120]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4918      	ldr	r1, [pc, #96]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4914      	ldr	r1, [pc, #80]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d021      	beq.n	80022f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e021      	b.n	80022fe <HAL_GPIO_Init+0x2e2>
 80022ba:	bf00      	nop
 80022bc:	10320000 	.word	0x10320000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10220000 	.word	0x10220000
 80022c8:	10210000 	.word	0x10210000
 80022cc:	10120000 	.word	0x10120000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_GPIO_Init+0x304>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4909      	ldr	r1, [pc, #36]	; (8002320 <HAL_GPIO_Init+0x304>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f ae8e 	bne.w	8002030 <HAL_GPIO_Init+0x14>
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	372c      	adds	r7, #44	; 0x2c
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e272      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002374:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b04      	cmp	r3, #4
 800237e:	d00c      	beq.n	800239a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002380:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d112      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
 800238c:	4b8c      	ldr	r3, [pc, #560]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b89      	ldr	r3, [pc, #548]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06c      	beq.n	8002480 <HAL_RCC_OscConfig+0x12c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d168      	bne.n	8002480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e24c      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x76>
 80023bc:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7f      	ldr	r2, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e02e      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7a      	ldr	r2, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a77      	ldr	r2, [pc, #476]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0xbc>
 80023f6:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a71      	ldr	r2, [pc, #452]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 8002410:	4b6b      	ldr	r3, [pc, #428]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6a      	ldr	r2, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a67      	ldr	r2, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fd06 	bl	8001e40 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fd02 	bl	8001e40 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e200      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5d      	ldr	r3, [pc, #372]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xe4>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fcf2 	bl	8001e40 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff fcee 	bl	8001e40 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1ec      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x10c>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248e:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
 80024a6:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c0      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4939      	ldr	r1, [pc, #228]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fca7 	bl	8001e40 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7ff fca3 	bl	8001e40 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4927      	ldr	r1, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fc86 	bl	8001e40 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7ff fc82 	bl	8001e40 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e180      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03a      	beq.n	80025d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d019      	beq.n	800259e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7ff fc66 	bl	8001e40 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7ff fc62 	bl	8001e40 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e160      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f000 face 	bl	8002b38 <RCC_Delay>
 800259c:	e01c      	b.n	80025d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a4:	f7ff fc4c 	bl	8001e40 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ac:	f7ff fc48 	bl	8001e40 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d908      	bls.n	80025cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e146      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	42420000 	.word	0x42420000
 80025c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b92      	ldr	r3, [pc, #584]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e9      	bne.n	80025ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a6 	beq.w	8002732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b8b      	ldr	r3, [pc, #556]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b88      	ldr	r3, [pc, #544]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a87      	ldr	r2, [pc, #540]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b85      	ldr	r3, [pc, #532]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7ff fc09 	bl	8001e40 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7ff fc05 	bl	8001e40 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e103      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b75      	ldr	r3, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x312>
 8002658:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e02d      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x334>
 800266e:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a69      	ldr	r2, [pc, #420]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	e01c      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x356>
 8002690:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a5a      	ldr	r2, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fbb9 	bl	8001e40 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff fbb5 	bl	8001e40 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0b1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <HAL_RCC_OscConfig+0x37e>
 80026f4:	e014      	b.n	8002720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7ff fba3 	bl	8001e40 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7ff fb9f 	bl	8001e40 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e09b      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ee      	bne.n	80026fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a3b      	ldr	r2, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8087 	beq.w	800284a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d061      	beq.n	800280c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d146      	bne.n	80027de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7ff fb73 	bl	8001e40 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7ff fb6f 	bl	8001e40 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e06d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4921      	ldr	r1, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a19      	ldr	r1, [r3, #32]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	430b      	orrs	r3, r1
 80027aa:	491b      	ldr	r1, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7ff fb43 	bl	8001e40 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7ff fb3f 	bl	8001e40 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e03d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x46a>
 80027dc:	e035      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fb2c 	bl	8001e40 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7ff fb28 	bl	8001e40 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e026      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x498>
 800280a:	e01e      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e019      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
 8002820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x500>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0d0      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d910      	bls.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4965      	ldr	r1, [pc, #404]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a58      	ldr	r2, [pc, #352]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d040      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d115      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e073      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4936      	ldr	r1, [pc, #216]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7ff fa7a 	bl	8001e40 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7ff fa76 	bl	8001e40 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e053      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d210      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4922      	ldr	r1, [pc, #136]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f821 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	490a      	ldr	r1, [pc, #40]	; (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1cc>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1d0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f9d8 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	080067d4 	.word	0x080067d4
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x30>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x36>
 8002a5a:	e027      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5e:	613b      	str	r3, [r7, #16]
      break;
 8002a60:	e027      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0c9b      	lsrs	r3, r3, #18
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0c5b      	lsrs	r3, r3, #17
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	4a11      	ldr	r2, [pc, #68]	; (8002acc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8e:	fb03 f202 	mul.w	r2, r3, r2
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e004      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	613b      	str	r3, [r7, #16]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aae:	613b      	str	r3, [r7, #16]
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	693b      	ldr	r3, [r7, #16]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	080067ec 	.word	0x080067ec
 8002acc:	080067fc 	.word	0x080067fc
 8002ad0:	003d0900 	.word	0x003d0900

08002ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	20000000 	.word	0x20000000

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff2 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	080067e4 	.word	0x080067e4

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffde 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	0adb      	lsrs	r3, r3, #11
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	080067e4 	.word	0x080067e4

08002b38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <RCC_Delay+0x34>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <RCC_Delay+0x38>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b54:	bf00      	nop
  }
  while (Delay --);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	60fa      	str	r2, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <RCC_Delay+0x1c>
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e041      	b.n	8002c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff f812 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 fc7a 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e041      	b.n	8002ca8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f839 	bl	8002cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f000 fc2b 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_TIM_PWM_Start+0x24>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e022      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d109      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x3e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e015      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d109      	bne.n	8002d1c <HAL_TIM_PWM_Start+0x58>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e008      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e05e      	b.n	8002df4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x82>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d44:	e013      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x92>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_PWM_Start+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d64:	e003      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fe18 	bl	80039ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_TIM_PWM_Start+0x138>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_TIM_PWM_Start+0x138>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xfa>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d009      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xfa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_TIM_PWM_Start+0x13c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xfa>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <HAL_TIM_PWM_Start+0x140>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d111      	bne.n	8002de2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d010      	beq.n	8002df2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de0:	e007      	b.n	8002df2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800

08002e08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e093      	b.n	8002f44 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fe fe5b 	bl	8001aec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e4c:	f023 0307 	bic.w	r3, r3, #7
 8002e50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 fb25 	bl	80034ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ea8:	f023 030c 	bic.w	r3, r3, #12
 8002eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	011a      	lsls	r2, r3, #4
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	031b      	lsls	r3, r3, #12
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d110      	bne.n	8002f9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f82:	7b7b      	ldrb	r3, [r7, #13]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e069      	b.n	8003060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	e031      	b.n	8003002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d110      	bne.n	8002fc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002faa:	7b3b      	ldrb	r3, [r7, #12]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e055      	b.n	8003060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc4:	e01d      	b.n	8003002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fd2:	7b7b      	ldrb	r3, [r7, #13]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fd8:	7b3b      	ldrb	r3, [r7, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d001      	beq.n	8002fe2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e03e      	b.n	8003060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_TIM_Encoder_Start+0xc4>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d008      	beq.n	8003020 <HAL_TIM_Encoder_Start+0xd4>
 800300e:	e00f      	b.n	8003030 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fcc7 	bl	80039ac <TIM_CCxChannelCmd>
      break;
 800301e:	e016      	b.n	800304e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	2104      	movs	r1, #4
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fcbf 	bl	80039ac <TIM_CCxChannelCmd>
      break;
 800302e:	e00e      	b.n	800304e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fcb7 	bl	80039ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	2104      	movs	r1, #4
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fcb0 	bl	80039ac <TIM_CCxChannelCmd>
      break;
 800304c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_TIM_Encoder_Stop+0x18>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d008      	beq.n	8003090 <HAL_TIM_Encoder_Stop+0x28>
 800307e:	e00f      	b.n	80030a0 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fc8f 	bl	80039ac <TIM_CCxChannelCmd>
      break;
 800308e:	e016      	b.n	80030be <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2200      	movs	r2, #0
 8003096:	2104      	movs	r1, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fc87 	bl	80039ac <TIM_CCxChannelCmd>
      break;
 800309e:	e00e      	b.n	80030be <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fc7f 	bl	80039ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	2104      	movs	r1, #4
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fc78 	bl	80039ac <TIM_CCxChannelCmd>
      break;
 80030bc:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_TIM_Encoder_Stop+0x86>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a1a      	ldr	r2, [r3, #32]
 80030d4:	f240 4344 	movw	r3, #1092	; 0x444
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d107      	bne.n	80030ee <HAL_TIM_Encoder_Stop+0x86>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_TIM_Encoder_Stop+0x92>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d138      	bne.n	800316c <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <HAL_TIM_Encoder_Stop+0xa2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003108:	e013      	b.n	8003132 <HAL_TIM_Encoder_Stop+0xca>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d104      	bne.n	800311a <HAL_TIM_Encoder_Stop+0xb2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003118:	e00b      	b.n	8003132 <HAL_TIM_Encoder_Stop+0xca>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d104      	bne.n	800312a <HAL_TIM_Encoder_Stop+0xc2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003128:	e003      	b.n	8003132 <HAL_TIM_Encoder_Stop+0xca>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <HAL_TIM_Encoder_Stop+0xda>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003140:	e024      	b.n	800318c <HAL_TIM_Encoder_Stop+0x124>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d104      	bne.n	8003152 <HAL_TIM_Encoder_Stop+0xea>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003150:	e01c      	b.n	800318c <HAL_TIM_Encoder_Stop+0x124>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d104      	bne.n	8003162 <HAL_TIM_Encoder_Stop+0xfa>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003160:	e014      	b.n	800318c <HAL_TIM_Encoder_Stop+0x124>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800316a:	e00f      	b.n	800318c <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ae      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f200 809f 	bhi.w	8003304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003305 	.word	0x08003305
 80031d4:	08003305 	.word	0x08003305
 80031d8:	08003305 	.word	0x08003305
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003305 	.word	0x08003305
 80031e4:	08003305 	.word	0x08003305
 80031e8:	08003305 	.word	0x08003305
 80031ec:	08003283 	.word	0x08003283
 80031f0:	08003305 	.word	0x08003305
 80031f4:	08003305 	.word	0x08003305
 80031f8:	08003305 	.word	0x08003305
 80031fc:	080032c3 	.word	0x080032c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f9b2 	bl	8003570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6999      	ldr	r1, [r3, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	619a      	str	r2, [r3, #24]
      break;
 800323e:	e064      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f9f8 	bl	800363c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	619a      	str	r2, [r3, #24]
      break;
 8003280:	e043      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fa41 	bl	8003710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0208 	orr.w	r2, r2, #8
 800329c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0204 	bic.w	r2, r2, #4
 80032ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
      break;
 80032c0:	e023      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa8b 	bl	80037e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]
      break;
 8003302:	e002      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
      break;
 8003308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIM_ConfigClockSource+0x1c>
 8003334:	2302      	movs	r3, #2
 8003336:	e0b4      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x186>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800335e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003370:	d03e      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003376:	f200 8087 	bhi.w	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	f000 8086 	beq.w	800348e <HAL_TIM_ConfigClockSource+0x172>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003386:	d87f      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b70      	cmp	r3, #112	; 0x70
 800338a:	d01a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0xa6>
 800338c:	2b70      	cmp	r3, #112	; 0x70
 800338e:	d87b      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b60      	cmp	r3, #96	; 0x60
 8003392:	d050      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x11a>
 8003394:	2b60      	cmp	r3, #96	; 0x60
 8003396:	d877      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b50      	cmp	r3, #80	; 0x50
 800339a:	d03c      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0xfa>
 800339c:	2b50      	cmp	r3, #80	; 0x50
 800339e:	d873      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d058      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x13a>
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	d86f      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b30      	cmp	r3, #48	; 0x30
 80033aa:	d064      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033ac:	2b30      	cmp	r3, #48	; 0x30
 80033ae:	d86b      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d060      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d867      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d05c      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d05a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033c0:	e062      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	f000 facc 	bl	800396e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	609a      	str	r2, [r3, #8]
      break;
 80033ee:	e04f      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	f000 fab5 	bl	800396e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003412:	609a      	str	r2, [r3, #8]
      break;
 8003414:	e03c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	461a      	mov	r2, r3
 8003424:	f000 fa2c 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2150      	movs	r1, #80	; 0x50
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa83 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003434:	e02c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003442:	461a      	mov	r2, r3
 8003444:	f000 fa4a 	bl	80038dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2160      	movs	r1, #96	; 0x60
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa73 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003454:	e01c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	461a      	mov	r2, r3
 8003464:	f000 fa0c 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa63 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003474:	e00c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f000 fa5a 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003486:	e003      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      break;
 800348c:	e000      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800348e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <TIM_Base_SetConfig+0xb8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a26      	ldr	r2, [pc, #152]	; (8003568 <TIM_Base_SetConfig+0xbc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a25      	ldr	r2, [pc, #148]	; (800356c <TIM_Base_SetConfig+0xc0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <TIM_Base_SetConfig+0xb8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a19      	ldr	r2, [pc, #100]	; (8003568 <TIM_Base_SetConfig+0xbc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <TIM_Base_SetConfig+0xc0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a07      	ldr	r2, [pc, #28]	; (8003564 <TIM_Base_SetConfig+0xb8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800

08003570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f023 0201 	bic.w	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 0302 	bic.w	r3, r3, #2
 80035b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <TIM_OC1_SetConfig+0xc8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10c      	bne.n	80035e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0308 	bic.w	r3, r3, #8
 80035d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <TIM_OC1_SetConfig+0xc8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	621a      	str	r2, [r3, #32]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40012c00 	.word	0x40012c00

0800363c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 0210 	bic.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0320 	bic.w	r3, r3, #32
 8003686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a1d      	ldr	r2, [pc, #116]	; (800370c <TIM_OC2_SetConfig+0xd0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10d      	bne.n	80036b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a14      	ldr	r2, [pc, #80]	; (800370c <TIM_OC2_SetConfig+0xd0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d113      	bne.n	80036e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00

08003710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <TIM_OC3_SetConfig+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10d      	bne.n	800378a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC3_SetConfig+0xd0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d113      	bne.n	80037ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40012c00 	.word	0x40012c00

080037e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800382e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a0f      	ldr	r2, [pc, #60]	; (800387c <TIM_OC4_SetConfig+0x98>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d109      	bne.n	8003858 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00

08003880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 030a 	bic.w	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0210 	bic.w	r2, r3, #16
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	031b      	lsls	r3, r3, #12
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	f043 0307 	orr.w	r3, r3, #7
 800395c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003988:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	021a      	lsls	r2, r3, #8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	431a      	orrs	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	609a      	str	r2, [r3, #8]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	2201      	movs	r2, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	401a      	ands	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e046      	b.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d009      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a10      	ldr	r2, [pc, #64]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800

08003ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e042      	b.n	8003b48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe f8ea 	bl	8001cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f91d 	bl	8003d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d16d      	bne.n	8003c4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_UART_Transmit+0x2c>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e066      	b.n	8003c4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2221      	movs	r2, #33	; 0x21
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8e:	f7fe f957 	bl	8001e40 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba8:	d108      	bne.n	8003bbc <HAL_UART_Transmit+0x6c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	e003      	b.n	8003bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bc4:	e02a      	b.n	8003c1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f840 	bl	8003c56 <UART_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e036      	b.n	8003c4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e007      	b.n	8003c0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	781a      	ldrb	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1cf      	bne.n	8003bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2140      	movs	r1, #64	; 0x40
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f810 	bl	8003c56 <UART_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e006      	b.n	8003c4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b090      	sub	sp, #64	; 0x40
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c66:	e050      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d04c      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c76:	f7fe f8e3 	bl	8001e40 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d241      	bcs.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3314      	adds	r3, #20
 8003cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cda:	623a      	str	r2, [r7, #32]
 8003cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	69f9      	ldr	r1, [r7, #28]
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e5      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e00f      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d09f      	beq.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3740      	adds	r7, #64	; 0x40
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d6e:	f023 030c 	bic.w	r3, r3, #12
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <UART_SetConfig+0x114>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d103      	bne.n	8003da4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe feb8 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	e002      	b.n	8003daa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe fea0 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8003da8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009a      	lsls	r2, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <UART_SetConfig+0x118>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	0119      	lsls	r1, r3, #4
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de0:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <UART_SetConfig+0x118>)
 8003de2:	fba3 0302 	umull	r0, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2064      	movs	r0, #100	; 0x64
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <UART_SetConfig+0x118>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e00:	4419      	add	r1, r3
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009a      	lsls	r2, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <UART_SetConfig+0x118>)
 8003e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2064      	movs	r0, #100	; 0x64
 8003e22:	fb00 f303 	mul.w	r3, r0, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	3332      	adds	r3, #50	; 0x32
 8003e2c:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <UART_SetConfig+0x118>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	f003 020f 	and.w	r2, r3, #15
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	51eb851f 	.word	0x51eb851f

08003e50 <__cvt>:
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e56:	461f      	mov	r7, r3
 8003e58:	bfbb      	ittet	lt
 8003e5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e5e:	461f      	movlt	r7, r3
 8003e60:	2300      	movge	r3, #0
 8003e62:	232d      	movlt	r3, #45	; 0x2d
 8003e64:	b088      	sub	sp, #32
 8003e66:	4614      	mov	r4, r2
 8003e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e6c:	7013      	strb	r3, [r2, #0]
 8003e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003e74:	f023 0820 	bic.w	r8, r3, #32
 8003e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e7c:	d005      	beq.n	8003e8a <__cvt+0x3a>
 8003e7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e82:	d100      	bne.n	8003e86 <__cvt+0x36>
 8003e84:	3501      	adds	r5, #1
 8003e86:	2302      	movs	r3, #2
 8003e88:	e000      	b.n	8003e8c <__cvt+0x3c>
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	aa07      	add	r2, sp, #28
 8003e8e:	9204      	str	r2, [sp, #16]
 8003e90:	aa06      	add	r2, sp, #24
 8003e92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e96:	e9cd 3500 	strd	r3, r5, [sp]
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	f000 fe53 	bl	8004b48 <_dtoa_r>
 8003ea2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	d102      	bne.n	8003eb0 <__cvt+0x60>
 8003eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003eac:	07db      	lsls	r3, r3, #31
 8003eae:	d522      	bpl.n	8003ef6 <__cvt+0xa6>
 8003eb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003eb4:	eb06 0905 	add.w	r9, r6, r5
 8003eb8:	d110      	bne.n	8003edc <__cvt+0x8c>
 8003eba:	7833      	ldrb	r3, [r6, #0]
 8003ebc:	2b30      	cmp	r3, #48	; 0x30
 8003ebe:	d10a      	bne.n	8003ed6 <__cvt+0x86>
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	f7fc fd6e 	bl	80009a8 <__aeabi_dcmpeq>
 8003ecc:	b918      	cbnz	r0, 8003ed6 <__cvt+0x86>
 8003ece:	f1c5 0501 	rsb	r5, r5, #1
 8003ed2:	f8ca 5000 	str.w	r5, [sl]
 8003ed6:	f8da 3000 	ldr.w	r3, [sl]
 8003eda:	4499      	add	r9, r3
 8003edc:	2200      	movs	r2, #0
 8003ede:	2300      	movs	r3, #0
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	4639      	mov	r1, r7
 8003ee4:	f7fc fd60 	bl	80009a8 <__aeabi_dcmpeq>
 8003ee8:	b108      	cbz	r0, 8003eee <__cvt+0x9e>
 8003eea:	f8cd 901c 	str.w	r9, [sp, #28]
 8003eee:	2230      	movs	r2, #48	; 0x30
 8003ef0:	9b07      	ldr	r3, [sp, #28]
 8003ef2:	454b      	cmp	r3, r9
 8003ef4:	d307      	bcc.n	8003f06 <__cvt+0xb6>
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	9b07      	ldr	r3, [sp, #28]
 8003efa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003efc:	1b9b      	subs	r3, r3, r6
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	b008      	add	sp, #32
 8003f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f06:	1c59      	adds	r1, r3, #1
 8003f08:	9107      	str	r1, [sp, #28]
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e7f0      	b.n	8003ef0 <__cvt+0xa0>

08003f0e <__exponent>:
 8003f0e:	4603      	mov	r3, r0
 8003f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f12:	2900      	cmp	r1, #0
 8003f14:	f803 2b02 	strb.w	r2, [r3], #2
 8003f18:	bfb6      	itet	lt
 8003f1a:	222d      	movlt	r2, #45	; 0x2d
 8003f1c:	222b      	movge	r2, #43	; 0x2b
 8003f1e:	4249      	neglt	r1, r1
 8003f20:	2909      	cmp	r1, #9
 8003f22:	7042      	strb	r2, [r0, #1]
 8003f24:	dd2a      	ble.n	8003f7c <__exponent+0x6e>
 8003f26:	f10d 0207 	add.w	r2, sp, #7
 8003f2a:	4617      	mov	r7, r2
 8003f2c:	260a      	movs	r6, #10
 8003f2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f32:	4694      	mov	ip, r2
 8003f34:	fb06 1415 	mls	r4, r6, r5, r1
 8003f38:	3430      	adds	r4, #48	; 0x30
 8003f3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003f3e:	460c      	mov	r4, r1
 8003f40:	2c63      	cmp	r4, #99	; 0x63
 8003f42:	4629      	mov	r1, r5
 8003f44:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f48:	dcf1      	bgt.n	8003f2e <__exponent+0x20>
 8003f4a:	3130      	adds	r1, #48	; 0x30
 8003f4c:	f1ac 0402 	sub.w	r4, ip, #2
 8003f50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f54:	4622      	mov	r2, r4
 8003f56:	1c41      	adds	r1, r0, #1
 8003f58:	42ba      	cmp	r2, r7
 8003f5a:	d30a      	bcc.n	8003f72 <__exponent+0x64>
 8003f5c:	f10d 0209 	add.w	r2, sp, #9
 8003f60:	eba2 020c 	sub.w	r2, r2, ip
 8003f64:	42bc      	cmp	r4, r7
 8003f66:	bf88      	it	hi
 8003f68:	2200      	movhi	r2, #0
 8003f6a:	4413      	add	r3, r2
 8003f6c:	1a18      	subs	r0, r3, r0
 8003f6e:	b003      	add	sp, #12
 8003f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003f76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003f7a:	e7ed      	b.n	8003f58 <__exponent+0x4a>
 8003f7c:	2330      	movs	r3, #48	; 0x30
 8003f7e:	3130      	adds	r1, #48	; 0x30
 8003f80:	7083      	strb	r3, [r0, #2]
 8003f82:	70c1      	strb	r1, [r0, #3]
 8003f84:	1d03      	adds	r3, r0, #4
 8003f86:	e7f1      	b.n	8003f6c <__exponent+0x5e>

08003f88 <_printf_float>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	b091      	sub	sp, #68	; 0x44
 8003f8e:	460c      	mov	r4, r1
 8003f90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f94:	4616      	mov	r6, r2
 8003f96:	461f      	mov	r7, r3
 8003f98:	4605      	mov	r5, r0
 8003f9a:	f000 fcc5 	bl	8004928 <_localeconv_r>
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa4:	f7fc f8d4 	bl	8000150 <strlen>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	930e      	str	r3, [sp, #56]	; 0x38
 8003fac:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb0:	900a      	str	r0, [sp, #40]	; 0x28
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	f103 0208 	add.w	r2, r3, #8
 8003fbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003fc0:	f8d4 b000 	ldr.w	fp, [r4]
 8003fc4:	f8c8 2000 	str.w	r2, [r8]
 8003fc8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003fcc:	4652      	mov	r2, sl
 8003fce:	4643      	mov	r3, r8
 8003fd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fd4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295
 8003fde:	4650      	mov	r0, sl
 8003fe0:	4b9c      	ldr	r3, [pc, #624]	; (8004254 <_printf_float+0x2cc>)
 8003fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fe4:	f7fc fd12 	bl	8000a0c <__aeabi_dcmpun>
 8003fe8:	bb70      	cbnz	r0, 8004048 <_printf_float+0xc0>
 8003fea:	f04f 32ff 	mov.w	r2, #4294967295
 8003fee:	4650      	mov	r0, sl
 8003ff0:	4b98      	ldr	r3, [pc, #608]	; (8004254 <_printf_float+0x2cc>)
 8003ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ff4:	f7fc fcec 	bl	80009d0 <__aeabi_dcmple>
 8003ff8:	bb30      	cbnz	r0, 8004048 <_printf_float+0xc0>
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	4650      	mov	r0, sl
 8004000:	4641      	mov	r1, r8
 8004002:	f7fc fcdb 	bl	80009bc <__aeabi_dcmplt>
 8004006:	b110      	cbz	r0, 800400e <_printf_float+0x86>
 8004008:	232d      	movs	r3, #45	; 0x2d
 800400a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400e:	4a92      	ldr	r2, [pc, #584]	; (8004258 <_printf_float+0x2d0>)
 8004010:	4b92      	ldr	r3, [pc, #584]	; (800425c <_printf_float+0x2d4>)
 8004012:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004016:	bf94      	ite	ls
 8004018:	4690      	movls	r8, r2
 800401a:	4698      	movhi	r8, r3
 800401c:	2303      	movs	r3, #3
 800401e:	f04f 0a00 	mov.w	sl, #0
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	f02b 0304 	bic.w	r3, fp, #4
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	4633      	mov	r3, r6
 800402c:	4621      	mov	r1, r4
 800402e:	4628      	mov	r0, r5
 8004030:	9700      	str	r7, [sp, #0]
 8004032:	aa0f      	add	r2, sp, #60	; 0x3c
 8004034:	f000 f9d6 	bl	80043e4 <_printf_common>
 8004038:	3001      	adds	r0, #1
 800403a:	f040 8090 	bne.w	800415e <_printf_float+0x1d6>
 800403e:	f04f 30ff 	mov.w	r0, #4294967295
 8004042:	b011      	add	sp, #68	; 0x44
 8004044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004048:	4652      	mov	r2, sl
 800404a:	4643      	mov	r3, r8
 800404c:	4650      	mov	r0, sl
 800404e:	4641      	mov	r1, r8
 8004050:	f7fc fcdc 	bl	8000a0c <__aeabi_dcmpun>
 8004054:	b148      	cbz	r0, 800406a <_printf_float+0xe2>
 8004056:	f1b8 0f00 	cmp.w	r8, #0
 800405a:	bfb8      	it	lt
 800405c:	232d      	movlt	r3, #45	; 0x2d
 800405e:	4a80      	ldr	r2, [pc, #512]	; (8004260 <_printf_float+0x2d8>)
 8004060:	bfb8      	it	lt
 8004062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004066:	4b7f      	ldr	r3, [pc, #508]	; (8004264 <_printf_float+0x2dc>)
 8004068:	e7d3      	b.n	8004012 <_printf_float+0x8a>
 800406a:	6863      	ldr	r3, [r4, #4]
 800406c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	d142      	bne.n	80040fa <_printf_float+0x172>
 8004074:	2306      	movs	r3, #6
 8004076:	6063      	str	r3, [r4, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	9206      	str	r2, [sp, #24]
 800407c:	aa0e      	add	r2, sp, #56	; 0x38
 800407e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004082:	aa0d      	add	r2, sp, #52	; 0x34
 8004084:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004088:	9203      	str	r2, [sp, #12]
 800408a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800408e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	4652      	mov	r2, sl
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	4628      	mov	r0, r5
 800409c:	4643      	mov	r3, r8
 800409e:	910b      	str	r1, [sp, #44]	; 0x2c
 80040a0:	f7ff fed6 	bl	8003e50 <__cvt>
 80040a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040a6:	4680      	mov	r8, r0
 80040a8:	2947      	cmp	r1, #71	; 0x47
 80040aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040ac:	d108      	bne.n	80040c0 <_printf_float+0x138>
 80040ae:	1cc8      	adds	r0, r1, #3
 80040b0:	db02      	blt.n	80040b8 <_printf_float+0x130>
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	4299      	cmp	r1, r3
 80040b6:	dd40      	ble.n	800413a <_printf_float+0x1b2>
 80040b8:	f1a9 0902 	sub.w	r9, r9, #2
 80040bc:	fa5f f989 	uxtb.w	r9, r9
 80040c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040c4:	d81f      	bhi.n	8004106 <_printf_float+0x17e>
 80040c6:	464a      	mov	r2, r9
 80040c8:	3901      	subs	r1, #1
 80040ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040ce:	910d      	str	r1, [sp, #52]	; 0x34
 80040d0:	f7ff ff1d 	bl	8003f0e <__exponent>
 80040d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040d6:	4682      	mov	sl, r0
 80040d8:	1813      	adds	r3, r2, r0
 80040da:	2a01      	cmp	r2, #1
 80040dc:	6123      	str	r3, [r4, #16]
 80040de:	dc02      	bgt.n	80040e6 <_printf_float+0x15e>
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	07d2      	lsls	r2, r2, #31
 80040e4:	d501      	bpl.n	80040ea <_printf_float+0x162>
 80040e6:	3301      	adds	r3, #1
 80040e8:	6123      	str	r3, [r4, #16]
 80040ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d09b      	beq.n	800402a <_printf_float+0xa2>
 80040f2:	232d      	movs	r3, #45	; 0x2d
 80040f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f8:	e797      	b.n	800402a <_printf_float+0xa2>
 80040fa:	2947      	cmp	r1, #71	; 0x47
 80040fc:	d1bc      	bne.n	8004078 <_printf_float+0xf0>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ba      	bne.n	8004078 <_printf_float+0xf0>
 8004102:	2301      	movs	r3, #1
 8004104:	e7b7      	b.n	8004076 <_printf_float+0xee>
 8004106:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800410a:	d118      	bne.n	800413e <_printf_float+0x1b6>
 800410c:	2900      	cmp	r1, #0
 800410e:	6863      	ldr	r3, [r4, #4]
 8004110:	dd0b      	ble.n	800412a <_printf_float+0x1a2>
 8004112:	6121      	str	r1, [r4, #16]
 8004114:	b913      	cbnz	r3, 800411c <_printf_float+0x194>
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	07d0      	lsls	r0, r2, #31
 800411a:	d502      	bpl.n	8004122 <_printf_float+0x19a>
 800411c:	3301      	adds	r3, #1
 800411e:	440b      	add	r3, r1
 8004120:	6123      	str	r3, [r4, #16]
 8004122:	f04f 0a00 	mov.w	sl, #0
 8004126:	65a1      	str	r1, [r4, #88]	; 0x58
 8004128:	e7df      	b.n	80040ea <_printf_float+0x162>
 800412a:	b913      	cbnz	r3, 8004132 <_printf_float+0x1aa>
 800412c:	6822      	ldr	r2, [r4, #0]
 800412e:	07d2      	lsls	r2, r2, #31
 8004130:	d501      	bpl.n	8004136 <_printf_float+0x1ae>
 8004132:	3302      	adds	r3, #2
 8004134:	e7f4      	b.n	8004120 <_printf_float+0x198>
 8004136:	2301      	movs	r3, #1
 8004138:	e7f2      	b.n	8004120 <_printf_float+0x198>
 800413a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800413e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004140:	4299      	cmp	r1, r3
 8004142:	db05      	blt.n	8004150 <_printf_float+0x1c8>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	6121      	str	r1, [r4, #16]
 8004148:	07d8      	lsls	r0, r3, #31
 800414a:	d5ea      	bpl.n	8004122 <_printf_float+0x19a>
 800414c:	1c4b      	adds	r3, r1, #1
 800414e:	e7e7      	b.n	8004120 <_printf_float+0x198>
 8004150:	2900      	cmp	r1, #0
 8004152:	bfcc      	ite	gt
 8004154:	2201      	movgt	r2, #1
 8004156:	f1c1 0202 	rsble	r2, r1, #2
 800415a:	4413      	add	r3, r2
 800415c:	e7e0      	b.n	8004120 <_printf_float+0x198>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	055a      	lsls	r2, r3, #21
 8004162:	d407      	bmi.n	8004174 <_printf_float+0x1ec>
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	4642      	mov	r2, r8
 8004168:	4631      	mov	r1, r6
 800416a:	4628      	mov	r0, r5
 800416c:	47b8      	blx	r7
 800416e:	3001      	adds	r0, #1
 8004170:	d12b      	bne.n	80041ca <_printf_float+0x242>
 8004172:	e764      	b.n	800403e <_printf_float+0xb6>
 8004174:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004178:	f240 80dd 	bls.w	8004336 <_printf_float+0x3ae>
 800417c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004180:	2200      	movs	r2, #0
 8004182:	2300      	movs	r3, #0
 8004184:	f7fc fc10 	bl	80009a8 <__aeabi_dcmpeq>
 8004188:	2800      	cmp	r0, #0
 800418a:	d033      	beq.n	80041f4 <_printf_float+0x26c>
 800418c:	2301      	movs	r3, #1
 800418e:	4631      	mov	r1, r6
 8004190:	4628      	mov	r0, r5
 8004192:	4a35      	ldr	r2, [pc, #212]	; (8004268 <_printf_float+0x2e0>)
 8004194:	47b8      	blx	r7
 8004196:	3001      	adds	r0, #1
 8004198:	f43f af51 	beq.w	800403e <_printf_float+0xb6>
 800419c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041a0:	429a      	cmp	r2, r3
 80041a2:	db02      	blt.n	80041aa <_printf_float+0x222>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	07d8      	lsls	r0, r3, #31
 80041a8:	d50f      	bpl.n	80041ca <_printf_float+0x242>
 80041aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ae:	4631      	mov	r1, r6
 80041b0:	4628      	mov	r0, r5
 80041b2:	47b8      	blx	r7
 80041b4:	3001      	adds	r0, #1
 80041b6:	f43f af42 	beq.w	800403e <_printf_float+0xb6>
 80041ba:	f04f 0800 	mov.w	r8, #0
 80041be:	f104 091a 	add.w	r9, r4, #26
 80041c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041c4:	3b01      	subs	r3, #1
 80041c6:	4543      	cmp	r3, r8
 80041c8:	dc09      	bgt.n	80041de <_printf_float+0x256>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	079b      	lsls	r3, r3, #30
 80041ce:	f100 8104 	bmi.w	80043da <_printf_float+0x452>
 80041d2:	68e0      	ldr	r0, [r4, #12]
 80041d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041d6:	4298      	cmp	r0, r3
 80041d8:	bfb8      	it	lt
 80041da:	4618      	movlt	r0, r3
 80041dc:	e731      	b.n	8004042 <_printf_float+0xba>
 80041de:	2301      	movs	r3, #1
 80041e0:	464a      	mov	r2, r9
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	f43f af28 	beq.w	800403e <_printf_float+0xb6>
 80041ee:	f108 0801 	add.w	r8, r8, #1
 80041f2:	e7e6      	b.n	80041c2 <_printf_float+0x23a>
 80041f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	dc38      	bgt.n	800426c <_printf_float+0x2e4>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4631      	mov	r1, r6
 80041fe:	4628      	mov	r0, r5
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <_printf_float+0x2e0>)
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	f43f af1a 	beq.w	800403e <_printf_float+0xb6>
 800420a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800420e:	4313      	orrs	r3, r2
 8004210:	d102      	bne.n	8004218 <_printf_float+0x290>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	07d9      	lsls	r1, r3, #31
 8004216:	d5d8      	bpl.n	80041ca <_printf_float+0x242>
 8004218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	f43f af0b 	beq.w	800403e <_printf_float+0xb6>
 8004228:	f04f 0900 	mov.w	r9, #0
 800422c:	f104 0a1a 	add.w	sl, r4, #26
 8004230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004232:	425b      	negs	r3, r3
 8004234:	454b      	cmp	r3, r9
 8004236:	dc01      	bgt.n	800423c <_printf_float+0x2b4>
 8004238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800423a:	e794      	b.n	8004166 <_printf_float+0x1de>
 800423c:	2301      	movs	r3, #1
 800423e:	4652      	mov	r2, sl
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f43f aef9 	beq.w	800403e <_printf_float+0xb6>
 800424c:	f109 0901 	add.w	r9, r9, #1
 8004250:	e7ee      	b.n	8004230 <_printf_float+0x2a8>
 8004252:	bf00      	nop
 8004254:	7fefffff 	.word	0x7fefffff
 8004258:	080067fe 	.word	0x080067fe
 800425c:	08006802 	.word	0x08006802
 8004260:	08006806 	.word	0x08006806
 8004264:	0800680a 	.word	0x0800680a
 8004268:	0800680e 	.word	0x0800680e
 800426c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800426e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004270:	429a      	cmp	r2, r3
 8004272:	bfa8      	it	ge
 8004274:	461a      	movge	r2, r3
 8004276:	2a00      	cmp	r2, #0
 8004278:	4691      	mov	r9, r2
 800427a:	dc37      	bgt.n	80042ec <_printf_float+0x364>
 800427c:	f04f 0b00 	mov.w	fp, #0
 8004280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004284:	f104 021a 	add.w	r2, r4, #26
 8004288:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800428c:	ebaa 0309 	sub.w	r3, sl, r9
 8004290:	455b      	cmp	r3, fp
 8004292:	dc33      	bgt.n	80042fc <_printf_float+0x374>
 8004294:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004298:	429a      	cmp	r2, r3
 800429a:	db3b      	blt.n	8004314 <_printf_float+0x38c>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	07da      	lsls	r2, r3, #31
 80042a0:	d438      	bmi.n	8004314 <_printf_float+0x38c>
 80042a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80042a6:	eba2 0903 	sub.w	r9, r2, r3
 80042aa:	eba2 020a 	sub.w	r2, r2, sl
 80042ae:	4591      	cmp	r9, r2
 80042b0:	bfa8      	it	ge
 80042b2:	4691      	movge	r9, r2
 80042b4:	f1b9 0f00 	cmp.w	r9, #0
 80042b8:	dc34      	bgt.n	8004324 <_printf_float+0x39c>
 80042ba:	f04f 0800 	mov.w	r8, #0
 80042be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042c2:	f104 0a1a 	add.w	sl, r4, #26
 80042c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	eba3 0309 	sub.w	r3, r3, r9
 80042d0:	4543      	cmp	r3, r8
 80042d2:	f77f af7a 	ble.w	80041ca <_printf_float+0x242>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4652      	mov	r2, sl
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	f43f aeac 	beq.w	800403e <_printf_float+0xb6>
 80042e6:	f108 0801 	add.w	r8, r8, #1
 80042ea:	e7ec      	b.n	80042c6 <_printf_float+0x33e>
 80042ec:	4613      	mov	r3, r2
 80042ee:	4631      	mov	r1, r6
 80042f0:	4642      	mov	r2, r8
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	d1c0      	bne.n	800427c <_printf_float+0x2f4>
 80042fa:	e6a0      	b.n	800403e <_printf_float+0xb6>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4631      	mov	r1, r6
 8004300:	4628      	mov	r0, r5
 8004302:	920b      	str	r2, [sp, #44]	; 0x2c
 8004304:	47b8      	blx	r7
 8004306:	3001      	adds	r0, #1
 8004308:	f43f ae99 	beq.w	800403e <_printf_float+0xb6>
 800430c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800430e:	f10b 0b01 	add.w	fp, fp, #1
 8004312:	e7b9      	b.n	8004288 <_printf_float+0x300>
 8004314:	4631      	mov	r1, r6
 8004316:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	d1bf      	bne.n	80042a2 <_printf_float+0x31a>
 8004322:	e68c      	b.n	800403e <_printf_float+0xb6>
 8004324:	464b      	mov	r3, r9
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	eb08 020a 	add.w	r2, r8, sl
 800432e:	47b8      	blx	r7
 8004330:	3001      	adds	r0, #1
 8004332:	d1c2      	bne.n	80042ba <_printf_float+0x332>
 8004334:	e683      	b.n	800403e <_printf_float+0xb6>
 8004336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004338:	2a01      	cmp	r2, #1
 800433a:	dc01      	bgt.n	8004340 <_printf_float+0x3b8>
 800433c:	07db      	lsls	r3, r3, #31
 800433e:	d539      	bpl.n	80043b4 <_printf_float+0x42c>
 8004340:	2301      	movs	r3, #1
 8004342:	4642      	mov	r2, r8
 8004344:	4631      	mov	r1, r6
 8004346:	4628      	mov	r0, r5
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	f43f ae77 	beq.w	800403e <_printf_float+0xb6>
 8004350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004354:	4631      	mov	r1, r6
 8004356:	4628      	mov	r0, r5
 8004358:	47b8      	blx	r7
 800435a:	3001      	adds	r0, #1
 800435c:	f43f ae6f 	beq.w	800403e <_printf_float+0xb6>
 8004360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004364:	2200      	movs	r2, #0
 8004366:	2300      	movs	r3, #0
 8004368:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800436c:	f7fc fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004370:	b9d8      	cbnz	r0, 80043aa <_printf_float+0x422>
 8004372:	f109 33ff 	add.w	r3, r9, #4294967295
 8004376:	f108 0201 	add.w	r2, r8, #1
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	d10e      	bne.n	80043a2 <_printf_float+0x41a>
 8004384:	e65b      	b.n	800403e <_printf_float+0xb6>
 8004386:	2301      	movs	r3, #1
 8004388:	464a      	mov	r2, r9
 800438a:	4631      	mov	r1, r6
 800438c:	4628      	mov	r0, r5
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f ae54 	beq.w	800403e <_printf_float+0xb6>
 8004396:	f108 0801 	add.w	r8, r8, #1
 800439a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800439c:	3b01      	subs	r3, #1
 800439e:	4543      	cmp	r3, r8
 80043a0:	dcf1      	bgt.n	8004386 <_printf_float+0x3fe>
 80043a2:	4653      	mov	r3, sl
 80043a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043a8:	e6de      	b.n	8004168 <_printf_float+0x1e0>
 80043aa:	f04f 0800 	mov.w	r8, #0
 80043ae:	f104 091a 	add.w	r9, r4, #26
 80043b2:	e7f2      	b.n	800439a <_printf_float+0x412>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4642      	mov	r2, r8
 80043b8:	e7df      	b.n	800437a <_printf_float+0x3f2>
 80043ba:	2301      	movs	r3, #1
 80043bc:	464a      	mov	r2, r9
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f ae3a 	beq.w	800403e <_printf_float+0xb6>
 80043ca:	f108 0801 	add.w	r8, r8, #1
 80043ce:	68e3      	ldr	r3, [r4, #12]
 80043d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80043d2:	1a5b      	subs	r3, r3, r1
 80043d4:	4543      	cmp	r3, r8
 80043d6:	dcf0      	bgt.n	80043ba <_printf_float+0x432>
 80043d8:	e6fb      	b.n	80041d2 <_printf_float+0x24a>
 80043da:	f04f 0800 	mov.w	r8, #0
 80043de:	f104 0919 	add.w	r9, r4, #25
 80043e2:	e7f4      	b.n	80043ce <_printf_float+0x446>

080043e4 <_printf_common>:
 80043e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	4616      	mov	r6, r2
 80043ea:	4699      	mov	r9, r3
 80043ec:	688a      	ldr	r2, [r1, #8]
 80043ee:	690b      	ldr	r3, [r1, #16]
 80043f0:	4607      	mov	r7, r0
 80043f2:	4293      	cmp	r3, r2
 80043f4:	bfb8      	it	lt
 80043f6:	4613      	movlt	r3, r2
 80043f8:	6033      	str	r3, [r6, #0]
 80043fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043fe:	460c      	mov	r4, r1
 8004400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004404:	b10a      	cbz	r2, 800440a <_printf_common+0x26>
 8004406:	3301      	adds	r3, #1
 8004408:	6033      	str	r3, [r6, #0]
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	0699      	lsls	r1, r3, #26
 800440e:	bf42      	ittt	mi
 8004410:	6833      	ldrmi	r3, [r6, #0]
 8004412:	3302      	addmi	r3, #2
 8004414:	6033      	strmi	r3, [r6, #0]
 8004416:	6825      	ldr	r5, [r4, #0]
 8004418:	f015 0506 	ands.w	r5, r5, #6
 800441c:	d106      	bne.n	800442c <_printf_common+0x48>
 800441e:	f104 0a19 	add.w	sl, r4, #25
 8004422:	68e3      	ldr	r3, [r4, #12]
 8004424:	6832      	ldr	r2, [r6, #0]
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	42ab      	cmp	r3, r5
 800442a:	dc2b      	bgt.n	8004484 <_printf_common+0xa0>
 800442c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004430:	1e13      	subs	r3, r2, #0
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	bf18      	it	ne
 8004436:	2301      	movne	r3, #1
 8004438:	0692      	lsls	r2, r2, #26
 800443a:	d430      	bmi.n	800449e <_printf_common+0xba>
 800443c:	4649      	mov	r1, r9
 800443e:	4638      	mov	r0, r7
 8004440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004444:	47c0      	blx	r8
 8004446:	3001      	adds	r0, #1
 8004448:	d023      	beq.n	8004492 <_printf_common+0xae>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	6922      	ldr	r2, [r4, #16]
 800444e:	f003 0306 	and.w	r3, r3, #6
 8004452:	2b04      	cmp	r3, #4
 8004454:	bf14      	ite	ne
 8004456:	2500      	movne	r5, #0
 8004458:	6833      	ldreq	r3, [r6, #0]
 800445a:	f04f 0600 	mov.w	r6, #0
 800445e:	bf08      	it	eq
 8004460:	68e5      	ldreq	r5, [r4, #12]
 8004462:	f104 041a 	add.w	r4, r4, #26
 8004466:	bf08      	it	eq
 8004468:	1aed      	subeq	r5, r5, r3
 800446a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800446e:	bf08      	it	eq
 8004470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004474:	4293      	cmp	r3, r2
 8004476:	bfc4      	itt	gt
 8004478:	1a9b      	subgt	r3, r3, r2
 800447a:	18ed      	addgt	r5, r5, r3
 800447c:	42b5      	cmp	r5, r6
 800447e:	d11a      	bne.n	80044b6 <_printf_common+0xd2>
 8004480:	2000      	movs	r0, #0
 8004482:	e008      	b.n	8004496 <_printf_common+0xb2>
 8004484:	2301      	movs	r3, #1
 8004486:	4652      	mov	r2, sl
 8004488:	4649      	mov	r1, r9
 800448a:	4638      	mov	r0, r7
 800448c:	47c0      	blx	r8
 800448e:	3001      	adds	r0, #1
 8004490:	d103      	bne.n	800449a <_printf_common+0xb6>
 8004492:	f04f 30ff 	mov.w	r0, #4294967295
 8004496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449a:	3501      	adds	r5, #1
 800449c:	e7c1      	b.n	8004422 <_printf_common+0x3e>
 800449e:	2030      	movs	r0, #48	; 0x30
 80044a0:	18e1      	adds	r1, r4, r3
 80044a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ac:	4422      	add	r2, r4
 80044ae:	3302      	adds	r3, #2
 80044b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044b4:	e7c2      	b.n	800443c <_printf_common+0x58>
 80044b6:	2301      	movs	r3, #1
 80044b8:	4622      	mov	r2, r4
 80044ba:	4649      	mov	r1, r9
 80044bc:	4638      	mov	r0, r7
 80044be:	47c0      	blx	r8
 80044c0:	3001      	adds	r0, #1
 80044c2:	d0e6      	beq.n	8004492 <_printf_common+0xae>
 80044c4:	3601      	adds	r6, #1
 80044c6:	e7d9      	b.n	800447c <_printf_common+0x98>

080044c8 <_printf_i>:
 80044c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	7e0f      	ldrb	r7, [r1, #24]
 80044ce:	4691      	mov	r9, r2
 80044d0:	2f78      	cmp	r7, #120	; 0x78
 80044d2:	4680      	mov	r8, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	469a      	mov	sl, r3
 80044d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044de:	d807      	bhi.n	80044f0 <_printf_i+0x28>
 80044e0:	2f62      	cmp	r7, #98	; 0x62
 80044e2:	d80a      	bhi.n	80044fa <_printf_i+0x32>
 80044e4:	2f00      	cmp	r7, #0
 80044e6:	f000 80d5 	beq.w	8004694 <_printf_i+0x1cc>
 80044ea:	2f58      	cmp	r7, #88	; 0x58
 80044ec:	f000 80c1 	beq.w	8004672 <_printf_i+0x1aa>
 80044f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044f8:	e03a      	b.n	8004570 <_printf_i+0xa8>
 80044fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044fe:	2b15      	cmp	r3, #21
 8004500:	d8f6      	bhi.n	80044f0 <_printf_i+0x28>
 8004502:	a101      	add	r1, pc, #4	; (adr r1, 8004508 <_printf_i+0x40>)
 8004504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004508:	08004561 	.word	0x08004561
 800450c:	08004575 	.word	0x08004575
 8004510:	080044f1 	.word	0x080044f1
 8004514:	080044f1 	.word	0x080044f1
 8004518:	080044f1 	.word	0x080044f1
 800451c:	080044f1 	.word	0x080044f1
 8004520:	08004575 	.word	0x08004575
 8004524:	080044f1 	.word	0x080044f1
 8004528:	080044f1 	.word	0x080044f1
 800452c:	080044f1 	.word	0x080044f1
 8004530:	080044f1 	.word	0x080044f1
 8004534:	0800467b 	.word	0x0800467b
 8004538:	080045a1 	.word	0x080045a1
 800453c:	08004635 	.word	0x08004635
 8004540:	080044f1 	.word	0x080044f1
 8004544:	080044f1 	.word	0x080044f1
 8004548:	0800469d 	.word	0x0800469d
 800454c:	080044f1 	.word	0x080044f1
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080044f1 	.word	0x080044f1
 8004558:	080044f1 	.word	0x080044f1
 800455c:	0800463d 	.word	0x0800463d
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	602a      	str	r2, [r5, #0]
 8004568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800456c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004570:	2301      	movs	r3, #1
 8004572:	e0a0      	b.n	80046b6 <_printf_i+0x1ee>
 8004574:	6820      	ldr	r0, [r4, #0]
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	0607      	lsls	r7, r0, #24
 800457a:	f103 0104 	add.w	r1, r3, #4
 800457e:	6029      	str	r1, [r5, #0]
 8004580:	d501      	bpl.n	8004586 <_printf_i+0xbe>
 8004582:	681e      	ldr	r6, [r3, #0]
 8004584:	e003      	b.n	800458e <_printf_i+0xc6>
 8004586:	0646      	lsls	r6, r0, #25
 8004588:	d5fb      	bpl.n	8004582 <_printf_i+0xba>
 800458a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800458e:	2e00      	cmp	r6, #0
 8004590:	da03      	bge.n	800459a <_printf_i+0xd2>
 8004592:	232d      	movs	r3, #45	; 0x2d
 8004594:	4276      	negs	r6, r6
 8004596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800459a:	230a      	movs	r3, #10
 800459c:	4859      	ldr	r0, [pc, #356]	; (8004704 <_printf_i+0x23c>)
 800459e:	e012      	b.n	80045c6 <_printf_i+0xfe>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	1d19      	adds	r1, r3, #4
 80045a6:	6029      	str	r1, [r5, #0]
 80045a8:	0605      	lsls	r5, r0, #24
 80045aa:	d501      	bpl.n	80045b0 <_printf_i+0xe8>
 80045ac:	681e      	ldr	r6, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <_printf_i+0xee>
 80045b0:	0641      	lsls	r1, r0, #25
 80045b2:	d5fb      	bpl.n	80045ac <_printf_i+0xe4>
 80045b4:	881e      	ldrh	r6, [r3, #0]
 80045b6:	2f6f      	cmp	r7, #111	; 0x6f
 80045b8:	bf0c      	ite	eq
 80045ba:	2308      	moveq	r3, #8
 80045bc:	230a      	movne	r3, #10
 80045be:	4851      	ldr	r0, [pc, #324]	; (8004704 <_printf_i+0x23c>)
 80045c0:	2100      	movs	r1, #0
 80045c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045c6:	6865      	ldr	r5, [r4, #4]
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	bfa8      	it	ge
 80045cc:	6821      	ldrge	r1, [r4, #0]
 80045ce:	60a5      	str	r5, [r4, #8]
 80045d0:	bfa4      	itt	ge
 80045d2:	f021 0104 	bicge.w	r1, r1, #4
 80045d6:	6021      	strge	r1, [r4, #0]
 80045d8:	b90e      	cbnz	r6, 80045de <_printf_i+0x116>
 80045da:	2d00      	cmp	r5, #0
 80045dc:	d04b      	beq.n	8004676 <_printf_i+0x1ae>
 80045de:	4615      	mov	r5, r2
 80045e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80045e4:	fb03 6711 	mls	r7, r3, r1, r6
 80045e8:	5dc7      	ldrb	r7, [r0, r7]
 80045ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ee:	4637      	mov	r7, r6
 80045f0:	42bb      	cmp	r3, r7
 80045f2:	460e      	mov	r6, r1
 80045f4:	d9f4      	bls.n	80045e0 <_printf_i+0x118>
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d10b      	bne.n	8004612 <_printf_i+0x14a>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	07de      	lsls	r6, r3, #31
 80045fe:	d508      	bpl.n	8004612 <_printf_i+0x14a>
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	6861      	ldr	r1, [r4, #4]
 8004604:	4299      	cmp	r1, r3
 8004606:	bfde      	ittt	le
 8004608:	2330      	movle	r3, #48	; 0x30
 800460a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800460e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004612:	1b52      	subs	r2, r2, r5
 8004614:	6122      	str	r2, [r4, #16]
 8004616:	464b      	mov	r3, r9
 8004618:	4621      	mov	r1, r4
 800461a:	4640      	mov	r0, r8
 800461c:	f8cd a000 	str.w	sl, [sp]
 8004620:	aa03      	add	r2, sp, #12
 8004622:	f7ff fedf 	bl	80043e4 <_printf_common>
 8004626:	3001      	adds	r0, #1
 8004628:	d14a      	bne.n	80046c0 <_printf_i+0x1f8>
 800462a:	f04f 30ff 	mov.w	r0, #4294967295
 800462e:	b004      	add	sp, #16
 8004630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	f043 0320 	orr.w	r3, r3, #32
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	2778      	movs	r7, #120	; 0x78
 800463e:	4832      	ldr	r0, [pc, #200]	; (8004708 <_printf_i+0x240>)
 8004640:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	6829      	ldr	r1, [r5, #0]
 8004648:	061f      	lsls	r7, r3, #24
 800464a:	f851 6b04 	ldr.w	r6, [r1], #4
 800464e:	d402      	bmi.n	8004656 <_printf_i+0x18e>
 8004650:	065f      	lsls	r7, r3, #25
 8004652:	bf48      	it	mi
 8004654:	b2b6      	uxthmi	r6, r6
 8004656:	07df      	lsls	r7, r3, #31
 8004658:	bf48      	it	mi
 800465a:	f043 0320 	orrmi.w	r3, r3, #32
 800465e:	6029      	str	r1, [r5, #0]
 8004660:	bf48      	it	mi
 8004662:	6023      	strmi	r3, [r4, #0]
 8004664:	b91e      	cbnz	r6, 800466e <_printf_i+0x1a6>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f023 0320 	bic.w	r3, r3, #32
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	2310      	movs	r3, #16
 8004670:	e7a6      	b.n	80045c0 <_printf_i+0xf8>
 8004672:	4824      	ldr	r0, [pc, #144]	; (8004704 <_printf_i+0x23c>)
 8004674:	e7e4      	b.n	8004640 <_printf_i+0x178>
 8004676:	4615      	mov	r5, r2
 8004678:	e7bd      	b.n	80045f6 <_printf_i+0x12e>
 800467a:	682b      	ldr	r3, [r5, #0]
 800467c:	6826      	ldr	r6, [r4, #0]
 800467e:	1d18      	adds	r0, r3, #4
 8004680:	6961      	ldr	r1, [r4, #20]
 8004682:	6028      	str	r0, [r5, #0]
 8004684:	0635      	lsls	r5, r6, #24
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	d501      	bpl.n	800468e <_printf_i+0x1c6>
 800468a:	6019      	str	r1, [r3, #0]
 800468c:	e002      	b.n	8004694 <_printf_i+0x1cc>
 800468e:	0670      	lsls	r0, r6, #25
 8004690:	d5fb      	bpl.n	800468a <_printf_i+0x1c2>
 8004692:	8019      	strh	r1, [r3, #0]
 8004694:	2300      	movs	r3, #0
 8004696:	4615      	mov	r5, r2
 8004698:	6123      	str	r3, [r4, #16]
 800469a:	e7bc      	b.n	8004616 <_printf_i+0x14e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	2100      	movs	r1, #0
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	602a      	str	r2, [r5, #0]
 80046a4:	681d      	ldr	r5, [r3, #0]
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f9b3 	bl	8004a14 <memchr>
 80046ae:	b108      	cbz	r0, 80046b4 <_printf_i+0x1ec>
 80046b0:	1b40      	subs	r0, r0, r5
 80046b2:	6060      	str	r0, [r4, #4]
 80046b4:	6863      	ldr	r3, [r4, #4]
 80046b6:	6123      	str	r3, [r4, #16]
 80046b8:	2300      	movs	r3, #0
 80046ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046be:	e7aa      	b.n	8004616 <_printf_i+0x14e>
 80046c0:	462a      	mov	r2, r5
 80046c2:	4649      	mov	r1, r9
 80046c4:	4640      	mov	r0, r8
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	47d0      	blx	sl
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0ad      	beq.n	800462a <_printf_i+0x162>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	079b      	lsls	r3, r3, #30
 80046d2:	d413      	bmi.n	80046fc <_printf_i+0x234>
 80046d4:	68e0      	ldr	r0, [r4, #12]
 80046d6:	9b03      	ldr	r3, [sp, #12]
 80046d8:	4298      	cmp	r0, r3
 80046da:	bfb8      	it	lt
 80046dc:	4618      	movlt	r0, r3
 80046de:	e7a6      	b.n	800462e <_printf_i+0x166>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4632      	mov	r2, r6
 80046e4:	4649      	mov	r1, r9
 80046e6:	4640      	mov	r0, r8
 80046e8:	47d0      	blx	sl
 80046ea:	3001      	adds	r0, #1
 80046ec:	d09d      	beq.n	800462a <_printf_i+0x162>
 80046ee:	3501      	adds	r5, #1
 80046f0:	68e3      	ldr	r3, [r4, #12]
 80046f2:	9903      	ldr	r1, [sp, #12]
 80046f4:	1a5b      	subs	r3, r3, r1
 80046f6:	42ab      	cmp	r3, r5
 80046f8:	dcf2      	bgt.n	80046e0 <_printf_i+0x218>
 80046fa:	e7eb      	b.n	80046d4 <_printf_i+0x20c>
 80046fc:	2500      	movs	r5, #0
 80046fe:	f104 0619 	add.w	r6, r4, #25
 8004702:	e7f5      	b.n	80046f0 <_printf_i+0x228>
 8004704:	08006810 	.word	0x08006810
 8004708:	08006821 	.word	0x08006821

0800470c <std>:
 800470c:	2300      	movs	r3, #0
 800470e:	b510      	push	{r4, lr}
 8004710:	4604      	mov	r4, r0
 8004712:	e9c0 3300 	strd	r3, r3, [r0]
 8004716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800471a:	6083      	str	r3, [r0, #8]
 800471c:	8181      	strh	r1, [r0, #12]
 800471e:	6643      	str	r3, [r0, #100]	; 0x64
 8004720:	81c2      	strh	r2, [r0, #14]
 8004722:	6183      	str	r3, [r0, #24]
 8004724:	4619      	mov	r1, r3
 8004726:	2208      	movs	r2, #8
 8004728:	305c      	adds	r0, #92	; 0x5c
 800472a:	f000 f8f4 	bl	8004916 <memset>
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <std+0x38>)
 8004730:	6224      	str	r4, [r4, #32]
 8004732:	6263      	str	r3, [r4, #36]	; 0x24
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <std+0x3c>)
 8004736:	62a3      	str	r3, [r4, #40]	; 0x28
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <std+0x40>)
 800473a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <std+0x44>)
 800473e:	6323      	str	r3, [r4, #48]	; 0x30
 8004740:	bd10      	pop	{r4, pc}
 8004742:	bf00      	nop
 8004744:	08004891 	.word	0x08004891
 8004748:	080048b3 	.word	0x080048b3
 800474c:	080048eb 	.word	0x080048eb
 8004750:	0800490f 	.word	0x0800490f

08004754 <stdio_exit_handler>:
 8004754:	4a02      	ldr	r2, [pc, #8]	; (8004760 <stdio_exit_handler+0xc>)
 8004756:	4903      	ldr	r1, [pc, #12]	; (8004764 <stdio_exit_handler+0x10>)
 8004758:	4803      	ldr	r0, [pc, #12]	; (8004768 <stdio_exit_handler+0x14>)
 800475a:	f000 b869 	b.w	8004830 <_fwalk_sglue>
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c
 8004764:	08006381 	.word	0x08006381
 8004768:	20000018 	.word	0x20000018

0800476c <cleanup_stdio>:
 800476c:	6841      	ldr	r1, [r0, #4]
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <cleanup_stdio+0x34>)
 8004770:	b510      	push	{r4, lr}
 8004772:	4299      	cmp	r1, r3
 8004774:	4604      	mov	r4, r0
 8004776:	d001      	beq.n	800477c <cleanup_stdio+0x10>
 8004778:	f001 fe02 	bl	8006380 <_fflush_r>
 800477c:	68a1      	ldr	r1, [r4, #8]
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <cleanup_stdio+0x38>)
 8004780:	4299      	cmp	r1, r3
 8004782:	d002      	beq.n	800478a <cleanup_stdio+0x1e>
 8004784:	4620      	mov	r0, r4
 8004786:	f001 fdfb 	bl	8006380 <_fflush_r>
 800478a:	68e1      	ldr	r1, [r4, #12]
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <cleanup_stdio+0x3c>)
 800478e:	4299      	cmp	r1, r3
 8004790:	d004      	beq.n	800479c <cleanup_stdio+0x30>
 8004792:	4620      	mov	r0, r4
 8004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004798:	f001 bdf2 	b.w	8006380 <_fflush_r>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	bf00      	nop
 80047a0:	20000374 	.word	0x20000374
 80047a4:	200003dc 	.word	0x200003dc
 80047a8:	20000444 	.word	0x20000444

080047ac <global_stdio_init.part.0>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <global_stdio_init.part.0+0x30>)
 80047b0:	4c0b      	ldr	r4, [pc, #44]	; (80047e0 <global_stdio_init.part.0+0x34>)
 80047b2:	4a0c      	ldr	r2, [pc, #48]	; (80047e4 <global_stdio_init.part.0+0x38>)
 80047b4:	4620      	mov	r0, r4
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	2104      	movs	r1, #4
 80047ba:	2200      	movs	r2, #0
 80047bc:	f7ff ffa6 	bl	800470c <std>
 80047c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047c4:	2201      	movs	r2, #1
 80047c6:	2109      	movs	r1, #9
 80047c8:	f7ff ffa0 	bl	800470c <std>
 80047cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047d0:	2202      	movs	r2, #2
 80047d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d6:	2112      	movs	r1, #18
 80047d8:	f7ff bf98 	b.w	800470c <std>
 80047dc:	200004ac 	.word	0x200004ac
 80047e0:	20000374 	.word	0x20000374
 80047e4:	08004755 	.word	0x08004755

080047e8 <__sfp_lock_acquire>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__sfp_lock_acquire+0x8>)
 80047ea:	f000 b911 	b.w	8004a10 <__retarget_lock_acquire_recursive>
 80047ee:	bf00      	nop
 80047f0:	200004b5 	.word	0x200004b5

080047f4 <__sfp_lock_release>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sfp_lock_release+0x8>)
 80047f6:	f000 b90c 	b.w	8004a12 <__retarget_lock_release_recursive>
 80047fa:	bf00      	nop
 80047fc:	200004b5 	.word	0x200004b5

08004800 <__sinit>:
 8004800:	b510      	push	{r4, lr}
 8004802:	4604      	mov	r4, r0
 8004804:	f7ff fff0 	bl	80047e8 <__sfp_lock_acquire>
 8004808:	6a23      	ldr	r3, [r4, #32]
 800480a:	b11b      	cbz	r3, 8004814 <__sinit+0x14>
 800480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004810:	f7ff bff0 	b.w	80047f4 <__sfp_lock_release>
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <__sinit+0x28>)
 8004816:	6223      	str	r3, [r4, #32]
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <__sinit+0x2c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f5      	bne.n	800480c <__sinit+0xc>
 8004820:	f7ff ffc4 	bl	80047ac <global_stdio_init.part.0>
 8004824:	e7f2      	b.n	800480c <__sinit+0xc>
 8004826:	bf00      	nop
 8004828:	0800476d 	.word	0x0800476d
 800482c:	200004ac 	.word	0x200004ac

08004830 <_fwalk_sglue>:
 8004830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004834:	4607      	mov	r7, r0
 8004836:	4688      	mov	r8, r1
 8004838:	4614      	mov	r4, r2
 800483a:	2600      	movs	r6, #0
 800483c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004840:	f1b9 0901 	subs.w	r9, r9, #1
 8004844:	d505      	bpl.n	8004852 <_fwalk_sglue+0x22>
 8004846:	6824      	ldr	r4, [r4, #0]
 8004848:	2c00      	cmp	r4, #0
 800484a:	d1f7      	bne.n	800483c <_fwalk_sglue+0xc>
 800484c:	4630      	mov	r0, r6
 800484e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004852:	89ab      	ldrh	r3, [r5, #12]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d907      	bls.n	8004868 <_fwalk_sglue+0x38>
 8004858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800485c:	3301      	adds	r3, #1
 800485e:	d003      	beq.n	8004868 <_fwalk_sglue+0x38>
 8004860:	4629      	mov	r1, r5
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	4306      	orrs	r6, r0
 8004868:	3568      	adds	r5, #104	; 0x68
 800486a:	e7e9      	b.n	8004840 <_fwalk_sglue+0x10>

0800486c <iprintf>:
 800486c:	b40f      	push	{r0, r1, r2, r3}
 800486e:	b507      	push	{r0, r1, r2, lr}
 8004870:	4906      	ldr	r1, [pc, #24]	; (800488c <iprintf+0x20>)
 8004872:	ab04      	add	r3, sp, #16
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	f853 2b04 	ldr.w	r2, [r3], #4
 800487a:	6881      	ldr	r1, [r0, #8]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	f001 fbe3 	bl	8006048 <_vfiprintf_r>
 8004882:	b003      	add	sp, #12
 8004884:	f85d eb04 	ldr.w	lr, [sp], #4
 8004888:	b004      	add	sp, #16
 800488a:	4770      	bx	lr
 800488c:	20000064 	.word	0x20000064

08004890 <__sread>:
 8004890:	b510      	push	{r4, lr}
 8004892:	460c      	mov	r4, r1
 8004894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004898:	f000 f86c 	bl	8004974 <_read_r>
 800489c:	2800      	cmp	r0, #0
 800489e:	bfab      	itete	ge
 80048a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048a2:	89a3      	ldrhlt	r3, [r4, #12]
 80048a4:	181b      	addge	r3, r3, r0
 80048a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048aa:	bfac      	ite	ge
 80048ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80048ae:	81a3      	strhlt	r3, [r4, #12]
 80048b0:	bd10      	pop	{r4, pc}

080048b2 <__swrite>:
 80048b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	461f      	mov	r7, r3
 80048b8:	898b      	ldrh	r3, [r1, #12]
 80048ba:	4605      	mov	r5, r0
 80048bc:	05db      	lsls	r3, r3, #23
 80048be:	460c      	mov	r4, r1
 80048c0:	4616      	mov	r6, r2
 80048c2:	d505      	bpl.n	80048d0 <__swrite+0x1e>
 80048c4:	2302      	movs	r3, #2
 80048c6:	2200      	movs	r2, #0
 80048c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048cc:	f000 f840 	bl	8004950 <_lseek_r>
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	4632      	mov	r2, r6
 80048d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	4628      	mov	r0, r5
 80048dc:	463b      	mov	r3, r7
 80048de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	f000 b857 	b.w	8004998 <_write_r>

080048ea <__sseek>:
 80048ea:	b510      	push	{r4, lr}
 80048ec:	460c      	mov	r4, r1
 80048ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f2:	f000 f82d 	bl	8004950 <_lseek_r>
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	bf15      	itete	ne
 80048fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80048fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004906:	81a3      	strheq	r3, [r4, #12]
 8004908:	bf18      	it	ne
 800490a:	81a3      	strhne	r3, [r4, #12]
 800490c:	bd10      	pop	{r4, pc}

0800490e <__sclose>:
 800490e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004912:	f000 b80d 	b.w	8004930 <_close_r>

08004916 <memset>:
 8004916:	4603      	mov	r3, r0
 8004918:	4402      	add	r2, r0
 800491a:	4293      	cmp	r3, r2
 800491c:	d100      	bne.n	8004920 <memset+0xa>
 800491e:	4770      	bx	lr
 8004920:	f803 1b01 	strb.w	r1, [r3], #1
 8004924:	e7f9      	b.n	800491a <memset+0x4>
	...

08004928 <_localeconv_r>:
 8004928:	4800      	ldr	r0, [pc, #0]	; (800492c <_localeconv_r+0x4>)
 800492a:	4770      	bx	lr
 800492c:	20000158 	.word	0x20000158

08004930 <_close_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	2300      	movs	r3, #0
 8004934:	4d05      	ldr	r5, [pc, #20]	; (800494c <_close_r+0x1c>)
 8004936:	4604      	mov	r4, r0
 8004938:	4608      	mov	r0, r1
 800493a:	602b      	str	r3, [r5, #0]
 800493c:	f7fc ff3d 	bl	80017ba <_close>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_close_r+0x1a>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_close_r+0x1a>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	200004b0 	.word	0x200004b0

08004950 <_lseek_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	2200      	movs	r2, #0
 800495a:	4d05      	ldr	r5, [pc, #20]	; (8004970 <_lseek_r+0x20>)
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f7fc ff4f 	bl	8001802 <_lseek>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_lseek_r+0x1e>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_lseek_r+0x1e>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200004b0 	.word	0x200004b0

08004974 <_read_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	4611      	mov	r1, r2
 800497c:	2200      	movs	r2, #0
 800497e:	4d05      	ldr	r5, [pc, #20]	; (8004994 <_read_r+0x20>)
 8004980:	602a      	str	r2, [r5, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	f7fc fee0 	bl	8001748 <_read>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d102      	bne.n	8004992 <_read_r+0x1e>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	b103      	cbz	r3, 8004992 <_read_r+0x1e>
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	200004b0 	.word	0x200004b0

08004998 <_write_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	2200      	movs	r2, #0
 80049a2:	4d05      	ldr	r5, [pc, #20]	; (80049b8 <_write_r+0x20>)
 80049a4:	602a      	str	r2, [r5, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f7fc feeb 	bl	8001782 <_write>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d102      	bne.n	80049b6 <_write_r+0x1e>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	b103      	cbz	r3, 80049b6 <_write_r+0x1e>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	200004b0 	.word	0x200004b0

080049bc <__errno>:
 80049bc:	4b01      	ldr	r3, [pc, #4]	; (80049c4 <__errno+0x8>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000064 	.word	0x20000064

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	2600      	movs	r6, #0
 80049cc:	4d0c      	ldr	r5, [pc, #48]	; (8004a00 <__libc_init_array+0x38>)
 80049ce:	4c0d      	ldr	r4, [pc, #52]	; (8004a04 <__libc_init_array+0x3c>)
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	f001 fee2 	bl	80067a0 <_init>
 80049dc:	2600      	movs	r6, #0
 80049de:	4d0a      	ldr	r5, [pc, #40]	; (8004a08 <__libc_init_array+0x40>)
 80049e0:	4c0a      	ldr	r4, [pc, #40]	; (8004a0c <__libc_init_array+0x44>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08006b6c 	.word	0x08006b6c
 8004a04:	08006b6c 	.word	0x08006b6c
 8004a08:	08006b6c 	.word	0x08006b6c
 8004a0c:	08006b70 	.word	0x08006b70

08004a10 <__retarget_lock_acquire_recursive>:
 8004a10:	4770      	bx	lr

08004a12 <__retarget_lock_release_recursive>:
 8004a12:	4770      	bx	lr

08004a14 <memchr>:
 8004a14:	4603      	mov	r3, r0
 8004a16:	b510      	push	{r4, lr}
 8004a18:	b2c9      	uxtb	r1, r1
 8004a1a:	4402      	add	r2, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	d101      	bne.n	8004a26 <memchr+0x12>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e003      	b.n	8004a2e <memchr+0x1a>
 8004a26:	7804      	ldrb	r4, [r0, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	428c      	cmp	r4, r1
 8004a2c:	d1f6      	bne.n	8004a1c <memchr+0x8>
 8004a2e:	bd10      	pop	{r4, pc}

08004a30 <quorem>:
 8004a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	6903      	ldr	r3, [r0, #16]
 8004a36:	690c      	ldr	r4, [r1, #16]
 8004a38:	4607      	mov	r7, r0
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	db7f      	blt.n	8004b3e <quorem+0x10e>
 8004a3e:	3c01      	subs	r4, #1
 8004a40:	f100 0514 	add.w	r5, r0, #20
 8004a44:	f101 0814 	add.w	r8, r1, #20
 8004a48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a56:	3301      	adds	r3, #1
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a5e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a66:	d331      	bcc.n	8004acc <quorem+0x9c>
 8004a68:	f04f 0e00 	mov.w	lr, #0
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	46ac      	mov	ip, r5
 8004a70:	46f2      	mov	sl, lr
 8004a72:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a76:	b293      	uxth	r3, r2
 8004a78:	fb06 e303 	mla	r3, r6, r3, lr
 8004a7c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a80:	0c1a      	lsrs	r2, r3, #16
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	fb06 220e 	mla	r2, r6, lr, r2
 8004a88:	ebaa 0303 	sub.w	r3, sl, r3
 8004a8c:	f8dc a000 	ldr.w	sl, [ip]
 8004a90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a94:	fa1f fa8a 	uxth.w	sl, sl
 8004a98:	4453      	add	r3, sl
 8004a9a:	f8dc a000 	ldr.w	sl, [ip]
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004aae:	4581      	cmp	r9, r0
 8004ab0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ab4:	f84c 3b04 	str.w	r3, [ip], #4
 8004ab8:	d2db      	bcs.n	8004a72 <quorem+0x42>
 8004aba:	f855 300b 	ldr.w	r3, [r5, fp]
 8004abe:	b92b      	cbnz	r3, 8004acc <quorem+0x9c>
 8004ac0:	9b01      	ldr	r3, [sp, #4]
 8004ac2:	3b04      	subs	r3, #4
 8004ac4:	429d      	cmp	r5, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	d32d      	bcc.n	8004b26 <quorem+0xf6>
 8004aca:	613c      	str	r4, [r7, #16]
 8004acc:	4638      	mov	r0, r7
 8004ace:	f001 f995 	bl	8005dfc <__mcmp>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	db23      	blt.n	8004b1e <quorem+0xee>
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	2000      	movs	r0, #0
 8004ada:	3601      	adds	r6, #1
 8004adc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ae0:	f8d1 c000 	ldr.w	ip, [r1]
 8004ae4:	b293      	uxth	r3, r2
 8004ae6:	1ac3      	subs	r3, r0, r3
 8004ae8:	0c12      	lsrs	r2, r2, #16
 8004aea:	fa1f f08c 	uxth.w	r0, ip
 8004aee:	4403      	add	r3, r0
 8004af0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004afe:	45c1      	cmp	r9, r8
 8004b00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b04:	f841 3b04 	str.w	r3, [r1], #4
 8004b08:	d2e8      	bcs.n	8004adc <quorem+0xac>
 8004b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b12:	b922      	cbnz	r2, 8004b1e <quorem+0xee>
 8004b14:	3b04      	subs	r3, #4
 8004b16:	429d      	cmp	r5, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	d30a      	bcc.n	8004b32 <quorem+0x102>
 8004b1c:	613c      	str	r4, [r7, #16]
 8004b1e:	4630      	mov	r0, r6
 8004b20:	b003      	add	sp, #12
 8004b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	3b04      	subs	r3, #4
 8004b2a:	2a00      	cmp	r2, #0
 8004b2c:	d1cd      	bne.n	8004aca <quorem+0x9a>
 8004b2e:	3c01      	subs	r4, #1
 8004b30:	e7c8      	b.n	8004ac4 <quorem+0x94>
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d1f0      	bne.n	8004b1c <quorem+0xec>
 8004b3a:	3c01      	subs	r4, #1
 8004b3c:	e7eb      	b.n	8004b16 <quorem+0xe6>
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e7ee      	b.n	8004b20 <quorem+0xf0>
 8004b42:	0000      	movs	r0, r0
 8004b44:	0000      	movs	r0, r0
	...

08004b48 <_dtoa_r>:
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	461f      	mov	r7, r3
 8004b50:	69c4      	ldr	r4, [r0, #28]
 8004b52:	b099      	sub	sp, #100	; 0x64
 8004b54:	4605      	mov	r5, r0
 8004b56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004b5e:	b974      	cbnz	r4, 8004b7e <_dtoa_r+0x36>
 8004b60:	2010      	movs	r0, #16
 8004b62:	f000 fe1d 	bl	80057a0 <malloc>
 8004b66:	4602      	mov	r2, r0
 8004b68:	61e8      	str	r0, [r5, #28]
 8004b6a:	b920      	cbnz	r0, 8004b76 <_dtoa_r+0x2e>
 8004b6c:	21ef      	movs	r1, #239	; 0xef
 8004b6e:	4bac      	ldr	r3, [pc, #688]	; (8004e20 <_dtoa_r+0x2d8>)
 8004b70:	48ac      	ldr	r0, [pc, #688]	; (8004e24 <_dtoa_r+0x2dc>)
 8004b72:	f001 fce1 	bl	8006538 <__assert_func>
 8004b76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b7a:	6004      	str	r4, [r0, #0]
 8004b7c:	60c4      	str	r4, [r0, #12]
 8004b7e:	69eb      	ldr	r3, [r5, #28]
 8004b80:	6819      	ldr	r1, [r3, #0]
 8004b82:	b151      	cbz	r1, 8004b9a <_dtoa_r+0x52>
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	2301      	movs	r3, #1
 8004b88:	4093      	lsls	r3, r2
 8004b8a:	604a      	str	r2, [r1, #4]
 8004b8c:	608b      	str	r3, [r1, #8]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 fefa 	bl	8005988 <_Bfree>
 8004b94:	2200      	movs	r2, #0
 8004b96:	69eb      	ldr	r3, [r5, #28]
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	1e3b      	subs	r3, r7, #0
 8004b9c:	bfaf      	iteee	ge
 8004b9e:	2300      	movge	r3, #0
 8004ba0:	2201      	movlt	r2, #1
 8004ba2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ba6:	9305      	strlt	r3, [sp, #20]
 8004ba8:	bfa8      	it	ge
 8004baa:	f8c8 3000 	strge.w	r3, [r8]
 8004bae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004bb2:	4b9d      	ldr	r3, [pc, #628]	; (8004e28 <_dtoa_r+0x2e0>)
 8004bb4:	bfb8      	it	lt
 8004bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8004bba:	ea33 0309 	bics.w	r3, r3, r9
 8004bbe:	d119      	bne.n	8004bf4 <_dtoa_r+0xac>
 8004bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bcc:	4333      	orrs	r3, r6
 8004bce:	f000 8589 	beq.w	80056e4 <_dtoa_r+0xb9c>
 8004bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bd4:	b953      	cbnz	r3, 8004bec <_dtoa_r+0xa4>
 8004bd6:	4b95      	ldr	r3, [pc, #596]	; (8004e2c <_dtoa_r+0x2e4>)
 8004bd8:	e023      	b.n	8004c22 <_dtoa_r+0xda>
 8004bda:	4b95      	ldr	r3, [pc, #596]	; (8004e30 <_dtoa_r+0x2e8>)
 8004bdc:	9303      	str	r3, [sp, #12]
 8004bde:	3308      	adds	r3, #8
 8004be0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	9803      	ldr	r0, [sp, #12]
 8004be6:	b019      	add	sp, #100	; 0x64
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	4b8f      	ldr	r3, [pc, #572]	; (8004e2c <_dtoa_r+0x2e4>)
 8004bee:	9303      	str	r3, [sp, #12]
 8004bf0:	3303      	adds	r3, #3
 8004bf2:	e7f5      	b.n	8004be0 <_dtoa_r+0x98>
 8004bf4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004bf8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	2300      	movs	r3, #0
 8004c04:	f7fb fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8004c08:	4680      	mov	r8, r0
 8004c0a:	b160      	cbz	r0, 8004c26 <_dtoa_r+0xde>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8562 	beq.w	80056de <_dtoa_r+0xb96>
 8004c1a:	4b86      	ldr	r3, [pc, #536]	; (8004e34 <_dtoa_r+0x2ec>)
 8004c1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	9303      	str	r3, [sp, #12]
 8004c24:	e7de      	b.n	8004be4 <_dtoa_r+0x9c>
 8004c26:	ab16      	add	r3, sp, #88	; 0x58
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	ab17      	add	r3, sp, #92	; 0x5c
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	4628      	mov	r0, r5
 8004c30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c34:	f001 f98a 	bl	8005f4c <__d2b>
 8004c38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004c3c:	4682      	mov	sl, r0
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	d07e      	beq.n	8004d40 <_dtoa_r+0x1f8>
 8004c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	2200      	movs	r2, #0
 8004c60:	4b75      	ldr	r3, [pc, #468]	; (8004e38 <_dtoa_r+0x2f0>)
 8004c62:	f7fb fa81 	bl	8000168 <__aeabi_dsub>
 8004c66:	a368      	add	r3, pc, #416	; (adr r3, 8004e08 <_dtoa_r+0x2c0>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fc34 	bl	80004d8 <__aeabi_dmul>
 8004c70:	a367      	add	r3, pc, #412	; (adr r3, 8004e10 <_dtoa_r+0x2c8>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb fa79 	bl	800016c <__adddf3>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	460f      	mov	r7, r1
 8004c80:	f7fb fbc0 	bl	8000404 <__aeabi_i2d>
 8004c84:	a364      	add	r3, pc, #400	; (adr r3, 8004e18 <_dtoa_r+0x2d0>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb fc25 	bl	80004d8 <__aeabi_dmul>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4630      	mov	r0, r6
 8004c94:	4639      	mov	r1, r7
 8004c96:	f7fb fa69 	bl	800016c <__adddf3>
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	460f      	mov	r7, r1
 8004c9e:	f7fb fecb 	bl	8000a38 <__aeabi_d2iz>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4683      	mov	fp, r0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f7fb fe86 	bl	80009bc <__aeabi_dcmplt>
 8004cb0:	b148      	cbz	r0, 8004cc6 <_dtoa_r+0x17e>
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	f7fb fba6 	bl	8000404 <__aeabi_i2d>
 8004cb8:	4632      	mov	r2, r6
 8004cba:	463b      	mov	r3, r7
 8004cbc:	f7fb fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8004cc0:	b908      	cbnz	r0, 8004cc6 <_dtoa_r+0x17e>
 8004cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cc6:	f1bb 0f16 	cmp.w	fp, #22
 8004cca:	d857      	bhi.n	8004d7c <_dtoa_r+0x234>
 8004ccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <_dtoa_r+0x2f4>)
 8004cd2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fe6f 	bl	80009bc <__aeabi_dcmplt>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d04e      	beq.n	8004d80 <_dtoa_r+0x238>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004cec:	1b1b      	subs	r3, r3, r4
 8004cee:	1e5a      	subs	r2, r3, #1
 8004cf0:	bf46      	itte	mi
 8004cf2:	f1c3 0901 	rsbmi	r9, r3, #1
 8004cf6:	2300      	movmi	r3, #0
 8004cf8:	f04f 0900 	movpl.w	r9, #0
 8004cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cfe:	bf48      	it	mi
 8004d00:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004d02:	f1bb 0f00 	cmp.w	fp, #0
 8004d06:	db3d      	blt.n	8004d84 <_dtoa_r+0x23c>
 8004d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004d0e:	445b      	add	r3, fp
 8004d10:	9309      	str	r3, [sp, #36]	; 0x24
 8004d12:	2300      	movs	r3, #0
 8004d14:	930a      	str	r3, [sp, #40]	; 0x28
 8004d16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d18:	2b09      	cmp	r3, #9
 8004d1a:	d867      	bhi.n	8004dec <_dtoa_r+0x2a4>
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	bfc4      	itt	gt
 8004d20:	3b04      	subgt	r3, #4
 8004d22:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d26:	bfc8      	it	gt
 8004d28:	2400      	movgt	r4, #0
 8004d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8004d2e:	bfd8      	it	le
 8004d30:	2401      	movle	r4, #1
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	f200 8086 	bhi.w	8004e44 <_dtoa_r+0x2fc>
 8004d38:	e8df f003 	tbb	[pc, r3]
 8004d3c:	5637392c 	.word	0x5637392c
 8004d40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004d44:	441c      	add	r4, r3
 8004d46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	bfc1      	itttt	gt
 8004d4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d52:	fa09 f903 	lslgt.w	r9, r9, r3
 8004d56:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004d5a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004d5e:	bfd6      	itet	le
 8004d60:	f1c3 0320 	rsble	r3, r3, #32
 8004d64:	ea49 0003 	orrgt.w	r0, r9, r3
 8004d68:	fa06 f003 	lslle.w	r0, r6, r3
 8004d6c:	f7fb fb3a 	bl	80003e4 <__aeabi_ui2d>
 8004d70:	2201      	movs	r2, #1
 8004d72:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004d76:	3c01      	subs	r4, #1
 8004d78:	9213      	str	r2, [sp, #76]	; 0x4c
 8004d7a:	e76f      	b.n	8004c5c <_dtoa_r+0x114>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e7b3      	b.n	8004ce8 <_dtoa_r+0x1a0>
 8004d80:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d82:	e7b2      	b.n	8004cea <_dtoa_r+0x1a2>
 8004d84:	f1cb 0300 	rsb	r3, fp, #0
 8004d88:	930a      	str	r3, [sp, #40]	; 0x28
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	eba9 090b 	sub.w	r9, r9, fp
 8004d90:	930e      	str	r3, [sp, #56]	; 0x38
 8004d92:	e7c0      	b.n	8004d16 <_dtoa_r+0x1ce>
 8004d94:	2300      	movs	r3, #0
 8004d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc55      	bgt.n	8004e4a <_dtoa_r+0x302>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	461a      	mov	r2, r3
 8004da2:	9306      	str	r3, [sp, #24]
 8004da4:	9308      	str	r3, [sp, #32]
 8004da6:	9223      	str	r2, [sp, #140]	; 0x8c
 8004da8:	e00b      	b.n	8004dc2 <_dtoa_r+0x27a>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e7f3      	b.n	8004d96 <_dtoa_r+0x24e>
 8004dae:	2300      	movs	r3, #0
 8004db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004db4:	445b      	add	r3, fp
 8004db6:	9306      	str	r3, [sp, #24]
 8004db8:	3301      	adds	r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	bfb8      	it	lt
 8004dc0:	2301      	movlt	r3, #1
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	69e8      	ldr	r0, [r5, #28]
 8004dc8:	f102 0614 	add.w	r6, r2, #20
 8004dcc:	429e      	cmp	r6, r3
 8004dce:	d940      	bls.n	8004e52 <_dtoa_r+0x30a>
 8004dd0:	6041      	str	r1, [r0, #4]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 fd98 	bl	8005908 <_Balloc>
 8004dd8:	9003      	str	r0, [sp, #12]
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d13c      	bne.n	8004e58 <_dtoa_r+0x310>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f240 11af 	movw	r1, #431	; 0x1af
 8004de4:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <_dtoa_r+0x2f8>)
 8004de6:	e6c3      	b.n	8004b70 <_dtoa_r+0x28>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e7e1      	b.n	8004db0 <_dtoa_r+0x268>
 8004dec:	2401      	movs	r4, #1
 8004dee:	2300      	movs	r3, #0
 8004df0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004df2:	9322      	str	r3, [sp, #136]	; 0x88
 8004df4:	f04f 33ff 	mov.w	r3, #4294967295
 8004df8:	2200      	movs	r2, #0
 8004dfa:	9306      	str	r3, [sp, #24]
 8004dfc:	9308      	str	r3, [sp, #32]
 8004dfe:	2312      	movs	r3, #18
 8004e00:	e7d1      	b.n	8004da6 <_dtoa_r+0x25e>
 8004e02:	bf00      	nop
 8004e04:	f3af 8000 	nop.w
 8004e08:	636f4361 	.word	0x636f4361
 8004e0c:	3fd287a7 	.word	0x3fd287a7
 8004e10:	8b60c8b3 	.word	0x8b60c8b3
 8004e14:	3fc68a28 	.word	0x3fc68a28
 8004e18:	509f79fb 	.word	0x509f79fb
 8004e1c:	3fd34413 	.word	0x3fd34413
 8004e20:	0800683f 	.word	0x0800683f
 8004e24:	08006856 	.word	0x08006856
 8004e28:	7ff00000 	.word	0x7ff00000
 8004e2c:	0800683b 	.word	0x0800683b
 8004e30:	08006832 	.word	0x08006832
 8004e34:	0800680f 	.word	0x0800680f
 8004e38:	3ff80000 	.word	0x3ff80000
 8004e3c:	08006940 	.word	0x08006940
 8004e40:	080068ae 	.word	0x080068ae
 8004e44:	2301      	movs	r3, #1
 8004e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e48:	e7d4      	b.n	8004df4 <_dtoa_r+0x2ac>
 8004e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e4c:	9306      	str	r3, [sp, #24]
 8004e4e:	9308      	str	r3, [sp, #32]
 8004e50:	e7b7      	b.n	8004dc2 <_dtoa_r+0x27a>
 8004e52:	3101      	adds	r1, #1
 8004e54:	0052      	lsls	r2, r2, #1
 8004e56:	e7b7      	b.n	8004dc8 <_dtoa_r+0x280>
 8004e58:	69eb      	ldr	r3, [r5, #28]
 8004e5a:	9a03      	ldr	r2, [sp, #12]
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	9b08      	ldr	r3, [sp, #32]
 8004e60:	2b0e      	cmp	r3, #14
 8004e62:	f200 80a8 	bhi.w	8004fb6 <_dtoa_r+0x46e>
 8004e66:	2c00      	cmp	r4, #0
 8004e68:	f000 80a5 	beq.w	8004fb6 <_dtoa_r+0x46e>
 8004e6c:	f1bb 0f00 	cmp.w	fp, #0
 8004e70:	dd34      	ble.n	8004edc <_dtoa_r+0x394>
 8004e72:	4b9a      	ldr	r3, [pc, #616]	; (80050dc <_dtoa_r+0x594>)
 8004e74:	f00b 020f 	and.w	r2, fp, #15
 8004e78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004e80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e88:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004e8c:	d016      	beq.n	8004ebc <_dtoa_r+0x374>
 8004e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e92:	4b93      	ldr	r3, [pc, #588]	; (80050e0 <_dtoa_r+0x598>)
 8004e94:	2703      	movs	r7, #3
 8004e96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e9a:	f7fb fc47 	bl	800072c <__aeabi_ddiv>
 8004e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ea2:	f004 040f 	and.w	r4, r4, #15
 8004ea6:	4e8e      	ldr	r6, [pc, #568]	; (80050e0 <_dtoa_r+0x598>)
 8004ea8:	b954      	cbnz	r4, 8004ec0 <_dtoa_r+0x378>
 8004eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eb2:	f7fb fc3b 	bl	800072c <__aeabi_ddiv>
 8004eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eba:	e029      	b.n	8004f10 <_dtoa_r+0x3c8>
 8004ebc:	2702      	movs	r7, #2
 8004ebe:	e7f2      	b.n	8004ea6 <_dtoa_r+0x35e>
 8004ec0:	07e1      	lsls	r1, r4, #31
 8004ec2:	d508      	bpl.n	8004ed6 <_dtoa_r+0x38e>
 8004ec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ec8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ecc:	f7fb fb04 	bl	80004d8 <__aeabi_dmul>
 8004ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ed4:	3701      	adds	r7, #1
 8004ed6:	1064      	asrs	r4, r4, #1
 8004ed8:	3608      	adds	r6, #8
 8004eda:	e7e5      	b.n	8004ea8 <_dtoa_r+0x360>
 8004edc:	f000 80a5 	beq.w	800502a <_dtoa_r+0x4e2>
 8004ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ee4:	f1cb 0400 	rsb	r4, fp, #0
 8004ee8:	4b7c      	ldr	r3, [pc, #496]	; (80050dc <_dtoa_r+0x594>)
 8004eea:	f004 020f 	and.w	r2, r4, #15
 8004eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f7fb faef 	bl	80004d8 <__aeabi_dmul>
 8004efa:	2702      	movs	r7, #2
 8004efc:	2300      	movs	r3, #0
 8004efe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f02:	4e77      	ldr	r6, [pc, #476]	; (80050e0 <_dtoa_r+0x598>)
 8004f04:	1124      	asrs	r4, r4, #4
 8004f06:	2c00      	cmp	r4, #0
 8004f08:	f040 8084 	bne.w	8005014 <_dtoa_r+0x4cc>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1d2      	bne.n	8004eb6 <_dtoa_r+0x36e>
 8004f10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8087 	beq.w	800502e <_dtoa_r+0x4e6>
 8004f20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f24:	2200      	movs	r2, #0
 8004f26:	4b6f      	ldr	r3, [pc, #444]	; (80050e4 <_dtoa_r+0x59c>)
 8004f28:	f7fb fd48 	bl	80009bc <__aeabi_dcmplt>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d07e      	beq.n	800502e <_dtoa_r+0x4e6>
 8004f30:	9b08      	ldr	r3, [sp, #32]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d07b      	beq.n	800502e <_dtoa_r+0x4e6>
 8004f36:	9b06      	ldr	r3, [sp, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dd38      	ble.n	8004fae <_dtoa_r+0x466>
 8004f3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f40:	2200      	movs	r2, #0
 8004f42:	4b69      	ldr	r3, [pc, #420]	; (80050e8 <_dtoa_r+0x5a0>)
 8004f44:	f7fb fac8 	bl	80004d8 <__aeabi_dmul>
 8004f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f4c:	9c06      	ldr	r4, [sp, #24]
 8004f4e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004f52:	3701      	adds	r7, #1
 8004f54:	4638      	mov	r0, r7
 8004f56:	f7fb fa55 	bl	8000404 <__aeabi_i2d>
 8004f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f5e:	f7fb fabb 	bl	80004d8 <__aeabi_dmul>
 8004f62:	2200      	movs	r2, #0
 8004f64:	4b61      	ldr	r3, [pc, #388]	; (80050ec <_dtoa_r+0x5a4>)
 8004f66:	f7fb f901 	bl	800016c <__adddf3>
 8004f6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f72:	9611      	str	r6, [sp, #68]	; 0x44
 8004f74:	2c00      	cmp	r4, #0
 8004f76:	d15d      	bne.n	8005034 <_dtoa_r+0x4ec>
 8004f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4b5c      	ldr	r3, [pc, #368]	; (80050f0 <_dtoa_r+0x5a8>)
 8004f80:	f7fb f8f2 	bl	8000168 <__aeabi_dsub>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f8c:	4633      	mov	r3, r6
 8004f8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f90:	f7fb fd32 	bl	80009f8 <__aeabi_dcmpgt>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f040 8295 	bne.w	80054c4 <_dtoa_r+0x97c>
 8004f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fa0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004fa4:	f7fb fd0a 	bl	80009bc <__aeabi_dcmplt>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f040 8289 	bne.w	80054c0 <_dtoa_r+0x978>
 8004fae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004fb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f2c0 8151 	blt.w	8005260 <_dtoa_r+0x718>
 8004fbe:	f1bb 0f0e 	cmp.w	fp, #14
 8004fc2:	f300 814d 	bgt.w	8005260 <_dtoa_r+0x718>
 8004fc6:	4b45      	ldr	r3, [pc, #276]	; (80050dc <_dtoa_r+0x594>)
 8004fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004fcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fd0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004fd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f280 80da 	bge.w	8005190 <_dtoa_r+0x648>
 8004fdc:	9b08      	ldr	r3, [sp, #32]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f300 80d6 	bgt.w	8005190 <_dtoa_r+0x648>
 8004fe4:	f040 826b 	bne.w	80054be <_dtoa_r+0x976>
 8004fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fec:	2200      	movs	r2, #0
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <_dtoa_r+0x5a8>)
 8004ff0:	f7fb fa72 	bl	80004d8 <__aeabi_dmul>
 8004ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ff8:	f7fb fcf4 	bl	80009e4 <__aeabi_dcmpge>
 8004ffc:	9c08      	ldr	r4, [sp, #32]
 8004ffe:	4626      	mov	r6, r4
 8005000:	2800      	cmp	r0, #0
 8005002:	f040 8241 	bne.w	8005488 <_dtoa_r+0x940>
 8005006:	2331      	movs	r3, #49	; 0x31
 8005008:	9f03      	ldr	r7, [sp, #12]
 800500a:	f10b 0b01 	add.w	fp, fp, #1
 800500e:	f807 3b01 	strb.w	r3, [r7], #1
 8005012:	e23d      	b.n	8005490 <_dtoa_r+0x948>
 8005014:	07e2      	lsls	r2, r4, #31
 8005016:	d505      	bpl.n	8005024 <_dtoa_r+0x4dc>
 8005018:	e9d6 2300 	ldrd	r2, r3, [r6]
 800501c:	f7fb fa5c 	bl	80004d8 <__aeabi_dmul>
 8005020:	2301      	movs	r3, #1
 8005022:	3701      	adds	r7, #1
 8005024:	1064      	asrs	r4, r4, #1
 8005026:	3608      	adds	r6, #8
 8005028:	e76d      	b.n	8004f06 <_dtoa_r+0x3be>
 800502a:	2702      	movs	r7, #2
 800502c:	e770      	b.n	8004f10 <_dtoa_r+0x3c8>
 800502e:	46d8      	mov	r8, fp
 8005030:	9c08      	ldr	r4, [sp, #32]
 8005032:	e78f      	b.n	8004f54 <_dtoa_r+0x40c>
 8005034:	9903      	ldr	r1, [sp, #12]
 8005036:	4b29      	ldr	r3, [pc, #164]	; (80050dc <_dtoa_r+0x594>)
 8005038:	4421      	add	r1, r4
 800503a:	9112      	str	r1, [sp, #72]	; 0x48
 800503c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800503e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005042:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005046:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800504a:	2900      	cmp	r1, #0
 800504c:	d054      	beq.n	80050f8 <_dtoa_r+0x5b0>
 800504e:	2000      	movs	r0, #0
 8005050:	4928      	ldr	r1, [pc, #160]	; (80050f4 <_dtoa_r+0x5ac>)
 8005052:	f7fb fb6b 	bl	800072c <__aeabi_ddiv>
 8005056:	463b      	mov	r3, r7
 8005058:	4632      	mov	r2, r6
 800505a:	f7fb f885 	bl	8000168 <__aeabi_dsub>
 800505e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005062:	9f03      	ldr	r7, [sp, #12]
 8005064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005068:	f7fb fce6 	bl	8000a38 <__aeabi_d2iz>
 800506c:	4604      	mov	r4, r0
 800506e:	f7fb f9c9 	bl	8000404 <__aeabi_i2d>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800507a:	f7fb f875 	bl	8000168 <__aeabi_dsub>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	3430      	adds	r4, #48	; 0x30
 8005084:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800508c:	f807 4b01 	strb.w	r4, [r7], #1
 8005090:	f7fb fc94 	bl	80009bc <__aeabi_dcmplt>
 8005094:	2800      	cmp	r0, #0
 8005096:	d173      	bne.n	8005180 <_dtoa_r+0x638>
 8005098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800509c:	2000      	movs	r0, #0
 800509e:	4911      	ldr	r1, [pc, #68]	; (80050e4 <_dtoa_r+0x59c>)
 80050a0:	f7fb f862 	bl	8000168 <__aeabi_dsub>
 80050a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050a8:	f7fb fc88 	bl	80009bc <__aeabi_dcmplt>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f040 80b6 	bne.w	800521e <_dtoa_r+0x6d6>
 80050b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050b4:	429f      	cmp	r7, r3
 80050b6:	f43f af7a 	beq.w	8004fae <_dtoa_r+0x466>
 80050ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050be:	2200      	movs	r2, #0
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <_dtoa_r+0x5a0>)
 80050c2:	f7fb fa09 	bl	80004d8 <__aeabi_dmul>
 80050c6:	2200      	movs	r2, #0
 80050c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <_dtoa_r+0x5a0>)
 80050d2:	f7fb fa01 	bl	80004d8 <__aeabi_dmul>
 80050d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050da:	e7c3      	b.n	8005064 <_dtoa_r+0x51c>
 80050dc:	08006940 	.word	0x08006940
 80050e0:	08006918 	.word	0x08006918
 80050e4:	3ff00000 	.word	0x3ff00000
 80050e8:	40240000 	.word	0x40240000
 80050ec:	401c0000 	.word	0x401c0000
 80050f0:	40140000 	.word	0x40140000
 80050f4:	3fe00000 	.word	0x3fe00000
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb f9ec 	bl	80004d8 <__aeabi_dmul>
 8005100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005102:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005106:	9c03      	ldr	r4, [sp, #12]
 8005108:	9314      	str	r3, [sp, #80]	; 0x50
 800510a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800510e:	f7fb fc93 	bl	8000a38 <__aeabi_d2iz>
 8005112:	9015      	str	r0, [sp, #84]	; 0x54
 8005114:	f7fb f976 	bl	8000404 <__aeabi_i2d>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005120:	f7fb f822 	bl	8000168 <__aeabi_dsub>
 8005124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005126:	4606      	mov	r6, r0
 8005128:	3330      	adds	r3, #48	; 0x30
 800512a:	f804 3b01 	strb.w	r3, [r4], #1
 800512e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005130:	460f      	mov	r7, r1
 8005132:	429c      	cmp	r4, r3
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	d124      	bne.n	8005184 <_dtoa_r+0x63c>
 800513a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800513e:	4baf      	ldr	r3, [pc, #700]	; (80053fc <_dtoa_r+0x8b4>)
 8005140:	f7fb f814 	bl	800016c <__adddf3>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4630      	mov	r0, r6
 800514a:	4639      	mov	r1, r7
 800514c:	f7fb fc54 	bl	80009f8 <__aeabi_dcmpgt>
 8005150:	2800      	cmp	r0, #0
 8005152:	d163      	bne.n	800521c <_dtoa_r+0x6d4>
 8005154:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005158:	2000      	movs	r0, #0
 800515a:	49a8      	ldr	r1, [pc, #672]	; (80053fc <_dtoa_r+0x8b4>)
 800515c:	f7fb f804 	bl	8000168 <__aeabi_dsub>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4630      	mov	r0, r6
 8005166:	4639      	mov	r1, r7
 8005168:	f7fb fc28 	bl	80009bc <__aeabi_dcmplt>
 800516c:	2800      	cmp	r0, #0
 800516e:	f43f af1e 	beq.w	8004fae <_dtoa_r+0x466>
 8005172:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005174:	1e7b      	subs	r3, r7, #1
 8005176:	9314      	str	r3, [sp, #80]	; 0x50
 8005178:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800517c:	2b30      	cmp	r3, #48	; 0x30
 800517e:	d0f8      	beq.n	8005172 <_dtoa_r+0x62a>
 8005180:	46c3      	mov	fp, r8
 8005182:	e03b      	b.n	80051fc <_dtoa_r+0x6b4>
 8005184:	4b9e      	ldr	r3, [pc, #632]	; (8005400 <_dtoa_r+0x8b8>)
 8005186:	f7fb f9a7 	bl	80004d8 <__aeabi_dmul>
 800518a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800518e:	e7bc      	b.n	800510a <_dtoa_r+0x5c2>
 8005190:	9f03      	ldr	r7, [sp, #12]
 8005192:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800519a:	4640      	mov	r0, r8
 800519c:	4649      	mov	r1, r9
 800519e:	f7fb fac5 	bl	800072c <__aeabi_ddiv>
 80051a2:	f7fb fc49 	bl	8000a38 <__aeabi_d2iz>
 80051a6:	4604      	mov	r4, r0
 80051a8:	f7fb f92c 	bl	8000404 <__aeabi_i2d>
 80051ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051b0:	f7fb f992 	bl	80004d8 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4640      	mov	r0, r8
 80051ba:	4649      	mov	r1, r9
 80051bc:	f7fa ffd4 	bl	8000168 <__aeabi_dsub>
 80051c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80051c4:	f807 6b01 	strb.w	r6, [r7], #1
 80051c8:	9e03      	ldr	r6, [sp, #12]
 80051ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80051ce:	1bbe      	subs	r6, r7, r6
 80051d0:	45b4      	cmp	ip, r6
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	d136      	bne.n	8005246 <_dtoa_r+0x6fe>
 80051d8:	f7fa ffc8 	bl	800016c <__adddf3>
 80051dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051e0:	4680      	mov	r8, r0
 80051e2:	4689      	mov	r9, r1
 80051e4:	f7fb fc08 	bl	80009f8 <__aeabi_dcmpgt>
 80051e8:	bb58      	cbnz	r0, 8005242 <_dtoa_r+0x6fa>
 80051ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051ee:	4640      	mov	r0, r8
 80051f0:	4649      	mov	r1, r9
 80051f2:	f7fb fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80051f6:	b108      	cbz	r0, 80051fc <_dtoa_r+0x6b4>
 80051f8:	07e3      	lsls	r3, r4, #31
 80051fa:	d422      	bmi.n	8005242 <_dtoa_r+0x6fa>
 80051fc:	4651      	mov	r1, sl
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 fbc2 	bl	8005988 <_Bfree>
 8005204:	2300      	movs	r3, #0
 8005206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005208:	703b      	strb	r3, [r7, #0]
 800520a:	f10b 0301 	add.w	r3, fp, #1
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005212:	2b00      	cmp	r3, #0
 8005214:	f43f ace6 	beq.w	8004be4 <_dtoa_r+0x9c>
 8005218:	601f      	str	r7, [r3, #0]
 800521a:	e4e3      	b.n	8004be4 <_dtoa_r+0x9c>
 800521c:	4627      	mov	r7, r4
 800521e:	463b      	mov	r3, r7
 8005220:	461f      	mov	r7, r3
 8005222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005226:	2a39      	cmp	r2, #57	; 0x39
 8005228:	d107      	bne.n	800523a <_dtoa_r+0x6f2>
 800522a:	9a03      	ldr	r2, [sp, #12]
 800522c:	429a      	cmp	r2, r3
 800522e:	d1f7      	bne.n	8005220 <_dtoa_r+0x6d8>
 8005230:	2230      	movs	r2, #48	; 0x30
 8005232:	9903      	ldr	r1, [sp, #12]
 8005234:	f108 0801 	add.w	r8, r8, #1
 8005238:	700a      	strb	r2, [r1, #0]
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	3201      	adds	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e79e      	b.n	8005180 <_dtoa_r+0x638>
 8005242:	46d8      	mov	r8, fp
 8005244:	e7eb      	b.n	800521e <_dtoa_r+0x6d6>
 8005246:	2200      	movs	r2, #0
 8005248:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <_dtoa_r+0x8b8>)
 800524a:	f7fb f945 	bl	80004d8 <__aeabi_dmul>
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	4680      	mov	r8, r0
 8005254:	4689      	mov	r9, r1
 8005256:	f7fb fba7 	bl	80009a8 <__aeabi_dcmpeq>
 800525a:	2800      	cmp	r0, #0
 800525c:	d09b      	beq.n	8005196 <_dtoa_r+0x64e>
 800525e:	e7cd      	b.n	80051fc <_dtoa_r+0x6b4>
 8005260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005262:	2a00      	cmp	r2, #0
 8005264:	f000 80c4 	beq.w	80053f0 <_dtoa_r+0x8a8>
 8005268:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800526a:	2a01      	cmp	r2, #1
 800526c:	f300 80a8 	bgt.w	80053c0 <_dtoa_r+0x878>
 8005270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005272:	2a00      	cmp	r2, #0
 8005274:	f000 80a0 	beq.w	80053b8 <_dtoa_r+0x870>
 8005278:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800527c:	464f      	mov	r7, r9
 800527e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005282:	2101      	movs	r1, #1
 8005284:	441a      	add	r2, r3
 8005286:	4628      	mov	r0, r5
 8005288:	4499      	add	r9, r3
 800528a:	9209      	str	r2, [sp, #36]	; 0x24
 800528c:	f000 fc32 	bl	8005af4 <__i2b>
 8005290:	4606      	mov	r6, r0
 8005292:	b15f      	cbz	r7, 80052ac <_dtoa_r+0x764>
 8005294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	dd08      	ble.n	80052ac <_dtoa_r+0x764>
 800529a:	42bb      	cmp	r3, r7
 800529c:	bfa8      	it	ge
 800529e:	463b      	movge	r3, r7
 80052a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052a2:	eba9 0903 	sub.w	r9, r9, r3
 80052a6:	1aff      	subs	r7, r7, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	9309      	str	r3, [sp, #36]	; 0x24
 80052ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ae:	b1f3      	cbz	r3, 80052ee <_dtoa_r+0x7a6>
 80052b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80a0 	beq.w	80053f8 <_dtoa_r+0x8b0>
 80052b8:	2c00      	cmp	r4, #0
 80052ba:	dd10      	ble.n	80052de <_dtoa_r+0x796>
 80052bc:	4631      	mov	r1, r6
 80052be:	4622      	mov	r2, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 fcd5 	bl	8005c70 <__pow5mult>
 80052c6:	4652      	mov	r2, sl
 80052c8:	4601      	mov	r1, r0
 80052ca:	4606      	mov	r6, r0
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fc27 	bl	8005b20 <__multiply>
 80052d2:	4680      	mov	r8, r0
 80052d4:	4651      	mov	r1, sl
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fb56 	bl	8005988 <_Bfree>
 80052dc:	46c2      	mov	sl, r8
 80052de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e0:	1b1a      	subs	r2, r3, r4
 80052e2:	d004      	beq.n	80052ee <_dtoa_r+0x7a6>
 80052e4:	4651      	mov	r1, sl
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 fcc2 	bl	8005c70 <__pow5mult>
 80052ec:	4682      	mov	sl, r0
 80052ee:	2101      	movs	r1, #1
 80052f0:	4628      	mov	r0, r5
 80052f2:	f000 fbff 	bl	8005af4 <__i2b>
 80052f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f8:	4604      	mov	r4, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f340 8082 	ble.w	8005404 <_dtoa_r+0x8bc>
 8005300:	461a      	mov	r2, r3
 8005302:	4601      	mov	r1, r0
 8005304:	4628      	mov	r0, r5
 8005306:	f000 fcb3 	bl	8005c70 <__pow5mult>
 800530a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800530c:	4604      	mov	r4, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	dd7b      	ble.n	800540a <_dtoa_r+0x8c2>
 8005312:	f04f 0800 	mov.w	r8, #0
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800531c:	6918      	ldr	r0, [r3, #16]
 800531e:	f000 fb9b 	bl	8005a58 <__hi0bits>
 8005322:	f1c0 0020 	rsb	r0, r0, #32
 8005326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005328:	4418      	add	r0, r3
 800532a:	f010 001f 	ands.w	r0, r0, #31
 800532e:	f000 8092 	beq.w	8005456 <_dtoa_r+0x90e>
 8005332:	f1c0 0320 	rsb	r3, r0, #32
 8005336:	2b04      	cmp	r3, #4
 8005338:	f340 8085 	ble.w	8005446 <_dtoa_r+0x8fe>
 800533c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533e:	f1c0 001c 	rsb	r0, r0, #28
 8005342:	4403      	add	r3, r0
 8005344:	4481      	add	r9, r0
 8005346:	4407      	add	r7, r0
 8005348:	9309      	str	r3, [sp, #36]	; 0x24
 800534a:	f1b9 0f00 	cmp.w	r9, #0
 800534e:	dd05      	ble.n	800535c <_dtoa_r+0x814>
 8005350:	4651      	mov	r1, sl
 8005352:	464a      	mov	r2, r9
 8005354:	4628      	mov	r0, r5
 8005356:	f000 fce5 	bl	8005d24 <__lshift>
 800535a:	4682      	mov	sl, r0
 800535c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	dd05      	ble.n	800536e <_dtoa_r+0x826>
 8005362:	4621      	mov	r1, r4
 8005364:	461a      	mov	r2, r3
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fcdc 	bl	8005d24 <__lshift>
 800536c:	4604      	mov	r4, r0
 800536e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d072      	beq.n	800545a <_dtoa_r+0x912>
 8005374:	4621      	mov	r1, r4
 8005376:	4650      	mov	r0, sl
 8005378:	f000 fd40 	bl	8005dfc <__mcmp>
 800537c:	2800      	cmp	r0, #0
 800537e:	da6c      	bge.n	800545a <_dtoa_r+0x912>
 8005380:	2300      	movs	r3, #0
 8005382:	4651      	mov	r1, sl
 8005384:	220a      	movs	r2, #10
 8005386:	4628      	mov	r0, r5
 8005388:	f000 fb20 	bl	80059cc <__multadd>
 800538c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538e:	4682      	mov	sl, r0
 8005390:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 81ac 	beq.w	80056f2 <_dtoa_r+0xbaa>
 800539a:	2300      	movs	r3, #0
 800539c:	4631      	mov	r1, r6
 800539e:	220a      	movs	r2, #10
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fb13 	bl	80059cc <__multadd>
 80053a6:	9b06      	ldr	r3, [sp, #24]
 80053a8:	4606      	mov	r6, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f300 8093 	bgt.w	80054d6 <_dtoa_r+0x98e>
 80053b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	dc59      	bgt.n	800546a <_dtoa_r+0x922>
 80053b6:	e08e      	b.n	80054d6 <_dtoa_r+0x98e>
 80053b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053be:	e75d      	b.n	800527c <_dtoa_r+0x734>
 80053c0:	9b08      	ldr	r3, [sp, #32]
 80053c2:	1e5c      	subs	r4, r3, #1
 80053c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	bfbf      	itttt	lt
 80053ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80053cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80053ce:	1ae3      	sublt	r3, r4, r3
 80053d0:	18d2      	addlt	r2, r2, r3
 80053d2:	bfa8      	it	ge
 80053d4:	1b1c      	subge	r4, r3, r4
 80053d6:	9b08      	ldr	r3, [sp, #32]
 80053d8:	bfbe      	ittt	lt
 80053da:	940a      	strlt	r4, [sp, #40]	; 0x28
 80053dc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80053de:	2400      	movlt	r4, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bfb5      	itete	lt
 80053e4:	eba9 0703 	sublt.w	r7, r9, r3
 80053e8:	464f      	movge	r7, r9
 80053ea:	2300      	movlt	r3, #0
 80053ec:	9b08      	ldrge	r3, [sp, #32]
 80053ee:	e747      	b.n	8005280 <_dtoa_r+0x738>
 80053f0:	464f      	mov	r7, r9
 80053f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80053f6:	e74c      	b.n	8005292 <_dtoa_r+0x74a>
 80053f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053fa:	e773      	b.n	80052e4 <_dtoa_r+0x79c>
 80053fc:	3fe00000 	.word	0x3fe00000
 8005400:	40240000 	.word	0x40240000
 8005404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005406:	2b01      	cmp	r3, #1
 8005408:	dc18      	bgt.n	800543c <_dtoa_r+0x8f4>
 800540a:	9b04      	ldr	r3, [sp, #16]
 800540c:	b9b3      	cbnz	r3, 800543c <_dtoa_r+0x8f4>
 800540e:	9b05      	ldr	r3, [sp, #20]
 8005410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005414:	b993      	cbnz	r3, 800543c <_dtoa_r+0x8f4>
 8005416:	9b05      	ldr	r3, [sp, #20]
 8005418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800541c:	0d1b      	lsrs	r3, r3, #20
 800541e:	051b      	lsls	r3, r3, #20
 8005420:	b17b      	cbz	r3, 8005442 <_dtoa_r+0x8fa>
 8005422:	f04f 0801 	mov.w	r8, #1
 8005426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005428:	f109 0901 	add.w	r9, r9, #1
 800542c:	3301      	adds	r3, #1
 800542e:	9309      	str	r3, [sp, #36]	; 0x24
 8005430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005432:	2b00      	cmp	r3, #0
 8005434:	f47f af6f 	bne.w	8005316 <_dtoa_r+0x7ce>
 8005438:	2001      	movs	r0, #1
 800543a:	e774      	b.n	8005326 <_dtoa_r+0x7de>
 800543c:	f04f 0800 	mov.w	r8, #0
 8005440:	e7f6      	b.n	8005430 <_dtoa_r+0x8e8>
 8005442:	4698      	mov	r8, r3
 8005444:	e7f4      	b.n	8005430 <_dtoa_r+0x8e8>
 8005446:	d080      	beq.n	800534a <_dtoa_r+0x802>
 8005448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800544a:	331c      	adds	r3, #28
 800544c:	441a      	add	r2, r3
 800544e:	4499      	add	r9, r3
 8005450:	441f      	add	r7, r3
 8005452:	9209      	str	r2, [sp, #36]	; 0x24
 8005454:	e779      	b.n	800534a <_dtoa_r+0x802>
 8005456:	4603      	mov	r3, r0
 8005458:	e7f6      	b.n	8005448 <_dtoa_r+0x900>
 800545a:	9b08      	ldr	r3, [sp, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dc34      	bgt.n	80054ca <_dtoa_r+0x982>
 8005460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005462:	2b02      	cmp	r3, #2
 8005464:	dd31      	ble.n	80054ca <_dtoa_r+0x982>
 8005466:	9b08      	ldr	r3, [sp, #32]
 8005468:	9306      	str	r3, [sp, #24]
 800546a:	9b06      	ldr	r3, [sp, #24]
 800546c:	b963      	cbnz	r3, 8005488 <_dtoa_r+0x940>
 800546e:	4621      	mov	r1, r4
 8005470:	2205      	movs	r2, #5
 8005472:	4628      	mov	r0, r5
 8005474:	f000 faaa 	bl	80059cc <__multadd>
 8005478:	4601      	mov	r1, r0
 800547a:	4604      	mov	r4, r0
 800547c:	4650      	mov	r0, sl
 800547e:	f000 fcbd 	bl	8005dfc <__mcmp>
 8005482:	2800      	cmp	r0, #0
 8005484:	f73f adbf 	bgt.w	8005006 <_dtoa_r+0x4be>
 8005488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800548a:	9f03      	ldr	r7, [sp, #12]
 800548c:	ea6f 0b03 	mvn.w	fp, r3
 8005490:	f04f 0800 	mov.w	r8, #0
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 fa76 	bl	8005988 <_Bfree>
 800549c:	2e00      	cmp	r6, #0
 800549e:	f43f aead 	beq.w	80051fc <_dtoa_r+0x6b4>
 80054a2:	f1b8 0f00 	cmp.w	r8, #0
 80054a6:	d005      	beq.n	80054b4 <_dtoa_r+0x96c>
 80054a8:	45b0      	cmp	r8, r6
 80054aa:	d003      	beq.n	80054b4 <_dtoa_r+0x96c>
 80054ac:	4641      	mov	r1, r8
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fa6a 	bl	8005988 <_Bfree>
 80054b4:	4631      	mov	r1, r6
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 fa66 	bl	8005988 <_Bfree>
 80054bc:	e69e      	b.n	80051fc <_dtoa_r+0x6b4>
 80054be:	2400      	movs	r4, #0
 80054c0:	4626      	mov	r6, r4
 80054c2:	e7e1      	b.n	8005488 <_dtoa_r+0x940>
 80054c4:	46c3      	mov	fp, r8
 80054c6:	4626      	mov	r6, r4
 80054c8:	e59d      	b.n	8005006 <_dtoa_r+0x4be>
 80054ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80c8 	beq.w	8005662 <_dtoa_r+0xb1a>
 80054d2:	9b08      	ldr	r3, [sp, #32]
 80054d4:	9306      	str	r3, [sp, #24]
 80054d6:	2f00      	cmp	r7, #0
 80054d8:	dd05      	ble.n	80054e6 <_dtoa_r+0x99e>
 80054da:	4631      	mov	r1, r6
 80054dc:	463a      	mov	r2, r7
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 fc20 	bl	8005d24 <__lshift>
 80054e4:	4606      	mov	r6, r0
 80054e6:	f1b8 0f00 	cmp.w	r8, #0
 80054ea:	d05b      	beq.n	80055a4 <_dtoa_r+0xa5c>
 80054ec:	4628      	mov	r0, r5
 80054ee:	6871      	ldr	r1, [r6, #4]
 80054f0:	f000 fa0a 	bl	8005908 <_Balloc>
 80054f4:	4607      	mov	r7, r0
 80054f6:	b928      	cbnz	r0, 8005504 <_dtoa_r+0x9bc>
 80054f8:	4602      	mov	r2, r0
 80054fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80054fe:	4b81      	ldr	r3, [pc, #516]	; (8005704 <_dtoa_r+0xbbc>)
 8005500:	f7ff bb36 	b.w	8004b70 <_dtoa_r+0x28>
 8005504:	6932      	ldr	r2, [r6, #16]
 8005506:	f106 010c 	add.w	r1, r6, #12
 800550a:	3202      	adds	r2, #2
 800550c:	0092      	lsls	r2, r2, #2
 800550e:	300c      	adds	r0, #12
 8005510:	f001 f804 	bl	800651c <memcpy>
 8005514:	2201      	movs	r2, #1
 8005516:	4639      	mov	r1, r7
 8005518:	4628      	mov	r0, r5
 800551a:	f000 fc03 	bl	8005d24 <__lshift>
 800551e:	46b0      	mov	r8, r6
 8005520:	4606      	mov	r6, r0
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	9a03      	ldr	r2, [sp, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	9308      	str	r3, [sp, #32]
 800552a:	9b06      	ldr	r3, [sp, #24]
 800552c:	4413      	add	r3, r2
 800552e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005530:	9b04      	ldr	r3, [sp, #16]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	930a      	str	r3, [sp, #40]	; 0x28
 8005538:	9b08      	ldr	r3, [sp, #32]
 800553a:	4621      	mov	r1, r4
 800553c:	3b01      	subs	r3, #1
 800553e:	4650      	mov	r0, sl
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	f7ff fa75 	bl	8004a30 <quorem>
 8005546:	4641      	mov	r1, r8
 8005548:	9006      	str	r0, [sp, #24]
 800554a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800554e:	4650      	mov	r0, sl
 8005550:	f000 fc54 	bl	8005dfc <__mcmp>
 8005554:	4632      	mov	r2, r6
 8005556:	9009      	str	r0, [sp, #36]	; 0x24
 8005558:	4621      	mov	r1, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fc6a 	bl	8005e34 <__mdiff>
 8005560:	68c2      	ldr	r2, [r0, #12]
 8005562:	4607      	mov	r7, r0
 8005564:	bb02      	cbnz	r2, 80055a8 <_dtoa_r+0xa60>
 8005566:	4601      	mov	r1, r0
 8005568:	4650      	mov	r0, sl
 800556a:	f000 fc47 	bl	8005dfc <__mcmp>
 800556e:	4602      	mov	r2, r0
 8005570:	4639      	mov	r1, r7
 8005572:	4628      	mov	r0, r5
 8005574:	920c      	str	r2, [sp, #48]	; 0x30
 8005576:	f000 fa07 	bl	8005988 <_Bfree>
 800557a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800557c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800557e:	9f08      	ldr	r7, [sp, #32]
 8005580:	ea43 0102 	orr.w	r1, r3, r2
 8005584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005586:	4319      	orrs	r1, r3
 8005588:	d110      	bne.n	80055ac <_dtoa_r+0xa64>
 800558a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800558e:	d029      	beq.n	80055e4 <_dtoa_r+0xa9c>
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	dd02      	ble.n	800559c <_dtoa_r+0xa54>
 8005596:	9b06      	ldr	r3, [sp, #24]
 8005598:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800559c:	9b04      	ldr	r3, [sp, #16]
 800559e:	f883 9000 	strb.w	r9, [r3]
 80055a2:	e777      	b.n	8005494 <_dtoa_r+0x94c>
 80055a4:	4630      	mov	r0, r6
 80055a6:	e7ba      	b.n	800551e <_dtoa_r+0x9d6>
 80055a8:	2201      	movs	r2, #1
 80055aa:	e7e1      	b.n	8005570 <_dtoa_r+0xa28>
 80055ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	db04      	blt.n	80055bc <_dtoa_r+0xa74>
 80055b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80055b4:	430b      	orrs	r3, r1
 80055b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055b8:	430b      	orrs	r3, r1
 80055ba:	d120      	bne.n	80055fe <_dtoa_r+0xab6>
 80055bc:	2a00      	cmp	r2, #0
 80055be:	dded      	ble.n	800559c <_dtoa_r+0xa54>
 80055c0:	4651      	mov	r1, sl
 80055c2:	2201      	movs	r2, #1
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 fbad 	bl	8005d24 <__lshift>
 80055ca:	4621      	mov	r1, r4
 80055cc:	4682      	mov	sl, r0
 80055ce:	f000 fc15 	bl	8005dfc <__mcmp>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	dc03      	bgt.n	80055de <_dtoa_r+0xa96>
 80055d6:	d1e1      	bne.n	800559c <_dtoa_r+0xa54>
 80055d8:	f019 0f01 	tst.w	r9, #1
 80055dc:	d0de      	beq.n	800559c <_dtoa_r+0xa54>
 80055de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055e2:	d1d8      	bne.n	8005596 <_dtoa_r+0xa4e>
 80055e4:	2339      	movs	r3, #57	; 0x39
 80055e6:	9a04      	ldr	r2, [sp, #16]
 80055e8:	7013      	strb	r3, [r2, #0]
 80055ea:	463b      	mov	r3, r7
 80055ec:	461f      	mov	r7, r3
 80055ee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	2a39      	cmp	r2, #57	; 0x39
 80055f6:	d06b      	beq.n	80056d0 <_dtoa_r+0xb88>
 80055f8:	3201      	adds	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e74a      	b.n	8005494 <_dtoa_r+0x94c>
 80055fe:	2a00      	cmp	r2, #0
 8005600:	dd07      	ble.n	8005612 <_dtoa_r+0xaca>
 8005602:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005606:	d0ed      	beq.n	80055e4 <_dtoa_r+0xa9c>
 8005608:	9a04      	ldr	r2, [sp, #16]
 800560a:	f109 0301 	add.w	r3, r9, #1
 800560e:	7013      	strb	r3, [r2, #0]
 8005610:	e740      	b.n	8005494 <_dtoa_r+0x94c>
 8005612:	9b08      	ldr	r3, [sp, #32]
 8005614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005616:	f803 9c01 	strb.w	r9, [r3, #-1]
 800561a:	4293      	cmp	r3, r2
 800561c:	d042      	beq.n	80056a4 <_dtoa_r+0xb5c>
 800561e:	4651      	mov	r1, sl
 8005620:	2300      	movs	r3, #0
 8005622:	220a      	movs	r2, #10
 8005624:	4628      	mov	r0, r5
 8005626:	f000 f9d1 	bl	80059cc <__multadd>
 800562a:	45b0      	cmp	r8, r6
 800562c:	4682      	mov	sl, r0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	f04f 020a 	mov.w	r2, #10
 8005636:	4641      	mov	r1, r8
 8005638:	4628      	mov	r0, r5
 800563a:	d107      	bne.n	800564c <_dtoa_r+0xb04>
 800563c:	f000 f9c6 	bl	80059cc <__multadd>
 8005640:	4680      	mov	r8, r0
 8005642:	4606      	mov	r6, r0
 8005644:	9b08      	ldr	r3, [sp, #32]
 8005646:	3301      	adds	r3, #1
 8005648:	9308      	str	r3, [sp, #32]
 800564a:	e775      	b.n	8005538 <_dtoa_r+0x9f0>
 800564c:	f000 f9be 	bl	80059cc <__multadd>
 8005650:	4631      	mov	r1, r6
 8005652:	4680      	mov	r8, r0
 8005654:	2300      	movs	r3, #0
 8005656:	220a      	movs	r2, #10
 8005658:	4628      	mov	r0, r5
 800565a:	f000 f9b7 	bl	80059cc <__multadd>
 800565e:	4606      	mov	r6, r0
 8005660:	e7f0      	b.n	8005644 <_dtoa_r+0xafc>
 8005662:	9b08      	ldr	r3, [sp, #32]
 8005664:	9306      	str	r3, [sp, #24]
 8005666:	9f03      	ldr	r7, [sp, #12]
 8005668:	4621      	mov	r1, r4
 800566a:	4650      	mov	r0, sl
 800566c:	f7ff f9e0 	bl	8004a30 <quorem>
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005676:	f807 9b01 	strb.w	r9, [r7], #1
 800567a:	1afa      	subs	r2, r7, r3
 800567c:	9b06      	ldr	r3, [sp, #24]
 800567e:	4293      	cmp	r3, r2
 8005680:	dd07      	ble.n	8005692 <_dtoa_r+0xb4a>
 8005682:	4651      	mov	r1, sl
 8005684:	2300      	movs	r3, #0
 8005686:	220a      	movs	r2, #10
 8005688:	4628      	mov	r0, r5
 800568a:	f000 f99f 	bl	80059cc <__multadd>
 800568e:	4682      	mov	sl, r0
 8005690:	e7ea      	b.n	8005668 <_dtoa_r+0xb20>
 8005692:	9b06      	ldr	r3, [sp, #24]
 8005694:	f04f 0800 	mov.w	r8, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	bfcc      	ite	gt
 800569c:	461f      	movgt	r7, r3
 800569e:	2701      	movle	r7, #1
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	441f      	add	r7, r3
 80056a4:	4651      	mov	r1, sl
 80056a6:	2201      	movs	r2, #1
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 fb3b 	bl	8005d24 <__lshift>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4682      	mov	sl, r0
 80056b2:	f000 fba3 	bl	8005dfc <__mcmp>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	dc97      	bgt.n	80055ea <_dtoa_r+0xaa2>
 80056ba:	d102      	bne.n	80056c2 <_dtoa_r+0xb7a>
 80056bc:	f019 0f01 	tst.w	r9, #1
 80056c0:	d193      	bne.n	80055ea <_dtoa_r+0xaa2>
 80056c2:	463b      	mov	r3, r7
 80056c4:	461f      	mov	r7, r3
 80056c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056ca:	2a30      	cmp	r2, #48	; 0x30
 80056cc:	d0fa      	beq.n	80056c4 <_dtoa_r+0xb7c>
 80056ce:	e6e1      	b.n	8005494 <_dtoa_r+0x94c>
 80056d0:	9a03      	ldr	r2, [sp, #12]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d18a      	bne.n	80055ec <_dtoa_r+0xaa4>
 80056d6:	2331      	movs	r3, #49	; 0x31
 80056d8:	f10b 0b01 	add.w	fp, fp, #1
 80056dc:	e797      	b.n	800560e <_dtoa_r+0xac6>
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <_dtoa_r+0xbc0>)
 80056e0:	f7ff ba9f 	b.w	8004c22 <_dtoa_r+0xda>
 80056e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f47f aa77 	bne.w	8004bda <_dtoa_r+0x92>
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <_dtoa_r+0xbc4>)
 80056ee:	f7ff ba98 	b.w	8004c22 <_dtoa_r+0xda>
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	dcb6      	bgt.n	8005666 <_dtoa_r+0xb1e>
 80056f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	f73f aeb5 	bgt.w	800546a <_dtoa_r+0x922>
 8005700:	e7b1      	b.n	8005666 <_dtoa_r+0xb1e>
 8005702:	bf00      	nop
 8005704:	080068ae 	.word	0x080068ae
 8005708:	0800680e 	.word	0x0800680e
 800570c:	08006832 	.word	0x08006832

08005710 <_free_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4605      	mov	r5, r0
 8005714:	2900      	cmp	r1, #0
 8005716:	d040      	beq.n	800579a <_free_r+0x8a>
 8005718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800571c:	1f0c      	subs	r4, r1, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	bfb8      	it	lt
 8005722:	18e4      	addlt	r4, r4, r3
 8005724:	f000 f8e4 	bl	80058f0 <__malloc_lock>
 8005728:	4a1c      	ldr	r2, [pc, #112]	; (800579c <_free_r+0x8c>)
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	b933      	cbnz	r3, 800573c <_free_r+0x2c>
 800572e:	6063      	str	r3, [r4, #4]
 8005730:	6014      	str	r4, [r2, #0]
 8005732:	4628      	mov	r0, r5
 8005734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005738:	f000 b8e0 	b.w	80058fc <__malloc_unlock>
 800573c:	42a3      	cmp	r3, r4
 800573e:	d908      	bls.n	8005752 <_free_r+0x42>
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	1821      	adds	r1, r4, r0
 8005744:	428b      	cmp	r3, r1
 8005746:	bf01      	itttt	eq
 8005748:	6819      	ldreq	r1, [r3, #0]
 800574a:	685b      	ldreq	r3, [r3, #4]
 800574c:	1809      	addeq	r1, r1, r0
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	e7ed      	b.n	800572e <_free_r+0x1e>
 8005752:	461a      	mov	r2, r3
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	b10b      	cbz	r3, 800575c <_free_r+0x4c>
 8005758:	42a3      	cmp	r3, r4
 800575a:	d9fa      	bls.n	8005752 <_free_r+0x42>
 800575c:	6811      	ldr	r1, [r2, #0]
 800575e:	1850      	adds	r0, r2, r1
 8005760:	42a0      	cmp	r0, r4
 8005762:	d10b      	bne.n	800577c <_free_r+0x6c>
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	4401      	add	r1, r0
 8005768:	1850      	adds	r0, r2, r1
 800576a:	4283      	cmp	r3, r0
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	d1e0      	bne.n	8005732 <_free_r+0x22>
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4408      	add	r0, r1
 8005776:	6010      	str	r0, [r2, #0]
 8005778:	6053      	str	r3, [r2, #4]
 800577a:	e7da      	b.n	8005732 <_free_r+0x22>
 800577c:	d902      	bls.n	8005784 <_free_r+0x74>
 800577e:	230c      	movs	r3, #12
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	e7d6      	b.n	8005732 <_free_r+0x22>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	1821      	adds	r1, r4, r0
 8005788:	428b      	cmp	r3, r1
 800578a:	bf01      	itttt	eq
 800578c:	6819      	ldreq	r1, [r3, #0]
 800578e:	685b      	ldreq	r3, [r3, #4]
 8005790:	1809      	addeq	r1, r1, r0
 8005792:	6021      	streq	r1, [r4, #0]
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	6054      	str	r4, [r2, #4]
 8005798:	e7cb      	b.n	8005732 <_free_r+0x22>
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	200004b8 	.word	0x200004b8

080057a0 <malloc>:
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <malloc+0xc>)
 80057a2:	4601      	mov	r1, r0
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f000 b823 	b.w	80057f0 <_malloc_r>
 80057aa:	bf00      	nop
 80057ac:	20000064 	.word	0x20000064

080057b0 <sbrk_aligned>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4e0e      	ldr	r6, [pc, #56]	; (80057ec <sbrk_aligned+0x3c>)
 80057b4:	460c      	mov	r4, r1
 80057b6:	6831      	ldr	r1, [r6, #0]
 80057b8:	4605      	mov	r5, r0
 80057ba:	b911      	cbnz	r1, 80057c2 <sbrk_aligned+0x12>
 80057bc:	f000 fe9e 	bl	80064fc <_sbrk_r>
 80057c0:	6030      	str	r0, [r6, #0]
 80057c2:	4621      	mov	r1, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 fe99 	bl	80064fc <_sbrk_r>
 80057ca:	1c43      	adds	r3, r0, #1
 80057cc:	d00a      	beq.n	80057e4 <sbrk_aligned+0x34>
 80057ce:	1cc4      	adds	r4, r0, #3
 80057d0:	f024 0403 	bic.w	r4, r4, #3
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d007      	beq.n	80057e8 <sbrk_aligned+0x38>
 80057d8:	1a21      	subs	r1, r4, r0
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 fe8e 	bl	80064fc <_sbrk_r>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d101      	bne.n	80057e8 <sbrk_aligned+0x38>
 80057e4:	f04f 34ff 	mov.w	r4, #4294967295
 80057e8:	4620      	mov	r0, r4
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	200004bc 	.word	0x200004bc

080057f0 <_malloc_r>:
 80057f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f4:	1ccd      	adds	r5, r1, #3
 80057f6:	f025 0503 	bic.w	r5, r5, #3
 80057fa:	3508      	adds	r5, #8
 80057fc:	2d0c      	cmp	r5, #12
 80057fe:	bf38      	it	cc
 8005800:	250c      	movcc	r5, #12
 8005802:	2d00      	cmp	r5, #0
 8005804:	4607      	mov	r7, r0
 8005806:	db01      	blt.n	800580c <_malloc_r+0x1c>
 8005808:	42a9      	cmp	r1, r5
 800580a:	d905      	bls.n	8005818 <_malloc_r+0x28>
 800580c:	230c      	movs	r3, #12
 800580e:	2600      	movs	r6, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4630      	mov	r0, r6
 8005814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005818:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058ec <_malloc_r+0xfc>
 800581c:	f000 f868 	bl	80058f0 <__malloc_lock>
 8005820:	f8d8 3000 	ldr.w	r3, [r8]
 8005824:	461c      	mov	r4, r3
 8005826:	bb5c      	cbnz	r4, 8005880 <_malloc_r+0x90>
 8005828:	4629      	mov	r1, r5
 800582a:	4638      	mov	r0, r7
 800582c:	f7ff ffc0 	bl	80057b0 <sbrk_aligned>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	4604      	mov	r4, r0
 8005834:	d155      	bne.n	80058e2 <_malloc_r+0xf2>
 8005836:	f8d8 4000 	ldr.w	r4, [r8]
 800583a:	4626      	mov	r6, r4
 800583c:	2e00      	cmp	r6, #0
 800583e:	d145      	bne.n	80058cc <_malloc_r+0xdc>
 8005840:	2c00      	cmp	r4, #0
 8005842:	d048      	beq.n	80058d6 <_malloc_r+0xe6>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	4631      	mov	r1, r6
 8005848:	4638      	mov	r0, r7
 800584a:	eb04 0903 	add.w	r9, r4, r3
 800584e:	f000 fe55 	bl	80064fc <_sbrk_r>
 8005852:	4581      	cmp	r9, r0
 8005854:	d13f      	bne.n	80058d6 <_malloc_r+0xe6>
 8005856:	6821      	ldr	r1, [r4, #0]
 8005858:	4638      	mov	r0, r7
 800585a:	1a6d      	subs	r5, r5, r1
 800585c:	4629      	mov	r1, r5
 800585e:	f7ff ffa7 	bl	80057b0 <sbrk_aligned>
 8005862:	3001      	adds	r0, #1
 8005864:	d037      	beq.n	80058d6 <_malloc_r+0xe6>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	442b      	add	r3, r5
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	f8d8 3000 	ldr.w	r3, [r8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d038      	beq.n	80058e6 <_malloc_r+0xf6>
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	42a2      	cmp	r2, r4
 8005878:	d12b      	bne.n	80058d2 <_malloc_r+0xe2>
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	e00f      	b.n	80058a0 <_malloc_r+0xb0>
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	1b52      	subs	r2, r2, r5
 8005884:	d41f      	bmi.n	80058c6 <_malloc_r+0xd6>
 8005886:	2a0b      	cmp	r2, #11
 8005888:	d917      	bls.n	80058ba <_malloc_r+0xca>
 800588a:	1961      	adds	r1, r4, r5
 800588c:	42a3      	cmp	r3, r4
 800588e:	6025      	str	r5, [r4, #0]
 8005890:	bf18      	it	ne
 8005892:	6059      	strne	r1, [r3, #4]
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	bf08      	it	eq
 8005898:	f8c8 1000 	streq.w	r1, [r8]
 800589c:	5162      	str	r2, [r4, r5]
 800589e:	604b      	str	r3, [r1, #4]
 80058a0:	4638      	mov	r0, r7
 80058a2:	f104 060b 	add.w	r6, r4, #11
 80058a6:	f000 f829 	bl	80058fc <__malloc_unlock>
 80058aa:	f026 0607 	bic.w	r6, r6, #7
 80058ae:	1d23      	adds	r3, r4, #4
 80058b0:	1af2      	subs	r2, r6, r3
 80058b2:	d0ae      	beq.n	8005812 <_malloc_r+0x22>
 80058b4:	1b9b      	subs	r3, r3, r6
 80058b6:	50a3      	str	r3, [r4, r2]
 80058b8:	e7ab      	b.n	8005812 <_malloc_r+0x22>
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	6862      	ldr	r2, [r4, #4]
 80058be:	d1dd      	bne.n	800587c <_malloc_r+0x8c>
 80058c0:	f8c8 2000 	str.w	r2, [r8]
 80058c4:	e7ec      	b.n	80058a0 <_malloc_r+0xb0>
 80058c6:	4623      	mov	r3, r4
 80058c8:	6864      	ldr	r4, [r4, #4]
 80058ca:	e7ac      	b.n	8005826 <_malloc_r+0x36>
 80058cc:	4634      	mov	r4, r6
 80058ce:	6876      	ldr	r6, [r6, #4]
 80058d0:	e7b4      	b.n	800583c <_malloc_r+0x4c>
 80058d2:	4613      	mov	r3, r2
 80058d4:	e7cc      	b.n	8005870 <_malloc_r+0x80>
 80058d6:	230c      	movs	r3, #12
 80058d8:	4638      	mov	r0, r7
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	f000 f80e 	bl	80058fc <__malloc_unlock>
 80058e0:	e797      	b.n	8005812 <_malloc_r+0x22>
 80058e2:	6025      	str	r5, [r4, #0]
 80058e4:	e7dc      	b.n	80058a0 <_malloc_r+0xb0>
 80058e6:	605b      	str	r3, [r3, #4]
 80058e8:	deff      	udf	#255	; 0xff
 80058ea:	bf00      	nop
 80058ec:	200004b8 	.word	0x200004b8

080058f0 <__malloc_lock>:
 80058f0:	4801      	ldr	r0, [pc, #4]	; (80058f8 <__malloc_lock+0x8>)
 80058f2:	f7ff b88d 	b.w	8004a10 <__retarget_lock_acquire_recursive>
 80058f6:	bf00      	nop
 80058f8:	200004b4 	.word	0x200004b4

080058fc <__malloc_unlock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	; (8005904 <__malloc_unlock+0x8>)
 80058fe:	f7ff b888 	b.w	8004a12 <__retarget_lock_release_recursive>
 8005902:	bf00      	nop
 8005904:	200004b4 	.word	0x200004b4

08005908 <_Balloc>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	69c6      	ldr	r6, [r0, #28]
 800590c:	4604      	mov	r4, r0
 800590e:	460d      	mov	r5, r1
 8005910:	b976      	cbnz	r6, 8005930 <_Balloc+0x28>
 8005912:	2010      	movs	r0, #16
 8005914:	f7ff ff44 	bl	80057a0 <malloc>
 8005918:	4602      	mov	r2, r0
 800591a:	61e0      	str	r0, [r4, #28]
 800591c:	b920      	cbnz	r0, 8005928 <_Balloc+0x20>
 800591e:	216b      	movs	r1, #107	; 0x6b
 8005920:	4b17      	ldr	r3, [pc, #92]	; (8005980 <_Balloc+0x78>)
 8005922:	4818      	ldr	r0, [pc, #96]	; (8005984 <_Balloc+0x7c>)
 8005924:	f000 fe08 	bl	8006538 <__assert_func>
 8005928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800592c:	6006      	str	r6, [r0, #0]
 800592e:	60c6      	str	r6, [r0, #12]
 8005930:	69e6      	ldr	r6, [r4, #28]
 8005932:	68f3      	ldr	r3, [r6, #12]
 8005934:	b183      	cbz	r3, 8005958 <_Balloc+0x50>
 8005936:	69e3      	ldr	r3, [r4, #28]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800593e:	b9b8      	cbnz	r0, 8005970 <_Balloc+0x68>
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f605 	lsl.w	r6, r1, r5
 8005946:	1d72      	adds	r2, r6, #5
 8005948:	4620      	mov	r0, r4
 800594a:	0092      	lsls	r2, r2, #2
 800594c:	f000 fe12 	bl	8006574 <_calloc_r>
 8005950:	b160      	cbz	r0, 800596c <_Balloc+0x64>
 8005952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005956:	e00e      	b.n	8005976 <_Balloc+0x6e>
 8005958:	2221      	movs	r2, #33	; 0x21
 800595a:	2104      	movs	r1, #4
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fe09 	bl	8006574 <_calloc_r>
 8005962:	69e3      	ldr	r3, [r4, #28]
 8005964:	60f0      	str	r0, [r6, #12]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e4      	bne.n	8005936 <_Balloc+0x2e>
 800596c:	2000      	movs	r0, #0
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005976:	2300      	movs	r3, #0
 8005978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800597c:	e7f7      	b.n	800596e <_Balloc+0x66>
 800597e:	bf00      	nop
 8005980:	0800683f 	.word	0x0800683f
 8005984:	080068bf 	.word	0x080068bf

08005988 <_Bfree>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	69c6      	ldr	r6, [r0, #28]
 800598c:	4605      	mov	r5, r0
 800598e:	460c      	mov	r4, r1
 8005990:	b976      	cbnz	r6, 80059b0 <_Bfree+0x28>
 8005992:	2010      	movs	r0, #16
 8005994:	f7ff ff04 	bl	80057a0 <malloc>
 8005998:	4602      	mov	r2, r0
 800599a:	61e8      	str	r0, [r5, #28]
 800599c:	b920      	cbnz	r0, 80059a8 <_Bfree+0x20>
 800599e:	218f      	movs	r1, #143	; 0x8f
 80059a0:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <_Bfree+0x3c>)
 80059a2:	4809      	ldr	r0, [pc, #36]	; (80059c8 <_Bfree+0x40>)
 80059a4:	f000 fdc8 	bl	8006538 <__assert_func>
 80059a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059ac:	6006      	str	r6, [r0, #0]
 80059ae:	60c6      	str	r6, [r0, #12]
 80059b0:	b13c      	cbz	r4, 80059c2 <_Bfree+0x3a>
 80059b2:	69eb      	ldr	r3, [r5, #28]
 80059b4:	6862      	ldr	r2, [r4, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059bc:	6021      	str	r1, [r4, #0]
 80059be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	0800683f 	.word	0x0800683f
 80059c8:	080068bf 	.word	0x080068bf

080059cc <__multadd>:
 80059cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	4607      	mov	r7, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	461e      	mov	r6, r3
 80059d6:	2000      	movs	r0, #0
 80059d8:	690d      	ldr	r5, [r1, #16]
 80059da:	f101 0c14 	add.w	ip, r1, #20
 80059de:	f8dc 3000 	ldr.w	r3, [ip]
 80059e2:	3001      	adds	r0, #1
 80059e4:	b299      	uxth	r1, r3
 80059e6:	fb02 6101 	mla	r1, r2, r1, r6
 80059ea:	0c1e      	lsrs	r6, r3, #16
 80059ec:	0c0b      	lsrs	r3, r1, #16
 80059ee:	fb02 3306 	mla	r3, r2, r6, r3
 80059f2:	b289      	uxth	r1, r1
 80059f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059f8:	4285      	cmp	r5, r0
 80059fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059fe:	f84c 1b04 	str.w	r1, [ip], #4
 8005a02:	dcec      	bgt.n	80059de <__multadd+0x12>
 8005a04:	b30e      	cbz	r6, 8005a4a <__multadd+0x7e>
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc19      	bgt.n	8005a40 <__multadd+0x74>
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4638      	mov	r0, r7
 8005a10:	3101      	adds	r1, #1
 8005a12:	f7ff ff79 	bl	8005908 <_Balloc>
 8005a16:	4680      	mov	r8, r0
 8005a18:	b928      	cbnz	r0, 8005a26 <__multadd+0x5a>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	21ba      	movs	r1, #186	; 0xba
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <__multadd+0x84>)
 8005a20:	480c      	ldr	r0, [pc, #48]	; (8005a54 <__multadd+0x88>)
 8005a22:	f000 fd89 	bl	8006538 <__assert_func>
 8005a26:	6922      	ldr	r2, [r4, #16]
 8005a28:	f104 010c 	add.w	r1, r4, #12
 8005a2c:	3202      	adds	r2, #2
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	300c      	adds	r0, #12
 8005a32:	f000 fd73 	bl	800651c <memcpy>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ffa5 	bl	8005988 <_Bfree>
 8005a3e:	4644      	mov	r4, r8
 8005a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a44:	3501      	adds	r5, #1
 8005a46:	615e      	str	r6, [r3, #20]
 8005a48:	6125      	str	r5, [r4, #16]
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a50:	080068ae 	.word	0x080068ae
 8005a54:	080068bf 	.word	0x080068bf

08005a58 <__hi0bits>:
 8005a58:	0c02      	lsrs	r2, r0, #16
 8005a5a:	0412      	lsls	r2, r2, #16
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	b9ca      	cbnz	r2, 8005a94 <__hi0bits+0x3c>
 8005a60:	0403      	lsls	r3, r0, #16
 8005a62:	2010      	movs	r0, #16
 8005a64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a68:	bf04      	itt	eq
 8005a6a:	021b      	lsleq	r3, r3, #8
 8005a6c:	3008      	addeq	r0, #8
 8005a6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a72:	bf04      	itt	eq
 8005a74:	011b      	lsleq	r3, r3, #4
 8005a76:	3004      	addeq	r0, #4
 8005a78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a7c:	bf04      	itt	eq
 8005a7e:	009b      	lsleq	r3, r3, #2
 8005a80:	3002      	addeq	r0, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	db05      	blt.n	8005a92 <__hi0bits+0x3a>
 8005a86:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a8a:	f100 0001 	add.w	r0, r0, #1
 8005a8e:	bf08      	it	eq
 8005a90:	2020      	moveq	r0, #32
 8005a92:	4770      	bx	lr
 8005a94:	2000      	movs	r0, #0
 8005a96:	e7e5      	b.n	8005a64 <__hi0bits+0xc>

08005a98 <__lo0bits>:
 8005a98:	6803      	ldr	r3, [r0, #0]
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	f013 0007 	ands.w	r0, r3, #7
 8005aa0:	d00b      	beq.n	8005aba <__lo0bits+0x22>
 8005aa2:	07d9      	lsls	r1, r3, #31
 8005aa4:	d421      	bmi.n	8005aea <__lo0bits+0x52>
 8005aa6:	0798      	lsls	r0, r3, #30
 8005aa8:	bf49      	itett	mi
 8005aaa:	085b      	lsrmi	r3, r3, #1
 8005aac:	089b      	lsrpl	r3, r3, #2
 8005aae:	2001      	movmi	r0, #1
 8005ab0:	6013      	strmi	r3, [r2, #0]
 8005ab2:	bf5c      	itt	pl
 8005ab4:	2002      	movpl	r0, #2
 8005ab6:	6013      	strpl	r3, [r2, #0]
 8005ab8:	4770      	bx	lr
 8005aba:	b299      	uxth	r1, r3
 8005abc:	b909      	cbnz	r1, 8005ac2 <__lo0bits+0x2a>
 8005abe:	2010      	movs	r0, #16
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	b2d9      	uxtb	r1, r3
 8005ac4:	b909      	cbnz	r1, 8005aca <__lo0bits+0x32>
 8005ac6:	3008      	adds	r0, #8
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	0719      	lsls	r1, r3, #28
 8005acc:	bf04      	itt	eq
 8005ace:	091b      	lsreq	r3, r3, #4
 8005ad0:	3004      	addeq	r0, #4
 8005ad2:	0799      	lsls	r1, r3, #30
 8005ad4:	bf04      	itt	eq
 8005ad6:	089b      	lsreq	r3, r3, #2
 8005ad8:	3002      	addeq	r0, #2
 8005ada:	07d9      	lsls	r1, r3, #31
 8005adc:	d403      	bmi.n	8005ae6 <__lo0bits+0x4e>
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	f100 0001 	add.w	r0, r0, #1
 8005ae4:	d003      	beq.n	8005aee <__lo0bits+0x56>
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	4770      	bx	lr
 8005aea:	2000      	movs	r0, #0
 8005aec:	4770      	bx	lr
 8005aee:	2020      	movs	r0, #32
 8005af0:	4770      	bx	lr
	...

08005af4 <__i2b>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	460c      	mov	r4, r1
 8005af8:	2101      	movs	r1, #1
 8005afa:	f7ff ff05 	bl	8005908 <_Balloc>
 8005afe:	4602      	mov	r2, r0
 8005b00:	b928      	cbnz	r0, 8005b0e <__i2b+0x1a>
 8005b02:	f240 1145 	movw	r1, #325	; 0x145
 8005b06:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <__i2b+0x24>)
 8005b08:	4804      	ldr	r0, [pc, #16]	; (8005b1c <__i2b+0x28>)
 8005b0a:	f000 fd15 	bl	8006538 <__assert_func>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	6144      	str	r4, [r0, #20]
 8005b12:	6103      	str	r3, [r0, #16]
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	080068ae 	.word	0x080068ae
 8005b1c:	080068bf 	.word	0x080068bf

08005b20 <__multiply>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	4691      	mov	r9, r2
 8005b26:	690a      	ldr	r2, [r1, #16]
 8005b28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bfbe      	ittt	lt
 8005b32:	460b      	movlt	r3, r1
 8005b34:	464c      	movlt	r4, r9
 8005b36:	4699      	movlt	r9, r3
 8005b38:	6927      	ldr	r7, [r4, #16]
 8005b3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	6861      	ldr	r1, [r4, #4]
 8005b42:	eb07 060a 	add.w	r6, r7, sl
 8005b46:	42b3      	cmp	r3, r6
 8005b48:	b085      	sub	sp, #20
 8005b4a:	bfb8      	it	lt
 8005b4c:	3101      	addlt	r1, #1
 8005b4e:	f7ff fedb 	bl	8005908 <_Balloc>
 8005b52:	b930      	cbnz	r0, 8005b62 <__multiply+0x42>
 8005b54:	4602      	mov	r2, r0
 8005b56:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005b5a:	4b43      	ldr	r3, [pc, #268]	; (8005c68 <__multiply+0x148>)
 8005b5c:	4843      	ldr	r0, [pc, #268]	; (8005c6c <__multiply+0x14c>)
 8005b5e:	f000 fceb 	bl	8006538 <__assert_func>
 8005b62:	f100 0514 	add.w	r5, r0, #20
 8005b66:	462b      	mov	r3, r5
 8005b68:	2200      	movs	r2, #0
 8005b6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b6e:	4543      	cmp	r3, r8
 8005b70:	d321      	bcc.n	8005bb6 <__multiply+0x96>
 8005b72:	f104 0314 	add.w	r3, r4, #20
 8005b76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b7a:	f109 0314 	add.w	r3, r9, #20
 8005b7e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b82:	9202      	str	r2, [sp, #8]
 8005b84:	1b3a      	subs	r2, r7, r4
 8005b86:	3a15      	subs	r2, #21
 8005b88:	f022 0203 	bic.w	r2, r2, #3
 8005b8c:	3204      	adds	r2, #4
 8005b8e:	f104 0115 	add.w	r1, r4, #21
 8005b92:	428f      	cmp	r7, r1
 8005b94:	bf38      	it	cc
 8005b96:	2204      	movcc	r2, #4
 8005b98:	9201      	str	r2, [sp, #4]
 8005b9a:	9a02      	ldr	r2, [sp, #8]
 8005b9c:	9303      	str	r3, [sp, #12]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d80c      	bhi.n	8005bbc <__multiply+0x9c>
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	dd03      	ble.n	8005bae <__multiply+0x8e>
 8005ba6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d05a      	beq.n	8005c64 <__multiply+0x144>
 8005bae:	6106      	str	r6, [r0, #16]
 8005bb0:	b005      	add	sp, #20
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	f843 2b04 	str.w	r2, [r3], #4
 8005bba:	e7d8      	b.n	8005b6e <__multiply+0x4e>
 8005bbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bc0:	f1ba 0f00 	cmp.w	sl, #0
 8005bc4:	d023      	beq.n	8005c0e <__multiply+0xee>
 8005bc6:	46a9      	mov	r9, r5
 8005bc8:	f04f 0c00 	mov.w	ip, #0
 8005bcc:	f104 0e14 	add.w	lr, r4, #20
 8005bd0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005bd4:	f8d9 1000 	ldr.w	r1, [r9]
 8005bd8:	fa1f fb82 	uxth.w	fp, r2
 8005bdc:	b289      	uxth	r1, r1
 8005bde:	fb0a 110b 	mla	r1, sl, fp, r1
 8005be2:	4461      	add	r1, ip
 8005be4:	f8d9 c000 	ldr.w	ip, [r9]
 8005be8:	0c12      	lsrs	r2, r2, #16
 8005bea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005bee:	fb0a c202 	mla	r2, sl, r2, ip
 8005bf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005bf6:	b289      	uxth	r1, r1
 8005bf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bfc:	4577      	cmp	r7, lr
 8005bfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c02:	f849 1b04 	str.w	r1, [r9], #4
 8005c06:	d8e3      	bhi.n	8005bd0 <__multiply+0xb0>
 8005c08:	9a01      	ldr	r2, [sp, #4]
 8005c0a:	f845 c002 	str.w	ip, [r5, r2]
 8005c0e:	9a03      	ldr	r2, [sp, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c16:	f1b9 0f00 	cmp.w	r9, #0
 8005c1a:	d021      	beq.n	8005c60 <__multiply+0x140>
 8005c1c:	46ae      	mov	lr, r5
 8005c1e:	f04f 0a00 	mov.w	sl, #0
 8005c22:	6829      	ldr	r1, [r5, #0]
 8005c24:	f104 0c14 	add.w	ip, r4, #20
 8005c28:	f8bc b000 	ldrh.w	fp, [ip]
 8005c2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c30:	b289      	uxth	r1, r1
 8005c32:	fb09 220b 	mla	r2, r9, fp, r2
 8005c36:	4452      	add	r2, sl
 8005c38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c3c:	f84e 1b04 	str.w	r1, [lr], #4
 8005c40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005c44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c48:	f8be 1000 	ldrh.w	r1, [lr]
 8005c4c:	4567      	cmp	r7, ip
 8005c4e:	fb09 110a 	mla	r1, r9, sl, r1
 8005c52:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005c56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c5a:	d8e5      	bhi.n	8005c28 <__multiply+0x108>
 8005c5c:	9a01      	ldr	r2, [sp, #4]
 8005c5e:	50a9      	str	r1, [r5, r2]
 8005c60:	3504      	adds	r5, #4
 8005c62:	e79a      	b.n	8005b9a <__multiply+0x7a>
 8005c64:	3e01      	subs	r6, #1
 8005c66:	e79c      	b.n	8005ba2 <__multiply+0x82>
 8005c68:	080068ae 	.word	0x080068ae
 8005c6c:	080068bf 	.word	0x080068bf

08005c70 <__pow5mult>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4615      	mov	r5, r2
 8005c76:	f012 0203 	ands.w	r2, r2, #3
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	d007      	beq.n	8005c90 <__pow5mult+0x20>
 8005c80:	4c25      	ldr	r4, [pc, #148]	; (8005d18 <__pow5mult+0xa8>)
 8005c82:	3a01      	subs	r2, #1
 8005c84:	2300      	movs	r3, #0
 8005c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c8a:	f7ff fe9f 	bl	80059cc <__multadd>
 8005c8e:	4607      	mov	r7, r0
 8005c90:	10ad      	asrs	r5, r5, #2
 8005c92:	d03d      	beq.n	8005d10 <__pow5mult+0xa0>
 8005c94:	69f4      	ldr	r4, [r6, #28]
 8005c96:	b97c      	cbnz	r4, 8005cb8 <__pow5mult+0x48>
 8005c98:	2010      	movs	r0, #16
 8005c9a:	f7ff fd81 	bl	80057a0 <malloc>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	61f0      	str	r0, [r6, #28]
 8005ca2:	b928      	cbnz	r0, 8005cb0 <__pow5mult+0x40>
 8005ca4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <__pow5mult+0xac>)
 8005caa:	481d      	ldr	r0, [pc, #116]	; (8005d20 <__pow5mult+0xb0>)
 8005cac:	f000 fc44 	bl	8006538 <__assert_func>
 8005cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cb4:	6004      	str	r4, [r0, #0]
 8005cb6:	60c4      	str	r4, [r0, #12]
 8005cb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cc0:	b94c      	cbnz	r4, 8005cd6 <__pow5mult+0x66>
 8005cc2:	f240 2171 	movw	r1, #625	; 0x271
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff ff14 	bl	8005af4 <__i2b>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	f04f 0900 	mov.w	r9, #0
 8005cda:	07eb      	lsls	r3, r5, #31
 8005cdc:	d50a      	bpl.n	8005cf4 <__pow5mult+0x84>
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7ff ff1c 	bl	8005b20 <__multiply>
 8005ce8:	4680      	mov	r8, r0
 8005cea:	4639      	mov	r1, r7
 8005cec:	4630      	mov	r0, r6
 8005cee:	f7ff fe4b 	bl	8005988 <_Bfree>
 8005cf2:	4647      	mov	r7, r8
 8005cf4:	106d      	asrs	r5, r5, #1
 8005cf6:	d00b      	beq.n	8005d10 <__pow5mult+0xa0>
 8005cf8:	6820      	ldr	r0, [r4, #0]
 8005cfa:	b938      	cbnz	r0, 8005d0c <__pow5mult+0x9c>
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff ff0d 	bl	8005b20 <__multiply>
 8005d06:	6020      	str	r0, [r4, #0]
 8005d08:	f8c0 9000 	str.w	r9, [r0]
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	e7e4      	b.n	8005cda <__pow5mult+0x6a>
 8005d10:	4638      	mov	r0, r7
 8005d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d16:	bf00      	nop
 8005d18:	08006a08 	.word	0x08006a08
 8005d1c:	0800683f 	.word	0x0800683f
 8005d20:	080068bf 	.word	0x080068bf

08005d24 <__lshift>:
 8005d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	460c      	mov	r4, r1
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	4691      	mov	r9, r2
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6849      	ldr	r1, [r1, #4]
 8005d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d3c:	f108 0601 	add.w	r6, r8, #1
 8005d40:	42b3      	cmp	r3, r6
 8005d42:	db0b      	blt.n	8005d5c <__lshift+0x38>
 8005d44:	4638      	mov	r0, r7
 8005d46:	f7ff fddf 	bl	8005908 <_Balloc>
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	b948      	cbnz	r0, 8005d62 <__lshift+0x3e>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005d54:	4b27      	ldr	r3, [pc, #156]	; (8005df4 <__lshift+0xd0>)
 8005d56:	4828      	ldr	r0, [pc, #160]	; (8005df8 <__lshift+0xd4>)
 8005d58:	f000 fbee 	bl	8006538 <__assert_func>
 8005d5c:	3101      	adds	r1, #1
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	e7ee      	b.n	8005d40 <__lshift+0x1c>
 8005d62:	2300      	movs	r3, #0
 8005d64:	f100 0114 	add.w	r1, r0, #20
 8005d68:	f100 0210 	add.w	r2, r0, #16
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4553      	cmp	r3, sl
 8005d70:	db33      	blt.n	8005dda <__lshift+0xb6>
 8005d72:	6920      	ldr	r0, [r4, #16]
 8005d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d78:	f104 0314 	add.w	r3, r4, #20
 8005d7c:	f019 091f 	ands.w	r9, r9, #31
 8005d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d88:	d02b      	beq.n	8005de2 <__lshift+0xbe>
 8005d8a:	468a      	mov	sl, r1
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	fa00 f009 	lsl.w	r0, r0, r9
 8005d98:	4310      	orrs	r0, r2
 8005d9a:	f84a 0b04 	str.w	r0, [sl], #4
 8005d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da2:	459c      	cmp	ip, r3
 8005da4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005da8:	d8f3      	bhi.n	8005d92 <__lshift+0x6e>
 8005daa:	ebac 0304 	sub.w	r3, ip, r4
 8005dae:	3b15      	subs	r3, #21
 8005db0:	f023 0303 	bic.w	r3, r3, #3
 8005db4:	3304      	adds	r3, #4
 8005db6:	f104 0015 	add.w	r0, r4, #21
 8005dba:	4584      	cmp	ip, r0
 8005dbc:	bf38      	it	cc
 8005dbe:	2304      	movcc	r3, #4
 8005dc0:	50ca      	str	r2, [r1, r3]
 8005dc2:	b10a      	cbz	r2, 8005dc8 <__lshift+0xa4>
 8005dc4:	f108 0602 	add.w	r6, r8, #2
 8005dc8:	3e01      	subs	r6, #1
 8005dca:	4638      	mov	r0, r7
 8005dcc:	4621      	mov	r1, r4
 8005dce:	612e      	str	r6, [r5, #16]
 8005dd0:	f7ff fdda 	bl	8005988 <_Bfree>
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dda:	f842 0f04 	str.w	r0, [r2, #4]!
 8005dde:	3301      	adds	r3, #1
 8005de0:	e7c5      	b.n	8005d6e <__lshift+0x4a>
 8005de2:	3904      	subs	r1, #4
 8005de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de8:	459c      	cmp	ip, r3
 8005dea:	f841 2f04 	str.w	r2, [r1, #4]!
 8005dee:	d8f9      	bhi.n	8005de4 <__lshift+0xc0>
 8005df0:	e7ea      	b.n	8005dc8 <__lshift+0xa4>
 8005df2:	bf00      	nop
 8005df4:	080068ae 	.word	0x080068ae
 8005df8:	080068bf 	.word	0x080068bf

08005dfc <__mcmp>:
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	690a      	ldr	r2, [r1, #16]
 8005e00:	6900      	ldr	r0, [r0, #16]
 8005e02:	b530      	push	{r4, r5, lr}
 8005e04:	1a80      	subs	r0, r0, r2
 8005e06:	d10d      	bne.n	8005e24 <__mcmp+0x28>
 8005e08:	3314      	adds	r3, #20
 8005e0a:	3114      	adds	r1, #20
 8005e0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e1c:	4295      	cmp	r5, r2
 8005e1e:	d002      	beq.n	8005e26 <__mcmp+0x2a>
 8005e20:	d304      	bcc.n	8005e2c <__mcmp+0x30>
 8005e22:	2001      	movs	r0, #1
 8005e24:	bd30      	pop	{r4, r5, pc}
 8005e26:	42a3      	cmp	r3, r4
 8005e28:	d3f4      	bcc.n	8005e14 <__mcmp+0x18>
 8005e2a:	e7fb      	b.n	8005e24 <__mcmp+0x28>
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e7f8      	b.n	8005e24 <__mcmp+0x28>
	...

08005e34 <__mdiff>:
 8005e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	460d      	mov	r5, r1
 8005e3a:	4607      	mov	r7, r0
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4628      	mov	r0, r5
 8005e40:	4614      	mov	r4, r2
 8005e42:	f7ff ffdb 	bl	8005dfc <__mcmp>
 8005e46:	1e06      	subs	r6, r0, #0
 8005e48:	d111      	bne.n	8005e6e <__mdiff+0x3a>
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f7ff fd5b 	bl	8005908 <_Balloc>
 8005e52:	4602      	mov	r2, r0
 8005e54:	b928      	cbnz	r0, 8005e62 <__mdiff+0x2e>
 8005e56:	f240 2137 	movw	r1, #567	; 0x237
 8005e5a:	4b3a      	ldr	r3, [pc, #232]	; (8005f44 <__mdiff+0x110>)
 8005e5c:	483a      	ldr	r0, [pc, #232]	; (8005f48 <__mdiff+0x114>)
 8005e5e:	f000 fb6b 	bl	8006538 <__assert_func>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e68:	4610      	mov	r0, r2
 8005e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	bfa4      	itt	ge
 8005e70:	4623      	movge	r3, r4
 8005e72:	462c      	movge	r4, r5
 8005e74:	4638      	mov	r0, r7
 8005e76:	6861      	ldr	r1, [r4, #4]
 8005e78:	bfa6      	itte	ge
 8005e7a:	461d      	movge	r5, r3
 8005e7c:	2600      	movge	r6, #0
 8005e7e:	2601      	movlt	r6, #1
 8005e80:	f7ff fd42 	bl	8005908 <_Balloc>
 8005e84:	4602      	mov	r2, r0
 8005e86:	b918      	cbnz	r0, 8005e90 <__mdiff+0x5c>
 8005e88:	f240 2145 	movw	r1, #581	; 0x245
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <__mdiff+0x110>)
 8005e8e:	e7e5      	b.n	8005e5c <__mdiff+0x28>
 8005e90:	f102 0814 	add.w	r8, r2, #20
 8005e94:	46c2      	mov	sl, r8
 8005e96:	f04f 0c00 	mov.w	ip, #0
 8005e9a:	6927      	ldr	r7, [r4, #16]
 8005e9c:	60c6      	str	r6, [r0, #12]
 8005e9e:	692e      	ldr	r6, [r5, #16]
 8005ea0:	f104 0014 	add.w	r0, r4, #20
 8005ea4:	f105 0914 	add.w	r9, r5, #20
 8005ea8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005eac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005eb0:	3410      	adds	r4, #16
 8005eb2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005eb6:	f859 3b04 	ldr.w	r3, [r9], #4
 8005eba:	fa1f f18b 	uxth.w	r1, fp
 8005ebe:	4461      	add	r1, ip
 8005ec0:	fa1f fc83 	uxth.w	ip, r3
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	eba1 010c 	sub.w	r1, r1, ip
 8005eca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ece:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ed2:	b289      	uxth	r1, r1
 8005ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005ed8:	454e      	cmp	r6, r9
 8005eda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ede:	f84a 1b04 	str.w	r1, [sl], #4
 8005ee2:	d8e6      	bhi.n	8005eb2 <__mdiff+0x7e>
 8005ee4:	1b73      	subs	r3, r6, r5
 8005ee6:	3b15      	subs	r3, #21
 8005ee8:	f023 0303 	bic.w	r3, r3, #3
 8005eec:	3515      	adds	r5, #21
 8005eee:	3304      	adds	r3, #4
 8005ef0:	42ae      	cmp	r6, r5
 8005ef2:	bf38      	it	cc
 8005ef4:	2304      	movcc	r3, #4
 8005ef6:	4418      	add	r0, r3
 8005ef8:	4443      	add	r3, r8
 8005efa:	461e      	mov	r6, r3
 8005efc:	4605      	mov	r5, r0
 8005efe:	4575      	cmp	r5, lr
 8005f00:	d30e      	bcc.n	8005f20 <__mdiff+0xec>
 8005f02:	f10e 0103 	add.w	r1, lr, #3
 8005f06:	1a09      	subs	r1, r1, r0
 8005f08:	f021 0103 	bic.w	r1, r1, #3
 8005f0c:	3803      	subs	r0, #3
 8005f0e:	4586      	cmp	lr, r0
 8005f10:	bf38      	it	cc
 8005f12:	2100      	movcc	r1, #0
 8005f14:	440b      	add	r3, r1
 8005f16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f1a:	b189      	cbz	r1, 8005f40 <__mdiff+0x10c>
 8005f1c:	6117      	str	r7, [r2, #16]
 8005f1e:	e7a3      	b.n	8005e68 <__mdiff+0x34>
 8005f20:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f24:	fa1f f188 	uxth.w	r1, r8
 8005f28:	4461      	add	r1, ip
 8005f2a:	140c      	asrs	r4, r1, #16
 8005f2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f30:	b289      	uxth	r1, r1
 8005f32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f36:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005f3a:	f846 1b04 	str.w	r1, [r6], #4
 8005f3e:	e7de      	b.n	8005efe <__mdiff+0xca>
 8005f40:	3f01      	subs	r7, #1
 8005f42:	e7e8      	b.n	8005f16 <__mdiff+0xe2>
 8005f44:	080068ae 	.word	0x080068ae
 8005f48:	080068bf 	.word	0x080068bf

08005f4c <__d2b>:
 8005f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f4e:	2101      	movs	r1, #1
 8005f50:	4617      	mov	r7, r2
 8005f52:	461c      	mov	r4, r3
 8005f54:	9e08      	ldr	r6, [sp, #32]
 8005f56:	f7ff fcd7 	bl	8005908 <_Balloc>
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b930      	cbnz	r0, 8005f6c <__d2b+0x20>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	f240 310f 	movw	r1, #783	; 0x30f
 8005f64:	4b22      	ldr	r3, [pc, #136]	; (8005ff0 <__d2b+0xa4>)
 8005f66:	4823      	ldr	r0, [pc, #140]	; (8005ff4 <__d2b+0xa8>)
 8005f68:	f000 fae6 	bl	8006538 <__assert_func>
 8005f6c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005f70:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005f74:	bb24      	cbnz	r4, 8005fc0 <__d2b+0x74>
 8005f76:	2f00      	cmp	r7, #0
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	d026      	beq.n	8005fca <__d2b+0x7e>
 8005f7c:	4668      	mov	r0, sp
 8005f7e:	9700      	str	r7, [sp, #0]
 8005f80:	f7ff fd8a 	bl	8005a98 <__lo0bits>
 8005f84:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f88:	b1e8      	cbz	r0, 8005fc6 <__d2b+0x7a>
 8005f8a:	f1c0 0320 	rsb	r3, r0, #32
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	430b      	orrs	r3, r1
 8005f94:	40c2      	lsrs	r2, r0
 8005f96:	616b      	str	r3, [r5, #20]
 8005f98:	9201      	str	r2, [sp, #4]
 8005f9a:	9b01      	ldr	r3, [sp, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf14      	ite	ne
 8005fa0:	2102      	movne	r1, #2
 8005fa2:	2101      	moveq	r1, #1
 8005fa4:	61ab      	str	r3, [r5, #24]
 8005fa6:	6129      	str	r1, [r5, #16]
 8005fa8:	b1bc      	cbz	r4, 8005fda <__d2b+0x8e>
 8005faa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005fae:	4404      	add	r4, r0
 8005fb0:	6034      	str	r4, [r6, #0]
 8005fb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb8:	6018      	str	r0, [r3, #0]
 8005fba:	4628      	mov	r0, r5
 8005fbc:	b003      	add	sp, #12
 8005fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fc4:	e7d7      	b.n	8005f76 <__d2b+0x2a>
 8005fc6:	6169      	str	r1, [r5, #20]
 8005fc8:	e7e7      	b.n	8005f9a <__d2b+0x4e>
 8005fca:	a801      	add	r0, sp, #4
 8005fcc:	f7ff fd64 	bl	8005a98 <__lo0bits>
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	616b      	str	r3, [r5, #20]
 8005fd6:	3020      	adds	r0, #32
 8005fd8:	e7e5      	b.n	8005fa6 <__d2b+0x5a>
 8005fda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fde:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005fe2:	6030      	str	r0, [r6, #0]
 8005fe4:	6918      	ldr	r0, [r3, #16]
 8005fe6:	f7ff fd37 	bl	8005a58 <__hi0bits>
 8005fea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005fee:	e7e2      	b.n	8005fb6 <__d2b+0x6a>
 8005ff0:	080068ae 	.word	0x080068ae
 8005ff4:	080068bf 	.word	0x080068bf

08005ff8 <__sfputc_r>:
 8005ff8:	6893      	ldr	r3, [r2, #8]
 8005ffa:	b410      	push	{r4}
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	6093      	str	r3, [r2, #8]
 8006002:	da07      	bge.n	8006014 <__sfputc_r+0x1c>
 8006004:	6994      	ldr	r4, [r2, #24]
 8006006:	42a3      	cmp	r3, r4
 8006008:	db01      	blt.n	800600e <__sfputc_r+0x16>
 800600a:	290a      	cmp	r1, #10
 800600c:	d102      	bne.n	8006014 <__sfputc_r+0x1c>
 800600e:	bc10      	pop	{r4}
 8006010:	f000 b9de 	b.w	80063d0 <__swbuf_r>
 8006014:	6813      	ldr	r3, [r2, #0]
 8006016:	1c58      	adds	r0, r3, #1
 8006018:	6010      	str	r0, [r2, #0]
 800601a:	7019      	strb	r1, [r3, #0]
 800601c:	4608      	mov	r0, r1
 800601e:	bc10      	pop	{r4}
 8006020:	4770      	bx	lr

08006022 <__sfputs_r>:
 8006022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006024:	4606      	mov	r6, r0
 8006026:	460f      	mov	r7, r1
 8006028:	4614      	mov	r4, r2
 800602a:	18d5      	adds	r5, r2, r3
 800602c:	42ac      	cmp	r4, r5
 800602e:	d101      	bne.n	8006034 <__sfputs_r+0x12>
 8006030:	2000      	movs	r0, #0
 8006032:	e007      	b.n	8006044 <__sfputs_r+0x22>
 8006034:	463a      	mov	r2, r7
 8006036:	4630      	mov	r0, r6
 8006038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603c:	f7ff ffdc 	bl	8005ff8 <__sfputc_r>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d1f3      	bne.n	800602c <__sfputs_r+0xa>
 8006044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006048 <_vfiprintf_r>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	460d      	mov	r5, r1
 800604e:	4614      	mov	r4, r2
 8006050:	4698      	mov	r8, r3
 8006052:	4606      	mov	r6, r0
 8006054:	b09d      	sub	sp, #116	; 0x74
 8006056:	b118      	cbz	r0, 8006060 <_vfiprintf_r+0x18>
 8006058:	6a03      	ldr	r3, [r0, #32]
 800605a:	b90b      	cbnz	r3, 8006060 <_vfiprintf_r+0x18>
 800605c:	f7fe fbd0 	bl	8004800 <__sinit>
 8006060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006062:	07d9      	lsls	r1, r3, #31
 8006064:	d405      	bmi.n	8006072 <_vfiprintf_r+0x2a>
 8006066:	89ab      	ldrh	r3, [r5, #12]
 8006068:	059a      	lsls	r2, r3, #22
 800606a:	d402      	bmi.n	8006072 <_vfiprintf_r+0x2a>
 800606c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800606e:	f7fe fccf 	bl	8004a10 <__retarget_lock_acquire_recursive>
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	071b      	lsls	r3, r3, #28
 8006076:	d501      	bpl.n	800607c <_vfiprintf_r+0x34>
 8006078:	692b      	ldr	r3, [r5, #16]
 800607a:	b99b      	cbnz	r3, 80060a4 <_vfiprintf_r+0x5c>
 800607c:	4629      	mov	r1, r5
 800607e:	4630      	mov	r0, r6
 8006080:	f000 f9e4 	bl	800644c <__swsetup_r>
 8006084:	b170      	cbz	r0, 80060a4 <_vfiprintf_r+0x5c>
 8006086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006088:	07dc      	lsls	r4, r3, #31
 800608a:	d504      	bpl.n	8006096 <_vfiprintf_r+0x4e>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	b01d      	add	sp, #116	; 0x74
 8006092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006096:	89ab      	ldrh	r3, [r5, #12]
 8006098:	0598      	lsls	r0, r3, #22
 800609a:	d4f7      	bmi.n	800608c <_vfiprintf_r+0x44>
 800609c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800609e:	f7fe fcb8 	bl	8004a12 <__retarget_lock_release_recursive>
 80060a2:	e7f3      	b.n	800608c <_vfiprintf_r+0x44>
 80060a4:	2300      	movs	r3, #0
 80060a6:	9309      	str	r3, [sp, #36]	; 0x24
 80060a8:	2320      	movs	r3, #32
 80060aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ae:	2330      	movs	r3, #48	; 0x30
 80060b0:	f04f 0901 	mov.w	r9, #1
 80060b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006268 <_vfiprintf_r+0x220>
 80060bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c0:	4623      	mov	r3, r4
 80060c2:	469a      	mov	sl, r3
 80060c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060c8:	b10a      	cbz	r2, 80060ce <_vfiprintf_r+0x86>
 80060ca:	2a25      	cmp	r2, #37	; 0x25
 80060cc:	d1f9      	bne.n	80060c2 <_vfiprintf_r+0x7a>
 80060ce:	ebba 0b04 	subs.w	fp, sl, r4
 80060d2:	d00b      	beq.n	80060ec <_vfiprintf_r+0xa4>
 80060d4:	465b      	mov	r3, fp
 80060d6:	4622      	mov	r2, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	4630      	mov	r0, r6
 80060dc:	f7ff ffa1 	bl	8006022 <__sfputs_r>
 80060e0:	3001      	adds	r0, #1
 80060e2:	f000 80a9 	beq.w	8006238 <_vfiprintf_r+0x1f0>
 80060e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e8:	445a      	add	r2, fp
 80060ea:	9209      	str	r2, [sp, #36]	; 0x24
 80060ec:	f89a 3000 	ldrb.w	r3, [sl]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80a1 	beq.w	8006238 <_vfiprintf_r+0x1f0>
 80060f6:	2300      	movs	r3, #0
 80060f8:	f04f 32ff 	mov.w	r2, #4294967295
 80060fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006100:	f10a 0a01 	add.w	sl, sl, #1
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	9307      	str	r3, [sp, #28]
 8006108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800610c:	931a      	str	r3, [sp, #104]	; 0x68
 800610e:	4654      	mov	r4, sl
 8006110:	2205      	movs	r2, #5
 8006112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006116:	4854      	ldr	r0, [pc, #336]	; (8006268 <_vfiprintf_r+0x220>)
 8006118:	f7fe fc7c 	bl	8004a14 <memchr>
 800611c:	9a04      	ldr	r2, [sp, #16]
 800611e:	b9d8      	cbnz	r0, 8006158 <_vfiprintf_r+0x110>
 8006120:	06d1      	lsls	r1, r2, #27
 8006122:	bf44      	itt	mi
 8006124:	2320      	movmi	r3, #32
 8006126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800612a:	0713      	lsls	r3, r2, #28
 800612c:	bf44      	itt	mi
 800612e:	232b      	movmi	r3, #43	; 0x2b
 8006130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006134:	f89a 3000 	ldrb.w	r3, [sl]
 8006138:	2b2a      	cmp	r3, #42	; 0x2a
 800613a:	d015      	beq.n	8006168 <_vfiprintf_r+0x120>
 800613c:	4654      	mov	r4, sl
 800613e:	2000      	movs	r0, #0
 8006140:	f04f 0c0a 	mov.w	ip, #10
 8006144:	9a07      	ldr	r2, [sp, #28]
 8006146:	4621      	mov	r1, r4
 8006148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800614c:	3b30      	subs	r3, #48	; 0x30
 800614e:	2b09      	cmp	r3, #9
 8006150:	d94d      	bls.n	80061ee <_vfiprintf_r+0x1a6>
 8006152:	b1b0      	cbz	r0, 8006182 <_vfiprintf_r+0x13a>
 8006154:	9207      	str	r2, [sp, #28]
 8006156:	e014      	b.n	8006182 <_vfiprintf_r+0x13a>
 8006158:	eba0 0308 	sub.w	r3, r0, r8
 800615c:	fa09 f303 	lsl.w	r3, r9, r3
 8006160:	4313      	orrs	r3, r2
 8006162:	46a2      	mov	sl, r4
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	e7d2      	b.n	800610e <_vfiprintf_r+0xc6>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	1d19      	adds	r1, r3, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	9103      	str	r1, [sp, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	bfbb      	ittet	lt
 8006174:	425b      	neglt	r3, r3
 8006176:	f042 0202 	orrlt.w	r2, r2, #2
 800617a:	9307      	strge	r3, [sp, #28]
 800617c:	9307      	strlt	r3, [sp, #28]
 800617e:	bfb8      	it	lt
 8006180:	9204      	strlt	r2, [sp, #16]
 8006182:	7823      	ldrb	r3, [r4, #0]
 8006184:	2b2e      	cmp	r3, #46	; 0x2e
 8006186:	d10c      	bne.n	80061a2 <_vfiprintf_r+0x15a>
 8006188:	7863      	ldrb	r3, [r4, #1]
 800618a:	2b2a      	cmp	r3, #42	; 0x2a
 800618c:	d134      	bne.n	80061f8 <_vfiprintf_r+0x1b0>
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	3402      	adds	r4, #2
 8006192:	1d1a      	adds	r2, r3, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	9203      	str	r2, [sp, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	bfb8      	it	lt
 800619c:	f04f 33ff 	movlt.w	r3, #4294967295
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800626c <_vfiprintf_r+0x224>
 80061a6:	2203      	movs	r2, #3
 80061a8:	4650      	mov	r0, sl
 80061aa:	7821      	ldrb	r1, [r4, #0]
 80061ac:	f7fe fc32 	bl	8004a14 <memchr>
 80061b0:	b138      	cbz	r0, 80061c2 <_vfiprintf_r+0x17a>
 80061b2:	2240      	movs	r2, #64	; 0x40
 80061b4:	9b04      	ldr	r3, [sp, #16]
 80061b6:	eba0 000a 	sub.w	r0, r0, sl
 80061ba:	4082      	lsls	r2, r0
 80061bc:	4313      	orrs	r3, r2
 80061be:	3401      	adds	r4, #1
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c6:	2206      	movs	r2, #6
 80061c8:	4829      	ldr	r0, [pc, #164]	; (8006270 <_vfiprintf_r+0x228>)
 80061ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ce:	f7fe fc21 	bl	8004a14 <memchr>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d03f      	beq.n	8006256 <_vfiprintf_r+0x20e>
 80061d6:	4b27      	ldr	r3, [pc, #156]	; (8006274 <_vfiprintf_r+0x22c>)
 80061d8:	bb1b      	cbnz	r3, 8006222 <_vfiprintf_r+0x1da>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	3307      	adds	r3, #7
 80061de:	f023 0307 	bic.w	r3, r3, #7
 80061e2:	3308      	adds	r3, #8
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e8:	443b      	add	r3, r7
 80061ea:	9309      	str	r3, [sp, #36]	; 0x24
 80061ec:	e768      	b.n	80060c0 <_vfiprintf_r+0x78>
 80061ee:	460c      	mov	r4, r1
 80061f0:	2001      	movs	r0, #1
 80061f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f6:	e7a6      	b.n	8006146 <_vfiprintf_r+0xfe>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f04f 0c0a 	mov.w	ip, #10
 80061fe:	4619      	mov	r1, r3
 8006200:	3401      	adds	r4, #1
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	4620      	mov	r0, r4
 8006206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800620a:	3a30      	subs	r2, #48	; 0x30
 800620c:	2a09      	cmp	r2, #9
 800620e:	d903      	bls.n	8006218 <_vfiprintf_r+0x1d0>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0c6      	beq.n	80061a2 <_vfiprintf_r+0x15a>
 8006214:	9105      	str	r1, [sp, #20]
 8006216:	e7c4      	b.n	80061a2 <_vfiprintf_r+0x15a>
 8006218:	4604      	mov	r4, r0
 800621a:	2301      	movs	r3, #1
 800621c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006220:	e7f0      	b.n	8006204 <_vfiprintf_r+0x1bc>
 8006222:	ab03      	add	r3, sp, #12
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	462a      	mov	r2, r5
 8006228:	4630      	mov	r0, r6
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <_vfiprintf_r+0x230>)
 800622c:	a904      	add	r1, sp, #16
 800622e:	f7fd feab 	bl	8003f88 <_printf_float>
 8006232:	4607      	mov	r7, r0
 8006234:	1c78      	adds	r0, r7, #1
 8006236:	d1d6      	bne.n	80061e6 <_vfiprintf_r+0x19e>
 8006238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800623a:	07d9      	lsls	r1, r3, #31
 800623c:	d405      	bmi.n	800624a <_vfiprintf_r+0x202>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	059a      	lsls	r2, r3, #22
 8006242:	d402      	bmi.n	800624a <_vfiprintf_r+0x202>
 8006244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006246:	f7fe fbe4 	bl	8004a12 <__retarget_lock_release_recursive>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	065b      	lsls	r3, r3, #25
 800624e:	f53f af1d 	bmi.w	800608c <_vfiprintf_r+0x44>
 8006252:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006254:	e71c      	b.n	8006090 <_vfiprintf_r+0x48>
 8006256:	ab03      	add	r3, sp, #12
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	462a      	mov	r2, r5
 800625c:	4630      	mov	r0, r6
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <_vfiprintf_r+0x230>)
 8006260:	a904      	add	r1, sp, #16
 8006262:	f7fe f931 	bl	80044c8 <_printf_i>
 8006266:	e7e4      	b.n	8006232 <_vfiprintf_r+0x1ea>
 8006268:	08006a14 	.word	0x08006a14
 800626c:	08006a1a 	.word	0x08006a1a
 8006270:	08006a1e 	.word	0x08006a1e
 8006274:	08003f89 	.word	0x08003f89
 8006278:	08006023 	.word	0x08006023

0800627c <__sflush_r>:
 800627c:	898a      	ldrh	r2, [r1, #12]
 800627e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006280:	4605      	mov	r5, r0
 8006282:	0710      	lsls	r0, r2, #28
 8006284:	460c      	mov	r4, r1
 8006286:	d457      	bmi.n	8006338 <__sflush_r+0xbc>
 8006288:	684b      	ldr	r3, [r1, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dc04      	bgt.n	8006298 <__sflush_r+0x1c>
 800628e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	dc01      	bgt.n	8006298 <__sflush_r+0x1c>
 8006294:	2000      	movs	r0, #0
 8006296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800629a:	2e00      	cmp	r6, #0
 800629c:	d0fa      	beq.n	8006294 <__sflush_r+0x18>
 800629e:	2300      	movs	r3, #0
 80062a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062a4:	682f      	ldr	r7, [r5, #0]
 80062a6:	6a21      	ldr	r1, [r4, #32]
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	d032      	beq.n	8006312 <__sflush_r+0x96>
 80062ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	075a      	lsls	r2, r3, #29
 80062b2:	d505      	bpl.n	80062c0 <__sflush_r+0x44>
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	1ac0      	subs	r0, r0, r3
 80062b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ba:	b10b      	cbz	r3, 80062c0 <__sflush_r+0x44>
 80062bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062be:	1ac0      	subs	r0, r0, r3
 80062c0:	2300      	movs	r3, #0
 80062c2:	4602      	mov	r2, r0
 80062c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062c6:	4628      	mov	r0, r5
 80062c8:	6a21      	ldr	r1, [r4, #32]
 80062ca:	47b0      	blx	r6
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	d106      	bne.n	80062e0 <__sflush_r+0x64>
 80062d2:	6829      	ldr	r1, [r5, #0]
 80062d4:	291d      	cmp	r1, #29
 80062d6:	d82b      	bhi.n	8006330 <__sflush_r+0xb4>
 80062d8:	4a28      	ldr	r2, [pc, #160]	; (800637c <__sflush_r+0x100>)
 80062da:	410a      	asrs	r2, r1
 80062dc:	07d6      	lsls	r6, r2, #31
 80062de:	d427      	bmi.n	8006330 <__sflush_r+0xb4>
 80062e0:	2200      	movs	r2, #0
 80062e2:	6062      	str	r2, [r4, #4]
 80062e4:	6922      	ldr	r2, [r4, #16]
 80062e6:	04d9      	lsls	r1, r3, #19
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	d504      	bpl.n	80062f6 <__sflush_r+0x7a>
 80062ec:	1c42      	adds	r2, r0, #1
 80062ee:	d101      	bne.n	80062f4 <__sflush_r+0x78>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b903      	cbnz	r3, 80062f6 <__sflush_r+0x7a>
 80062f4:	6560      	str	r0, [r4, #84]	; 0x54
 80062f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062f8:	602f      	str	r7, [r5, #0]
 80062fa:	2900      	cmp	r1, #0
 80062fc:	d0ca      	beq.n	8006294 <__sflush_r+0x18>
 80062fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006302:	4299      	cmp	r1, r3
 8006304:	d002      	beq.n	800630c <__sflush_r+0x90>
 8006306:	4628      	mov	r0, r5
 8006308:	f7ff fa02 	bl	8005710 <_free_r>
 800630c:	2000      	movs	r0, #0
 800630e:	6360      	str	r0, [r4, #52]	; 0x34
 8006310:	e7c1      	b.n	8006296 <__sflush_r+0x1a>
 8006312:	2301      	movs	r3, #1
 8006314:	4628      	mov	r0, r5
 8006316:	47b0      	blx	r6
 8006318:	1c41      	adds	r1, r0, #1
 800631a:	d1c8      	bne.n	80062ae <__sflush_r+0x32>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0c5      	beq.n	80062ae <__sflush_r+0x32>
 8006322:	2b1d      	cmp	r3, #29
 8006324:	d001      	beq.n	800632a <__sflush_r+0xae>
 8006326:	2b16      	cmp	r3, #22
 8006328:	d101      	bne.n	800632e <__sflush_r+0xb2>
 800632a:	602f      	str	r7, [r5, #0]
 800632c:	e7b2      	b.n	8006294 <__sflush_r+0x18>
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	e7ae      	b.n	8006296 <__sflush_r+0x1a>
 8006338:	690f      	ldr	r7, [r1, #16]
 800633a:	2f00      	cmp	r7, #0
 800633c:	d0aa      	beq.n	8006294 <__sflush_r+0x18>
 800633e:	0793      	lsls	r3, r2, #30
 8006340:	bf18      	it	ne
 8006342:	2300      	movne	r3, #0
 8006344:	680e      	ldr	r6, [r1, #0]
 8006346:	bf08      	it	eq
 8006348:	694b      	ldreq	r3, [r1, #20]
 800634a:	1bf6      	subs	r6, r6, r7
 800634c:	600f      	str	r7, [r1, #0]
 800634e:	608b      	str	r3, [r1, #8]
 8006350:	2e00      	cmp	r6, #0
 8006352:	dd9f      	ble.n	8006294 <__sflush_r+0x18>
 8006354:	4633      	mov	r3, r6
 8006356:	463a      	mov	r2, r7
 8006358:	4628      	mov	r0, r5
 800635a:	6a21      	ldr	r1, [r4, #32]
 800635c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006360:	47e0      	blx	ip
 8006362:	2800      	cmp	r0, #0
 8006364:	dc06      	bgt.n	8006374 <__sflush_r+0xf8>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	e790      	b.n	8006296 <__sflush_r+0x1a>
 8006374:	4407      	add	r7, r0
 8006376:	1a36      	subs	r6, r6, r0
 8006378:	e7ea      	b.n	8006350 <__sflush_r+0xd4>
 800637a:	bf00      	nop
 800637c:	dfbffffe 	.word	0xdfbffffe

08006380 <_fflush_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	690b      	ldr	r3, [r1, #16]
 8006384:	4605      	mov	r5, r0
 8006386:	460c      	mov	r4, r1
 8006388:	b913      	cbnz	r3, 8006390 <_fflush_r+0x10>
 800638a:	2500      	movs	r5, #0
 800638c:	4628      	mov	r0, r5
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	b118      	cbz	r0, 800639a <_fflush_r+0x1a>
 8006392:	6a03      	ldr	r3, [r0, #32]
 8006394:	b90b      	cbnz	r3, 800639a <_fflush_r+0x1a>
 8006396:	f7fe fa33 	bl	8004800 <__sinit>
 800639a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f3      	beq.n	800638a <_fflush_r+0xa>
 80063a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063a4:	07d0      	lsls	r0, r2, #31
 80063a6:	d404      	bmi.n	80063b2 <_fflush_r+0x32>
 80063a8:	0599      	lsls	r1, r3, #22
 80063aa:	d402      	bmi.n	80063b2 <_fflush_r+0x32>
 80063ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ae:	f7fe fb2f 	bl	8004a10 <__retarget_lock_acquire_recursive>
 80063b2:	4628      	mov	r0, r5
 80063b4:	4621      	mov	r1, r4
 80063b6:	f7ff ff61 	bl	800627c <__sflush_r>
 80063ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063bc:	4605      	mov	r5, r0
 80063be:	07da      	lsls	r2, r3, #31
 80063c0:	d4e4      	bmi.n	800638c <_fflush_r+0xc>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	059b      	lsls	r3, r3, #22
 80063c6:	d4e1      	bmi.n	800638c <_fflush_r+0xc>
 80063c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ca:	f7fe fb22 	bl	8004a12 <__retarget_lock_release_recursive>
 80063ce:	e7dd      	b.n	800638c <_fflush_r+0xc>

080063d0 <__swbuf_r>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	460e      	mov	r6, r1
 80063d4:	4614      	mov	r4, r2
 80063d6:	4605      	mov	r5, r0
 80063d8:	b118      	cbz	r0, 80063e2 <__swbuf_r+0x12>
 80063da:	6a03      	ldr	r3, [r0, #32]
 80063dc:	b90b      	cbnz	r3, 80063e2 <__swbuf_r+0x12>
 80063de:	f7fe fa0f 	bl	8004800 <__sinit>
 80063e2:	69a3      	ldr	r3, [r4, #24]
 80063e4:	60a3      	str	r3, [r4, #8]
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	071a      	lsls	r2, r3, #28
 80063ea:	d525      	bpl.n	8006438 <__swbuf_r+0x68>
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	b31b      	cbz	r3, 8006438 <__swbuf_r+0x68>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	6922      	ldr	r2, [r4, #16]
 80063f4:	b2f6      	uxtb	r6, r6
 80063f6:	1a98      	subs	r0, r3, r2
 80063f8:	6963      	ldr	r3, [r4, #20]
 80063fa:	4637      	mov	r7, r6
 80063fc:	4283      	cmp	r3, r0
 80063fe:	dc04      	bgt.n	800640a <__swbuf_r+0x3a>
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f7ff ffbc 	bl	8006380 <_fflush_r>
 8006408:	b9e0      	cbnz	r0, 8006444 <__swbuf_r+0x74>
 800640a:	68a3      	ldr	r3, [r4, #8]
 800640c:	3b01      	subs	r3, #1
 800640e:	60a3      	str	r3, [r4, #8]
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	6022      	str	r2, [r4, #0]
 8006416:	701e      	strb	r6, [r3, #0]
 8006418:	6962      	ldr	r2, [r4, #20]
 800641a:	1c43      	adds	r3, r0, #1
 800641c:	429a      	cmp	r2, r3
 800641e:	d004      	beq.n	800642a <__swbuf_r+0x5a>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	07db      	lsls	r3, r3, #31
 8006424:	d506      	bpl.n	8006434 <__swbuf_r+0x64>
 8006426:	2e0a      	cmp	r6, #10
 8006428:	d104      	bne.n	8006434 <__swbuf_r+0x64>
 800642a:	4621      	mov	r1, r4
 800642c:	4628      	mov	r0, r5
 800642e:	f7ff ffa7 	bl	8006380 <_fflush_r>
 8006432:	b938      	cbnz	r0, 8006444 <__swbuf_r+0x74>
 8006434:	4638      	mov	r0, r7
 8006436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006438:	4621      	mov	r1, r4
 800643a:	4628      	mov	r0, r5
 800643c:	f000 f806 	bl	800644c <__swsetup_r>
 8006440:	2800      	cmp	r0, #0
 8006442:	d0d5      	beq.n	80063f0 <__swbuf_r+0x20>
 8006444:	f04f 37ff 	mov.w	r7, #4294967295
 8006448:	e7f4      	b.n	8006434 <__swbuf_r+0x64>
	...

0800644c <__swsetup_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <__swsetup_r+0xac>)
 8006450:	4605      	mov	r5, r0
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	460c      	mov	r4, r1
 8006456:	b118      	cbz	r0, 8006460 <__swsetup_r+0x14>
 8006458:	6a03      	ldr	r3, [r0, #32]
 800645a:	b90b      	cbnz	r3, 8006460 <__swsetup_r+0x14>
 800645c:	f7fe f9d0 	bl	8004800 <__sinit>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006466:	0718      	lsls	r0, r3, #28
 8006468:	d422      	bmi.n	80064b0 <__swsetup_r+0x64>
 800646a:	06d9      	lsls	r1, r3, #27
 800646c:	d407      	bmi.n	800647e <__swsetup_r+0x32>
 800646e:	2309      	movs	r3, #9
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006476:	f04f 30ff 	mov.w	r0, #4294967295
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	e034      	b.n	80064e8 <__swsetup_r+0x9c>
 800647e:	0758      	lsls	r0, r3, #29
 8006480:	d512      	bpl.n	80064a8 <__swsetup_r+0x5c>
 8006482:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006484:	b141      	cbz	r1, 8006498 <__swsetup_r+0x4c>
 8006486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800648a:	4299      	cmp	r1, r3
 800648c:	d002      	beq.n	8006494 <__swsetup_r+0x48>
 800648e:	4628      	mov	r0, r5
 8006490:	f7ff f93e 	bl	8005710 <_free_r>
 8006494:	2300      	movs	r3, #0
 8006496:	6363      	str	r3, [r4, #52]	; 0x34
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800649e:	81a3      	strh	r3, [r4, #12]
 80064a0:	2300      	movs	r3, #0
 80064a2:	6063      	str	r3, [r4, #4]
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f043 0308 	orr.w	r3, r3, #8
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	b94b      	cbnz	r3, 80064c8 <__swsetup_r+0x7c>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064be:	d003      	beq.n	80064c8 <__swsetup_r+0x7c>
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f8c1 	bl	800664a <__smakebuf_r>
 80064c8:	89a0      	ldrh	r0, [r4, #12]
 80064ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064ce:	f010 0301 	ands.w	r3, r0, #1
 80064d2:	d00a      	beq.n	80064ea <__swsetup_r+0x9e>
 80064d4:	2300      	movs	r3, #0
 80064d6:	60a3      	str	r3, [r4, #8]
 80064d8:	6963      	ldr	r3, [r4, #20]
 80064da:	425b      	negs	r3, r3
 80064dc:	61a3      	str	r3, [r4, #24]
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	b943      	cbnz	r3, 80064f4 <__swsetup_r+0xa8>
 80064e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064e6:	d1c4      	bne.n	8006472 <__swsetup_r+0x26>
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
 80064ea:	0781      	lsls	r1, r0, #30
 80064ec:	bf58      	it	pl
 80064ee:	6963      	ldrpl	r3, [r4, #20]
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	e7f4      	b.n	80064de <__swsetup_r+0x92>
 80064f4:	2000      	movs	r0, #0
 80064f6:	e7f7      	b.n	80064e8 <__swsetup_r+0x9c>
 80064f8:	20000064 	.word	0x20000064

080064fc <_sbrk_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	2300      	movs	r3, #0
 8006500:	4d05      	ldr	r5, [pc, #20]	; (8006518 <_sbrk_r+0x1c>)
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fb f988 	bl	800181c <_sbrk>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_sbrk_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_sbrk_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	200004b0 	.word	0x200004b0

0800651c <memcpy>:
 800651c:	440a      	add	r2, r1
 800651e:	4291      	cmp	r1, r2
 8006520:	f100 33ff 	add.w	r3, r0, #4294967295
 8006524:	d100      	bne.n	8006528 <memcpy+0xc>
 8006526:	4770      	bx	lr
 8006528:	b510      	push	{r4, lr}
 800652a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652e:	4291      	cmp	r1, r2
 8006530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006534:	d1f9      	bne.n	800652a <memcpy+0xe>
 8006536:	bd10      	pop	{r4, pc}

08006538 <__assert_func>:
 8006538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800653a:	4614      	mov	r4, r2
 800653c:	461a      	mov	r2, r3
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <__assert_func+0x2c>)
 8006540:	4605      	mov	r5, r0
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68d8      	ldr	r0, [r3, #12]
 8006546:	b14c      	cbz	r4, 800655c <__assert_func+0x24>
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <__assert_func+0x30>)
 800654a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800654e:	9100      	str	r1, [sp, #0]
 8006550:	462b      	mov	r3, r5
 8006552:	4906      	ldr	r1, [pc, #24]	; (800656c <__assert_func+0x34>)
 8006554:	f000 f842 	bl	80065dc <fiprintf>
 8006558:	f000 f8d6 	bl	8006708 <abort>
 800655c:	4b04      	ldr	r3, [pc, #16]	; (8006570 <__assert_func+0x38>)
 800655e:	461c      	mov	r4, r3
 8006560:	e7f3      	b.n	800654a <__assert_func+0x12>
 8006562:	bf00      	nop
 8006564:	20000064 	.word	0x20000064
 8006568:	08006a2f 	.word	0x08006a2f
 800656c:	08006a3c 	.word	0x08006a3c
 8006570:	08006a6a 	.word	0x08006a6a

08006574 <_calloc_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	fba1 5402 	umull	r5, r4, r1, r2
 800657a:	b934      	cbnz	r4, 800658a <_calloc_r+0x16>
 800657c:	4629      	mov	r1, r5
 800657e:	f7ff f937 	bl	80057f0 <_malloc_r>
 8006582:	4606      	mov	r6, r0
 8006584:	b928      	cbnz	r0, 8006592 <_calloc_r+0x1e>
 8006586:	4630      	mov	r0, r6
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	220c      	movs	r2, #12
 800658c:	2600      	movs	r6, #0
 800658e:	6002      	str	r2, [r0, #0]
 8006590:	e7f9      	b.n	8006586 <_calloc_r+0x12>
 8006592:	462a      	mov	r2, r5
 8006594:	4621      	mov	r1, r4
 8006596:	f7fe f9be 	bl	8004916 <memset>
 800659a:	e7f4      	b.n	8006586 <_calloc_r+0x12>

0800659c <__ascii_mbtowc>:
 800659c:	b082      	sub	sp, #8
 800659e:	b901      	cbnz	r1, 80065a2 <__ascii_mbtowc+0x6>
 80065a0:	a901      	add	r1, sp, #4
 80065a2:	b142      	cbz	r2, 80065b6 <__ascii_mbtowc+0x1a>
 80065a4:	b14b      	cbz	r3, 80065ba <__ascii_mbtowc+0x1e>
 80065a6:	7813      	ldrb	r3, [r2, #0]
 80065a8:	600b      	str	r3, [r1, #0]
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	1e10      	subs	r0, r2, #0
 80065ae:	bf18      	it	ne
 80065b0:	2001      	movne	r0, #1
 80065b2:	b002      	add	sp, #8
 80065b4:	4770      	bx	lr
 80065b6:	4610      	mov	r0, r2
 80065b8:	e7fb      	b.n	80065b2 <__ascii_mbtowc+0x16>
 80065ba:	f06f 0001 	mvn.w	r0, #1
 80065be:	e7f8      	b.n	80065b2 <__ascii_mbtowc+0x16>

080065c0 <__ascii_wctomb>:
 80065c0:	4603      	mov	r3, r0
 80065c2:	4608      	mov	r0, r1
 80065c4:	b141      	cbz	r1, 80065d8 <__ascii_wctomb+0x18>
 80065c6:	2aff      	cmp	r2, #255	; 0xff
 80065c8:	d904      	bls.n	80065d4 <__ascii_wctomb+0x14>
 80065ca:	228a      	movs	r2, #138	; 0x8a
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	4770      	bx	lr
 80065d4:	2001      	movs	r0, #1
 80065d6:	700a      	strb	r2, [r1, #0]
 80065d8:	4770      	bx	lr
	...

080065dc <fiprintf>:
 80065dc:	b40e      	push	{r1, r2, r3}
 80065de:	b503      	push	{r0, r1, lr}
 80065e0:	4601      	mov	r1, r0
 80065e2:	ab03      	add	r3, sp, #12
 80065e4:	4805      	ldr	r0, [pc, #20]	; (80065fc <fiprintf+0x20>)
 80065e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	f7ff fd2b 	bl	8006048 <_vfiprintf_r>
 80065f2:	b002      	add	sp, #8
 80065f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065f8:	b003      	add	sp, #12
 80065fa:	4770      	bx	lr
 80065fc:	20000064 	.word	0x20000064

08006600 <__swhatbuf_r>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	460c      	mov	r4, r1
 8006604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006608:	4615      	mov	r5, r2
 800660a:	2900      	cmp	r1, #0
 800660c:	461e      	mov	r6, r3
 800660e:	b096      	sub	sp, #88	; 0x58
 8006610:	da0c      	bge.n	800662c <__swhatbuf_r+0x2c>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	2100      	movs	r1, #0
 8006616:	f013 0f80 	tst.w	r3, #128	; 0x80
 800661a:	bf0c      	ite	eq
 800661c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006620:	2340      	movne	r3, #64	; 0x40
 8006622:	2000      	movs	r0, #0
 8006624:	6031      	str	r1, [r6, #0]
 8006626:	602b      	str	r3, [r5, #0]
 8006628:	b016      	add	sp, #88	; 0x58
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	466a      	mov	r2, sp
 800662e:	f000 f849 	bl	80066c4 <_fstat_r>
 8006632:	2800      	cmp	r0, #0
 8006634:	dbed      	blt.n	8006612 <__swhatbuf_r+0x12>
 8006636:	9901      	ldr	r1, [sp, #4]
 8006638:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800663c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006640:	4259      	negs	r1, r3
 8006642:	4159      	adcs	r1, r3
 8006644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006648:	e7eb      	b.n	8006622 <__swhatbuf_r+0x22>

0800664a <__smakebuf_r>:
 800664a:	898b      	ldrh	r3, [r1, #12]
 800664c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800664e:	079d      	lsls	r5, r3, #30
 8006650:	4606      	mov	r6, r0
 8006652:	460c      	mov	r4, r1
 8006654:	d507      	bpl.n	8006666 <__smakebuf_r+0x1c>
 8006656:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	2301      	movs	r3, #1
 8006660:	6163      	str	r3, [r4, #20]
 8006662:	b002      	add	sp, #8
 8006664:	bd70      	pop	{r4, r5, r6, pc}
 8006666:	466a      	mov	r2, sp
 8006668:	ab01      	add	r3, sp, #4
 800666a:	f7ff ffc9 	bl	8006600 <__swhatbuf_r>
 800666e:	9900      	ldr	r1, [sp, #0]
 8006670:	4605      	mov	r5, r0
 8006672:	4630      	mov	r0, r6
 8006674:	f7ff f8bc 	bl	80057f0 <_malloc_r>
 8006678:	b948      	cbnz	r0, 800668e <__smakebuf_r+0x44>
 800667a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667e:	059a      	lsls	r2, r3, #22
 8006680:	d4ef      	bmi.n	8006662 <__smakebuf_r+0x18>
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	f043 0302 	orr.w	r3, r3, #2
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	e7e3      	b.n	8006656 <__smakebuf_r+0xc>
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	6020      	str	r0, [r4, #0]
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	81a3      	strh	r3, [r4, #12]
 8006698:	9b00      	ldr	r3, [sp, #0]
 800669a:	6120      	str	r0, [r4, #16]
 800669c:	6163      	str	r3, [r4, #20]
 800669e:	9b01      	ldr	r3, [sp, #4]
 80066a0:	b15b      	cbz	r3, 80066ba <__smakebuf_r+0x70>
 80066a2:	4630      	mov	r0, r6
 80066a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a8:	f000 f81e 	bl	80066e8 <_isatty_r>
 80066ac:	b128      	cbz	r0, 80066ba <__smakebuf_r+0x70>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	431d      	orrs	r5, r3
 80066be:	81a5      	strh	r5, [r4, #12]
 80066c0:	e7cf      	b.n	8006662 <__smakebuf_r+0x18>
	...

080066c4 <_fstat_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	2300      	movs	r3, #0
 80066c8:	4d06      	ldr	r5, [pc, #24]	; (80066e4 <_fstat_r+0x20>)
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	f7fb f87d 	bl	80017d0 <_fstat>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	d102      	bne.n	80066e0 <_fstat_r+0x1c>
 80066da:	682b      	ldr	r3, [r5, #0]
 80066dc:	b103      	cbz	r3, 80066e0 <_fstat_r+0x1c>
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	bd38      	pop	{r3, r4, r5, pc}
 80066e2:	bf00      	nop
 80066e4:	200004b0 	.word	0x200004b0

080066e8 <_isatty_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	2300      	movs	r3, #0
 80066ec:	4d05      	ldr	r5, [pc, #20]	; (8006704 <_isatty_r+0x1c>)
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fb f87b 	bl	80017ee <_isatty>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_isatty_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_isatty_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	200004b0 	.word	0x200004b0

08006708 <abort>:
 8006708:	2006      	movs	r0, #6
 800670a:	b508      	push	{r3, lr}
 800670c:	f000 f82c 	bl	8006768 <raise>
 8006710:	2001      	movs	r0, #1
 8006712:	f7fb f80f 	bl	8001734 <_exit>

08006716 <_raise_r>:
 8006716:	291f      	cmp	r1, #31
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4604      	mov	r4, r0
 800671c:	460d      	mov	r5, r1
 800671e:	d904      	bls.n	800672a <_raise_r+0x14>
 8006720:	2316      	movs	r3, #22
 8006722:	6003      	str	r3, [r0, #0]
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800672c:	b112      	cbz	r2, 8006734 <_raise_r+0x1e>
 800672e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006732:	b94b      	cbnz	r3, 8006748 <_raise_r+0x32>
 8006734:	4620      	mov	r0, r4
 8006736:	f000 f831 	bl	800679c <_getpid_r>
 800673a:	462a      	mov	r2, r5
 800673c:	4601      	mov	r1, r0
 800673e:	4620      	mov	r0, r4
 8006740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006744:	f000 b818 	b.w	8006778 <_kill_r>
 8006748:	2b01      	cmp	r3, #1
 800674a:	d00a      	beq.n	8006762 <_raise_r+0x4c>
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	d103      	bne.n	8006758 <_raise_r+0x42>
 8006750:	2316      	movs	r3, #22
 8006752:	6003      	str	r3, [r0, #0]
 8006754:	2001      	movs	r0, #1
 8006756:	e7e7      	b.n	8006728 <_raise_r+0x12>
 8006758:	2400      	movs	r4, #0
 800675a:	4628      	mov	r0, r5
 800675c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006760:	4798      	blx	r3
 8006762:	2000      	movs	r0, #0
 8006764:	e7e0      	b.n	8006728 <_raise_r+0x12>
	...

08006768 <raise>:
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <raise+0xc>)
 800676a:	4601      	mov	r1, r0
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	f7ff bfd2 	b.w	8006716 <_raise_r>
 8006772:	bf00      	nop
 8006774:	20000064 	.word	0x20000064

08006778 <_kill_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	2300      	movs	r3, #0
 800677c:	4d06      	ldr	r5, [pc, #24]	; (8006798 <_kill_r+0x20>)
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	4611      	mov	r1, r2
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	f7fa ffc5 	bl	8001714 <_kill>
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d102      	bne.n	8006794 <_kill_r+0x1c>
 800678e:	682b      	ldr	r3, [r5, #0]
 8006790:	b103      	cbz	r3, 8006794 <_kill_r+0x1c>
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	bd38      	pop	{r3, r4, r5, pc}
 8006796:	bf00      	nop
 8006798:	200004b0 	.word	0x200004b0

0800679c <_getpid_r>:
 800679c:	f7fa bfb3 	b.w	8001706 <_getpid>

080067a0 <_init>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr

080067ac <_fini>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr
